<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SadConsole</name>
    </assembly>
    <members>
        <member name="T:SadConsole.Algorithms">
            <summary>
            The Bresenham algorithm collection
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            Swaps two references.
            </summary>
            <typeparam name="T">The type being swapped.</typeparam>
            <param name="lhs">Left value.</param>
            <param name="rhs">Right value.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using steep.
            </summary>
            <param name="x1">The start x</param>
            <param name="y1">The start y</param>
            <param name="x2">The end x</param>
            <param name="y2">The end y</param>
            <param name="plot">The plotting function, taking x and y. (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.FloodFill``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Func{``0,SadConsole.Algorithms.NodeConnections{``0}})">
            <summary>
            Uses a 4-way fill algorithm to change items from one type to another.
            </summary>
            <typeparam name="TNode">The item type that is changed.</typeparam>
            <param name="node">The item to change.</param>
            <param name="shouldNodeChange">Determines if the node should change.</param>
            <param name="changeNode">After it is determined if the node should change, this changes the node.</param>
            <param name="getNodeConnections">Gets any other nodes connected to this node.</param>
        </member>
        <member name="M:SadConsole.Algorithms.GradientFill(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Int32,System.Int32,SadRogue.Primitives.Rectangle,SadRogue.Primitives.ColorGradient,System.Action{System.Int32,System.Int32,SadRogue.Primitives.Color})">
            <summary>
            Processes an area and applies a gradient calculation to each part of the area.
            </summary>
            <param name="cellSize">The size of an individual cell. Makes the angle uniform.</param>
            <param name="position">The center of the gradient.</param>
            <param name="strength">The width of the gradient spread.</param>
            <param name="angle">The angle to apply the gradient.</param>
            <param name="area">The area to calculate.</param>
            <param name="gradient">The color gradient to fill with.</param>
            <param name="applyAction">The callback called for each part of the area.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Circle(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Plots the outside of the circle, passing the x,y to <paramref name="plot"/>.
            </summary>
            <param name="centerX">The X coordinate of the center of the circle.</param>
            <param name="centerY">The Y coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="plot">A method to call on each x,y coordinate of the outside of the circle.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Plots the outside of an ellipse, passing the x,y to <paramref name="plot"/>.
            </summary>
            <param name="x0">The X coordinate of the first corner of the ellipse.</param>
            <param name="y0">The Y coordinate of the first corner of the ellipse.</param>
            <param name="x1">The X coordinate of the second corner of the ellipse.</param>
            <param name="y1">The Y coordinate of the second corner of the ellipse.</param>
            <param name="plot">A method to call on each x,y coordinate of the outside of the ellipse.</param>
        </member>
        <member name="T:SadConsole.Algorithms.NodeConnections`1">
            <summary>
            Describes the 4-way connections of a node.
            </summary>
            <typeparam name="TNode">The type of object the node and its connections are.</typeparam>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.West">
            <summary>
            The west or left node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.East">
            <summary>
            The east or right node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.North">
            <summary>
            The north or up node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.South">
            <summary>
            The south or down node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasWest">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.West"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasEast">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.East"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasNorth">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.North"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasSouth">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.South"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor(`0,`0,`0,`0,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of this object with the specified connections.
            </summary>
            <param name="west">The west connection.</param>
            <param name="east">The east connection.</param>
            <param name="north">The north connection.</param>
            <param name="south">The south connection.</param>
            <param name="isWest">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.West"/> connection is valid; otherwise <see langword="false"/>.</param>
            <param name="isEast">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.East"/> connection is valid; otherwise <see langword="false"/>.</param>
            <param name="isNorth">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.North"/> connection is valid; otherwise <see langword="false"/>.</param>
            <param name="isSouth">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.South"/> connection is valid; otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor">
            <summary>
            Creates a new instance of this object with all connections set to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:SadConsole.AnimatedScreenSurface">
            <summary>
            Animates a collection of frames.
            </summary>
        </member>
        <member name="E:SadConsole.AnimatedScreenSurface.AnimationStateChanged">
            <summary>
            Raised when the <see cref="T:SadConsole.AnimatedScreenSurface.AnimationState"/> changes.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.FramesList">
            <summary>
            The frames of animation.
            </summary>
            <remarks>If this collection changes, <see cref="F:SadConsole.AnimatedScreenSurface.CurrentFrameIndexValue"/>, <see cref="M:SadConsole.AnimatedScreenSurface.UpdateFrameReferences"/>, and <see cref="F:SadConsole.AnimatedScreenSurface.TimePerFrame"/> should all be recalculated.</remarks>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AddedTime">
            <summary>
            Time counter for the animation
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.CurrentFrameIndexValue">
            <summary>
            The current frame index being animated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.TimePerFrame">
            <summary>
            How much time per animated frame should be used.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.Frames">
            <summary>
            All frames of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.FrameCount">
            <summary>
            The total number of frames.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.Center">
            <summary>
            Center of the animation used in positioning.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.Repeat">
            <summary>
            Indicates whether or not this animation will repeat once it has finished animating.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.IsPlaying">
            <summary>
            When true, Indicates the animation is currently animating. The <see cref="M:SadConsole.AnimatedScreenSurface.Update(System.TimeSpan)"/> method will advance the frames.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.AnimationDuration">
            <summary>
            The length of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame index to animate.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.IsEmpty">
            <summary>
            Indicates the animation is empty.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.Width">
            <summary>
            The width of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.Height">
            <summary>
            The height of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.Name">
            <summary>
            Gets the name of this animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.CurrentFrame">
            <summary>
            Gets the current frame being animated.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenSurface.State">
            <summary>
            Gets the current animation state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.#ctor(System.String,System.Int32,System.Int32,SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
            <param name="font">The font used with this animation.</param>
            <param name="fontSize">The size of the font.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.UpdateFrameReferences">
            <summary>
            Updates the visible surface according to <see cref="P:SadConsole.AnimatedScreenSurface.CurrentFrameIndex"/>.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.CreateFrame">
            <summary>
            Creates a new frame with the same dimensions as this entity and adds it to the Frames collection of the entity.
            </summary>
            <returns>The created frame.</returns>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.CalculateFrameDuration">
            <summary>
            Calculates the time needed per frame for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.Stop">
            <summary>
            Stops animating.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.Start">
            <summary>
            Starts animating the frames.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.Restart">
            <summary>
            Restarts the animation from the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.Update(System.TimeSpan)">
            <summary>
            Updates the animation frames and calls update on the base class.
            </summary>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.ToString">
            <summary>
            Returns the name of the animation prefixed with "Animation - ".
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.OnSerializingMethod2(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Does nothing.
            </summary>
            <param name="context">Nothing.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.OnSerializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Does nothing.
            </summary>
            <param name="context">Nothing.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Calls <see cref="M:SadConsole.AnimatedScreenSurface.UpdateFrameReferences"/>.
            </summary>
            <param name="context">Nothing.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.CreateStatic(System.Int32,System.Int32,System.Int32,System.Double,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color})">
            <summary>
            Creates an animated surface that looks like static.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="frames">How many frames the animation should have.</param>
            <param name="blankChance">Chance a character will be blank. Characters are between index 48-158. Chance is evaluated versus <see cref="M:System.Random.NextDouble"/>.</param>
            <param name="background">The background color of the animation. Defaults to transparent.</param>
            <param name="foreground">The foreground color of the animation. Defaults to white.</param>
            <returns>An animation.</returns>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.AnimatedScreenSurface"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.AnimatedScreenSurface"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns>The animated surface.</returns>
        </member>
        <member name="T:SadConsole.AnimatedScreenSurface.AnimationStateChangedEventArgs">
            <summary>
            Event args for when the animation state changes
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationStateChangedEventArgs.PreviousState">
            <summary>
            The previous state.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationStateChangedEventArgs.NewState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenSurface.AnimationStateChangedEventArgs.#ctor(SadConsole.AnimatedScreenSurface.AnimationState,SadConsole.AnimatedScreenSurface.AnimationState)">
            <summary>
            Creates a new instance of the event args.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:SadConsole.AnimatedScreenSurface.AnimationState">
            <summary>
            Represents what state the animation is in.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationState.Stopped">
            <summary>
            The animation has never been played or was forcibly stopped.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationState.Restarted">
            <summary>
            The animation was either manually restarted or repeated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationState.Finished">
            <summary>
            The animation was played and completed.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationState.Activated">
            <summary>
            The animation is now the current animation for an entity.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenSurface.AnimationState.Deactivated">
            <summary>
            The animation is no longer the current animation for an entity.
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.AnsiWriter">
            <summary>
            Writes a <see cref="T:SadConsole.Ansi.Document"/> to a <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.AnsiDocument">
            <summary>
            The document used to create this writer.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.BlinkEffect">
            <summary>
            The blink effect to apply when the ansi document provides the ANSI blink command.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.Cursor">
            <summary>
            The cursor used to write to the target <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.CharactersPerSecond">
            <summary>
            How many characters to process a second. When set to 0 reads the entire document at once.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.#ctor(SadConsole.Ansi.Document,SadConsole.ICellSurface)">
            <summary>
            Creates a new instance with the source document and target surface.
            </summary>
            <param name="ansiDocument">The source document containing ANSI commands.</param>
            <param name="editor">The surface to parse the ANSI to.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.Process(System.Double)">
            <summary>
            Processes the document by the amount of time that has elapsed. If <see cref="P:SadConsole.Ansi.AnsiWriter.CharactersPerSecond"/> is 0, time elapsed has no affect.
            </summary>
            <param name="timeElapsed">The time in seconds.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiInterpret(System.String)">
            <summary>
            Interprets an individual ansi code.
            </summary>
            <param name="code">The ANSI.SYS code to read.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiReadLine(System.String,System.Boolean)">
            <summary>
            Reads a line of ANSI.SYS code.
            </summary>
            <param name="line">The line to read.</param>
            <param name="moreLines">When <see langword="true"/>, calls <see cref="M:SadConsole.Components.Cursor.LineFeed"/>; otherwise does nothing.</param>
            <returns>Returns false when character 26 is encountered; otherwise true.</returns>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.ReadEntireDocument">
            <summary>
            Loads an ansi file and parses it.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.Restart">
            <summary>
            Moves the reader back to the start of the file so that the source can .
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.Document">
            <summary>
            Represents an ANSI.SYS formatted document.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.AnsiBytes">
            <summary>
            Gets or sets the ANSI.SYS bytes that make up the document.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.AnsiString">
            <summary>
            A string representing the <see cref="P:SadConsole.Ansi.Document.AnsiBytes"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.Stream">
            <summary>
            A stream that points to the <see cref="P:SadConsole.Ansi.Document.AnsiBytes"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.Document.#ctor(System.String)">
            <summary>
            Creates a new document from the provided file name.
            </summary>
            <param name="file">The file to load.</param>
        </member>
        <member name="M:SadConsole.Ansi.Document.Finalize">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Ansi.Document.FromAsciiString(System.String)">
            <summary>
            Creates a new document from an existing string representing ANSI.SYS codes and characters.
            </summary>
            <param name="ansiContent">The ANSI.SYS encoded string.</param>
            <returns>A new document.</returns>
        </member>
        <member name="M:SadConsole.Ansi.Document.FromBytes(System.Byte[])">
            <summary>
            Creates a new document from an existing byte array representing ANSI.SYS codes and characters.
            </summary>
            <param name="bytes">The ANSI.SYS encoded byte array.</param>
            <returns>A new document.</returns>
        </member>
        <member name="M:SadConsole.Ansi.Document.System#IDisposable#Dispose">
            <summary>
            Disposes the <see cref="P:SadConsole.Ansi.Document.Stream"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.Helpers">
            <summary>
            Helpers related to ANSI processing.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiJustNormalColor(SadRogue.Primitives.Color)">
            <summary>
            Returns the a normal, dark, ansi color based on the ansi color provided.
            </summary>
            <param name="input">An ansi color.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiAdjustColor(SadRogue.Primitives.Color,System.Boolean)">
            <summary>
            Adjusts the provided color based on the <paramref name="bold"/> value.
            </summary>
            <param name="input">The ansi color to adjust.</param>
            <param name="bold">When <see langword="true"/>, adjusts the color to the bright version. When <see langword="false"/>, adjusts the color to the normal version.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiConfigurePrintColor(System.Boolean,System.Int32,SadConsole.Ansi.State)">
            <summary>
            Sets the print appearance of the cursor based on the ANSI.SYS code provided.
            </summary>
            <param name="isBackground">When true, changes the background color instead of the foreground.</param>
            <param name="code">The 0-7 color code.</param>
            <param name="ansiState">The current state of the ANSI settings.</param>
        </member>
        <member name="T:SadConsole.Ansi.State">
            <summary>
            Represents the state of an ANSI.SYS processor.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Bold">
            <summary>
            Indicates that the state is using bold colors.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Reverse">
            <summary>
            Indicates that the state is printing reverse colors.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Concealed">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Foreground">
            <summary>
            Foreground color for the state of the ANSI.SYS processor.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Background">
            <summary>
            Background color for the state of the ANSI.SYS processor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.#ctor">
            <summary>
            Creates a new object to track the state of the ansi cursor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiCorrectPrintColor">
            <summary>
            Forces the Background of the print appearance to be the darkened color and the foreground to be bright or not based on the <see cref="P:SadConsole.Ansi.State.Bold"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiResetVideo">
            <summary>
            Resets all of the print appearance and ansi settings back to the default.
            </summary>
        </member>
        <member name="T:SadConsole.CellDecorator">
            <summary>
            Decorates a cell with a colored glyph.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Empty">
            <summary>
            An empty cell decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Color">
            <summary>
            Foreground color of the decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Glyph">
            <summary>
            Glyph of the decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Mirror">
            <summary>
            Mirror setting of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.CellDecorator.#ctor(SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a new decorator with the specified colors, glyph, visiblity, and mirror settings.
            </summary>
            <param name="color">Foreground color.</param>
            <param name="glyph">Glyph value.</param>
            <param name="mirror">Mirror setting.</param>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(SadConsole.CellDecorator)">
            <summary>
            Determines if this object has the same value as the other.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if the objects have the same values.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Equality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="F:SadConsole.CellDecorator.Color"/>, <see cref="F:SadConsole.CellDecorator.Glyph"/>, and <see cref="F:SadConsole.CellDecorator.Mirror"/> match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Inequality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects do not match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="F:SadConsole.CellDecorator.Color"/>, <see cref="F:SadConsole.CellDecorator.Glyph"/>, and <see cref="F:SadConsole.CellDecorator.Mirror"/> do not match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellDecorator.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.CellSurface">
            <summary>
            An array of <see cref="T:SadConsole.ColoredGlyph"/> objects used to represent a 2D surface.
            </summary>
        </member>
        <member name="E:SadConsole.CellSurface.IsDirtyChanged">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedDown">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedRight">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedLeft">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedUp">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.UsePrintProcessor">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Effects">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.IsDirty">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.DefaultForeground">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.DefaultBackground">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.DefaultGlyph">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.View">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.ViewWidth">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.ViewHeight">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Area">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Width">
            <summary>
            The total width of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Height">
            <summary>
            The total height of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.IsScrollable">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.ViewPosition">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Cells">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Count">
            <summary>
            The count of glyphs this surface contains.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The visible width of the surface in cells.</param>
            <param name="viewHeight">The visible height of the surface in cells.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The width of the surface in cells.</param>
            <param name="viewHeight">The height of the surface in cells.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(SadRogue.Primitives.GridViews.IGridView{SadConsole.ColoredGlyph},System.Int32,System.Int32)">
            <summary>
            Creates a new surface from a grid view with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="surface">The surface to use as the source of cells.</param>
            <param name="visibleWidth">Optional view width. If <c>0</c>, the view width matches the width of the surface.</param>
            <param name="visibleHeight">Optional view height. If <c>0</c>, the view width matches the height of the surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Resize(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface(SadConsole.ColoredGlyph[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.SetIsDirtySafe">
            <summary>
            Sets <see cref="P:SadConsole.CellSurface.IsDirty"/> to <see langword="true"/> without triggering <see cref="M:SadConsole.CellSurface.OnIsDirtyChanged"/>.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.OnIsDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.OnCellsReset">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.Cells"/> property is reset.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="T:SadConsole.ColoredGlyph">
            <summary>
            Represents an individual piece of a <see cref="T:SadConsole.ICellSurface"/> containing a glyph, foreground color, background color, and a mirror effect.
            </summary>
        </member>
        <member name="E:SadConsole.ColoredGlyph.IsDirtySet">
            <summary>
            An event that is raised when the <see cref="P:SadConsole.ColoredGlyph.IsDirty"/> property is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Decorators">
            <summary>
            Modifies the look of a cell with additional character. 
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Foreground">
            <summary>
            The foreground color of this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Background">
            <summary>
            The background color of this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Glyph">
            <summary>
            The glyph index from a font for this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Mirror">
            <summary>
            The mirror effect for this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.GlyphCharacter">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.IsVisible">
            <summary>
            <see langword="true"/> when this cell should be drawn; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.IsDirty">
            <summary>
            <see langword="true"/> when this cell needs to be redrawn; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor">
            <summary>
            Creates a cell with a white foreground, black background, glyph 0, and no mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color)">
            <summary>
            Creates a cell with the specified foreground, black background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a cell with the specified foreground, specified background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates a cell with the specified foreground, background, and glyph, with no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, mirror, and visibility.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visiblity of the glyph.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean,SadConsole.CellDecorator[])">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visiblity of the glyph.</param>
            <param name="decorators">Decorators for the cell.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.CopyAppearanceTo(SadConsole.ColoredGlyph)">
            <summary>
            Copies the visual appearance to the specified cell. This includes foreground, background, glyph, and mirror effect.
            </summary>
            <param name="cell">The target cell to copy to.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.CopyAppearanceFrom(SadConsole.ColoredGlyph)">
            <summary>
            Sets the foreground, background, glyph, and mirror effect to the same as the specified cell.
            </summary>
            <param name="cell">The target cell to copy from.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clear">
            <summary>
            Resets the foreground, background, glyph, and mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.ToState">
            <summary>
            Copies the settings of this colored glyph into a new state object.
            </summary>
            <returns>The state of this colored glyph.</returns>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clone">
            <summary>
            Returns a new cell with the same properties as this one.
            </summary>
            <returns>The new cell.</returns>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Matches(SadConsole.ColoredGlyph)">
            <summary>
            Checks if this <see cref="T:SadConsole.ColoredGlyph"/> object's properties match another's.
            </summary>
            <param name="other">The other object to check.</param>
            <returns>Returns <see langword="true"/> when the object's properties match; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.ColoredGlyph.CreateArray(System.Int32)">
            <summary>
            Creates an array of colored glyphs.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredGlyph.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.ColoredGlyphState">
            <summary>
            A <see cref="T:SadConsole.ColoredGlyph"/> with state information.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Decorators">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Foreground">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Foreground"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Background">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Background"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Glyph">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Glyph"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Mirror">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.IsVisible">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.IsVisible"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyphState.#ctor(SadConsole.ColoredGlyph)">
            <summary>
            Creates a new state from a cell.
            </summary>
            <param name="cell">The colored glyph this state is a copy of.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyphState.#ctor(SadConsole.CellDecorator[],SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean)">
            <summary>
            Creates a new state.
            </summary>
            <param name="decorators">Decorators for the cell.</param>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visiblity of the glyph.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyphState.RestoreState(SadConsole.ColoredGlyph@)">
            <summary>
            Restores this state to the specified cell.
            </summary>
        </member>
        <member name="T:SadConsole.ColoredString">
            <summary>
            Represents a string that has foreground and background colors for each character in the string.
            </summary>
        </member>
        <member name="T:SadConsole.ColoredString.ColoredGlyphEffect">
            <summary>
            A <see cref="T:SadConsole.ColoredGlyph"/> with a <see cref="T:SadConsole.Effects.ICellEffect"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.ColoredGlyphEffect.Effect">
            <summary>
            The effect of this cell.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.ColoredGlyphEffect.Clone">
            <summary>
            Creates a copy of this <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/>.
            </summary>
            <returns>A copy of this <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/>.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.ColoredGlyphEffect.FromColoredGlyph(SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Creates a new <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> from a <see cref="T:SadConsole.ColoredGlyph"/> with the specified effect.
            </summary>
            <param name="glyph">The glyph.</param>
            <param name="effect">When provided, sets the <see cref="P:SadConsole.ColoredString.ColoredGlyphEffect.Effect"/>.</param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.ColoredString.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> from the string.
            </summary>
            <param name="index">The index in the string of the <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/>.</param>
            <returns>The colored glyph representing the character in the string.</returns>
        </member>
        <member name="P:SadConsole.ColoredString.String">
            <summary>
            Gets or sets the characters representing this string. When set, first processes the string through <see cref="!:StringParser.IParser.Parse(string, int, ICellSurface, StringParser.ParseCommandStacks)"/> method from <see cref="P:SadConsole.ColoredString.Parser"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.Length">
            <summary>
            The total number of <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> characters in the string.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreGlyph">
            <summary>
            When true, instructs a caller to not render the glyphs of the string.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreForeground">
            <summary>
            When true, instructs a caller to not render the foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreBackground">
            <summary>
            When true, instructs a caller to not render the background color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreEffect">
            <summary>
            When true, instructs a caller to not render the effect.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreMirror">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreDecorators">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ColoredString class with the specified blank characters.
            </summary>
            <param name="capacity">The number of blank characters.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value.
            </summary>
            <param name="value">The backing string.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror,SadConsole.CellDecorator[])">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="foreground">The foreground color for each character.</param>
            <param name="background">The background color for each character.</param>
            <param name="mirror">The mirror for each character.</param>
            <param name="decorators">The decorators to apply to each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadConsole.ColoredString.ColoredGlyphEffect)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="appearance">The appearance to use for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredString.ColoredGlyphEffect[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredGlyph[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredGlyph"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.Clone">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object by cloning this instance.
            </summary>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance from the index to the end.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <param name="count">The count of <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> objects to copy.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SetEffect(SadConsole.Effects.ICellEffect)">
            <summary>
            Applies the referenced cell effect to every character in the colored string.
            </summary>
            <param name="effect">The effect to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetForeground(SadRogue.Primitives.Color)">
            <summary>
            Applies the referenced color to every character foreground in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetBackground(SadRogue.Primitives.Color)">
            <summary>
            Applies the referenced color to every character background in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetGlyph(System.Int32)">
            <summary>
            Applies the referenced glyph to every character in the colored string.
            </summary>
            <param name="glyph">The glyph to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetMirror(SadConsole.Mirror)">
            <summary>
            Applies the mirror value to each character in the colored string.
            </summary>
            <param name="mirror">The mirror mode.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetDecorators(SadConsole.CellDecorator[])">
            <summary>
            Applies the decorators to each character in the colored string.
            </summary>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.ColoredString.ToString">
            <summary>
            Returns a string representing the glyphs in this object.
            </summary>
            <returns>A string composed of each glyph in this object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.FromGradient(SadRogue.Primitives.Gradient,System.String)">
            <summary>
            Creates a new colored string from the specified gradient and text.
            </summary>
            <param name="colors">The gradient of colors to apply to the text.</param>
            <param name="text">The text the colored string contains.</param>
            <returns>A colored string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,SadConsole.ColoredString)">
            <summary>
            Combines two ColoredString objects into a single ColoredString object. Ignore* values are only copied when both strings Ignore* values match.
            </summary>
            <param name="string1">The left-side of the string.</param>
            <param name="string2">The right-side of the string.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,System.String)">
            <summary>
            Combines a colored string and string. The last colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The colored string.</param>
            <param name="string2">The string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(System.String,SadConsole.ColoredString)">
            <summary>
            Combines a string and a colored string. The first colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The string.</param>
            <param name="string2">The colored string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            This method is obsolete. Use <see cref="P:SadConsole.ColoredString.Parser"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.Parser">
            <summary>
            The string parser to use for transforming strings into <see cref="T:SadConsole.ColoredString"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Components.Cursor">
            <summary>
            A cursor that is attached to a <see cref="T:SadConsole.Console"/> used for printing.
            </summary>
        </member>
        <member name="F:SadConsole.Components.Cursor.DefaultCursorGlyph">
            <summary>
            The default glyph used for a new cursor. Value 219.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Cursor.KeyboardPreview">
            <summary>
            Raised when the keyboard is processing keys. Each key is sent to this event and can be cancelled
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorRenderCell">
            <summary>
            Cell used to render the cursor on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorRenderCellActiveState">
            <summary>
            Used in rendering. The cell after the effect has been applied.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintAppearance">
            <summary>
            Appearance used when printing text. <see cref="P:SadConsole.Components.Cursor.PrintOnlyCharacterData"/> must be set to <see langword="false"/> for this to apply.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintAppearanceMatchesHost">
            <summary>
            When <see langword="true"/>, printing will use the host's <see cref="P:SadConsole.ICellSurface.DefaultForeground"/> and <see cref="P:SadConsole.ICellSurface.DefaultBackground"/> color properties.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintEffect">
            <summary>
            This effect is applied to each cell printed by the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorRenderEffect">
            <summary>
            This is the cursor visible effect, like blinking.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorGlyph">
            <summary>
            Sets the glyph used in rendering. A shortcut to <see cref="P:SadConsole.Components.Cursor.CursorRenderCell"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintOnlyCharacterData">
            <summary>
            When <see langword="true"/>, indicates that the cursor, when printing, should not use the <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/> property in determining the color/effect of the cell, but keep the cell the same as it was.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.MouseClickReposition">
            <summary>
            When <see langword="true"/>, left-clicking on the host surface will reposition the cursor to the clicked position.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.MouseClickRepositionHandlesMouse">
            <summary>
            When <see langword="true"/>, returns a handled status from the mouse processor when the <see cref="P:SadConsole.Components.Cursor.MouseClickReposition"/> is enabled. This prevents further left-mouse processing on the host.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.IsVisible">
            <summary>
            Shows or hides the cursor. This does not affect how the cursor operates.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.IsEnabled">
            <summary>
            When <see langword="false"/>, prevents the cursor from running on the host.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.ApplyCursorEffect">
            <summary>
            When <see langword="false"/>, prevents the <see cref="P:SadConsole.Components.Cursor.CursorRenderEffect"/> from being applied.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.UsePrintEffect">
            <summary>
            When <see langword="true"/>, applies the <see cref="P:SadConsole.Components.Cursor.PrintEffect"/> to the cursor when it prints.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.Position">
            <summary>
            Gets or sets the location of the cursor on the console.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.DisableWordBreak">
            <summary>
            When true, prevents any print method from breaking words up by spaces when wrapping lines.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.UseLinuxLineEndings">
            <summary>
            Enables linux-like string parsing where a \n behaves like a \r\n.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.UseStringParser">
            <summary>
            Indicates this cursor should process te string through the <see cref="!:StringParser.IParser.Parse(string, int, ICellSurface, StringParser.ParseCommandStacks)"/> method from <see cref="P:SadConsole.ColoredString.Parser"/> to create a colored string when using <see cref="M:SadConsole.Components.Cursor.Print(System.String)"/> or <see cref="M:SadConsole.Components.Cursor.Print(System.String,SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.Row">
            <summary>
            Gets or sets the row of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.Column">
            <summary>
            Gets or sets the column of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.AutomaticallyShiftRowsUp">
            <summary>
            Indicates that when the cursor goes past the last cell of the console, that the rows should be shifted up when the cursor is automatically reset to the next line.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.SortOrder">
            <summary>
            Sets the sort order of this component within the host.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Cursor.#ctor">
            <summary>
            Creates a new instance of the cursor as a component.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Cursor.#ctor(SadConsole.ICellSurface)">
            <summary>
            Creates a new instance of the cursor that works with the specified surface.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:SadConsole.Components.Cursor.ApplyDefaultCursorEffect">
            <summary>
            Resets the <see cref="P:SadConsole.Components.Cursor.CursorRenderCell"/> back to the default.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Cursor.RestartCursorEffect">
            <summary>
            Clones and reassigns <see cref="P:SadConsole.Components.Cursor.CursorRenderEffect"/> to restart it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearanceToHost">
            <summary>
            Sets the cursor appearance to the console's default foreground and background.
            </summary>
            <returns>This cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when the cursor is not attached to any surface.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearance(SadConsole.ColoredGlyph)">
            <summary>
            Sets <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/>.
            </summary>
            <param name="appearance">The appearance to set.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearance(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Sets <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/>.
            </summary>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearance(SadRogue.Primitives.Color)">
            <summary>
            Sets <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/>, only changing the foreground color.
            </summary>
            <param name="foreground">The foreground color.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Print(System.String)">
            <summary>
            Prints text to the console using the default print appearance.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Print(System.String,SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Prints text on the console.
            </summary>
            <param name="text">The text to print.</param>
            <param name="template">The way the text will look when it is printed.</param>
            <param name="templateEffect">Effect to apply to the text as its printed.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Print(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.CarriageReturn">
            <summary>
            Returns the cursor to the start of the current line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.LineFeed">
            <summary>
            Moves the cursor down a line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.NewLine">
            <summary>
            Calls the <see cref="M:SadConsole.Components.Cursor.CarriageReturn"/> and <see cref="M:SadConsole.Components.Cursor.LineFeed"/> methods in a single call.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Move(SadRogue.Primitives.Point)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="position">The destination of the cursor.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Move(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="x">The x (horizontal) of the position.</param>
            <param name="y">The x (vertical) of the position.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Up(System.Int32)">
            <summary>
            Moves the cusor up by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Down(System.Int32)">
            <summary>
            Moves the cusor down by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Left(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.LeftWrap(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Right(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.RightWrap(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="T:SadConsole.Components.IComponent">
            <summary>
            A component that can be added to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsUpdate">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsRender">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsMouse">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsKeyboard">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the render frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host console.</param>
            <param name="state">The mouse state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host that added this component.</param>
            <param name="keyboard">The keyboard state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnAdded(SadConsole.IScreenObject)">
            <summary>
            Called when the component is added to a host.
            </summary>
            <param name="host">The host that added the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnRemoved(SadConsole.IScreenObject)">
            <summary>
            Called when the component is removed from the host.
            </summary>
            <param name="host">The host that removed the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnHostUpdated(SadConsole.IScreenObject)">
            <summary>
            Called when various states in the host change.
            </summary>
            <param name="host">The host that uses this component.</param>
        </member>
        <member name="T:SadConsole.Components.InputConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)"/> and <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.InputConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="keyboard">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.KeyboardConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.KeyboardConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="keyboard">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.LogicComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> and <see cref="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LogicComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.Render(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.LogicComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.MouseConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.MouseConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.ObjectComponentMove">
            <summary>
            Moves a <see cref="T:SadConsole.IScreenObject"/> with the arrow keys.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.Amount">
            <summary>
            The amount to move the object by.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.LeftKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Left"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.RightKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Right"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.UpKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Up"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.DownKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Down"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Components.ObjectComponentMove.#ctor">
            <summary>
            Creates a new instance of the object with an <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/> of 1.
            </summary>
        </member>
        <member name="M:SadConsole.Components.ObjectComponentMove.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Moves the <paramref name="host"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/> when the appropriate key is pressed.
            </summary>
            <param name="host"></param>
            <param name="keyboard"></param>
            <param name="handled"></param>
        </member>
        <member name="T:SadConsole.Components.RenderComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.RenderComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.RenderComponent.Render(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.RenderComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.RenderComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.SurfaceComponentFollowTarget">
            <summary>
            Add to a <see cref="T:SadConsole.IScreenSurface"/> to have the <see cref="P:SadConsole.ICellSurface.ViewPosition"/> center on a specific object.
            </summary>
        </member>
        <member name="P:SadConsole.Components.SurfaceComponentFollowTarget.Target">
            <summary>
            Target to have the surface follow.
            </summary>
        </member>
        <member name="M:SadConsole.Components.SurfaceComponentFollowTarget.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.SurfaceComponentFollowTarget.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.Timer">
            <summary>
            A simple timer with callback.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Timer.TimerElapsed">
            <summary>
            Called when the timer elapses.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Timer.TimerRestart">
            <summary>
            Called when the timer restarts.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Timer.Repeat">
            <summary>
            If true, the timer will restart when the time has elapsed.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Timer.TimerAmount">
            <summary>
            How many milliseconds to cause the timer to trigger.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Timer.IsPaused">
            <summary>
            When true, the timer does not count time.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Timer.#ctor(System.TimeSpan)">
            <summary>
            Creates a new timer.
            </summary>
            <param name="triggerTime">Duration of the timer.</param>
        </member>
        <member name="M:SadConsole.Components.Timer.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Updates the timer with the time since the last call.
            </summary>
            <param name="console">The parent object.</param>
            <param name="delta">The time since the last frame update.</param>
        </member>
        <member name="M:SadConsole.Components.Timer.Restart">
            <summary>
            Restarts the timer; sets <see cref="P:SadConsole.Components.Timer.IsPaused"/> to false.
            </summary>
        </member>
        <member name="T:SadConsole.Components.UpdateComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.UpdateComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Console">
            <summary>
            A surface that has a cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Cursor">
            <summary>
            The virtual cursor reference.
            </summary>
        </member>
        <member name="P:SadConsole.Console.AutoCursorOnFocus">
            <summary>
            Toggles the cursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the console in cells.</param>
            <param name="height">The visible height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the console in cells.</param>
            <param name="height">The height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
            <param name="initialCells">The cells to seed the console with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new console using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.Console.OnVisibleChanged">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Console.OnFocusLost">
            <summary>
            Called when this console's focus has been lost. Hides the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocused">
            <summary>
            Called when this console is focused. Shows the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.ToString">
            <summary>
            Returns the value "Console".
            </summary>
            <returns>The string "Console".</returns>
        </member>
        <member name="P:SadConsole.Console.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Console.TimesShiftedDown">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.TimesShiftedRight">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.TimesShiftedLeft">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.TimesShiftedUp">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.UsePrintProcessor">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Effects">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Area">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Height">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Width">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.DefaultBackground">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.DefaultForeground">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.DefaultGlyph">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.IsScrollable">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.View">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.ViewHeight">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.ViewPosition">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.ViewWidth">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.Count">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.Console.IsDirtyChanged">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Console.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Console.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
            <param name="clear">When <see langword="true"/>, resets every cell to the <see cref="P:SadConsole.Console.DefaultForeground"/>, <see cref="P:SadConsole.Console.DefaultBackground"/> and glyph 0.</param>
        </member>
        <member name="M:SadConsole.Console.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface and view to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="clear">When <see langword="true"/>, resets every cell to the <see cref="P:SadConsole.Console.DefaultForeground"/>, <see cref="P:SadConsole.Console.DefaultBackground"/> and glyph 0.</param>
        </member>
        <member name="T:SadConsole.Debug.Screen">
            <summary>
            A debugging screen that takes the place of the active <see cref="P:SadConsole.GameHost.Screen"/> and displays information about SadConsole.
            </summary>
        </member>
        <member name="M:SadConsole.Debug.Screen.Show(SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Displays the debugger.
            </summary>
            <param name="font">The font to use the debugging screen.</param>
            <param name="fontSize">The size of the font.</param>
        </member>
        <member name="M:SadConsole.Debug.Screen.Show">
            <summary>
            Shows the debug screen with the default font and size.
            </summary>
        </member>
        <member name="T:SadConsole.DrawCalls.DrawCallCustom">
            <summary>
            A draw call that invokes an <see cref="T:System.Action"/> delegate.
            </summary>
        </member>
        <member name="P:SadConsole.DrawCalls.DrawCallCustom.DrawCallback">
            <summary>
            The delegate to call.
            </summary>
        </member>
        <member name="M:SadConsole.DrawCalls.DrawCallCustom.#ctor(System.Action)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="draw">The delegate to call when the draw call is drawn.</param>
        </member>
        <member name="M:SadConsole.DrawCalls.DrawCallCustom.Draw">
            <summary>
            Invokes <see cref="P:SadConsole.DrawCalls.DrawCallCustom.DrawCallback"/>.
            </summary>
        </member>
        <member name="T:SadConsole.DrawCalls.IDrawCall">
            <summary>
            A draw call used by final rendering.
            </summary>
        </member>
        <member name="M:SadConsole.DrawCalls.IDrawCall.Draw">
            <summary>
            Draws an object.
            </summary>
        </member>
        <member name="T:SadConsole.EasingFunctions.EasingBase">
            <summary>
            The base class for an easing function.
            </summary>
        </member>
        <member name="P:SadConsole.EasingFunctions.EasingBase.Mode">
            <summary>
            The easing mode.
            </summary>
        </member>
        <member name="M:SadConsole.EasingFunctions.EasingBase.#ctor">
            <summary>
            Creates a new instance of this type.
            </summary>
        </member>
        <member name="M:SadConsole.EasingFunctions.EasingBase.Ease(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called to apply an easing function to the value.
            </summary>
            <param name="elapsedTime">The total time applied to the function.</param>
            <param name="startingValue">The starting value.</param>
            <param name="endingValue">The ending value.</param>
            <param name="maxDuration">Total time applied to easing.</param>
            <returns>A calculated value.</returns>
        </member>
        <member name="T:SadConsole.EasingFunctions.EasingMode">
            <summary>
            The types of easing modes.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Blink">
            <summary>
            Switches between the normal foreground of a cell and a specified color for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.UseCellBackgroundColor">
            <summary>
            When true, uses the current cells background color for fading instead of the value of <see cref="P:SadConsole.Effects.Blink.BlinkOutColor"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkOutColor">
            <summary>
            The color to fade out to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.Duration">
            <summary>
            The total duraction this effect will run for, before being flagged as finished. <see cref="F:System.TimeSpan.MaxValue"/> represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.#ctor">
            <summary>
            Creates a new instance of the blink effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blink.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blink.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blink.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.BlinkGlyph">
            <summary>
            Switches between the glyph of a cell and a specified glyph for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.GlyphIndex">
            <summary>
            The glyph index to blink into.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.Duration">
            <summary>
            The total duraction this effect will run for, before being flagged as finished. <see cref="F:System.TimeSpan.MaxValue"/> represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.#ctor">
            <summary>
            Creates an instance of the blink glyph effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.CellEffectBase">
            <summary>
            A base class for cell effects.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._delayFinished">
            <summary>
            A flag to indidcate that the delay timer has finished.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._timeElapsed">
            <summary>
            The total time elapsed while processing the effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.CloneOnAdd">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.StartDelay">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RemoveOnFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.#ctor">
            <summary>
            Creates a new instance of the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Clone">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.Id">
            <summary>
            A user defined identifier of the effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.Tag">
            <summary>
            An object associated with this effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.UseDuration">
            <summary>
            When <see langword="true" />, uses the <see cref="P:SadConsole.Effects.CodeEffect.Duration"/> timer to stop this effect; otherwise <see langword="false" />.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.Duration">
            <summary>
            The amount of time this effect runs for in seconds.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.Clone">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.Delay">
            <summary>
            An effect that doesn't do anything except run the <see cref="P:SadConsole.Effects.CellEffectBase.StartDelay"/> timer. Usually used with the <see cref="T:SadConsole.Effects.EffectSet"/> effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Delay.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.EffectSet">
            <summary>
            Chains one effect after another.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectSet.Effects">
            <summary>
            The list of effects to process.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectSet.Repeat">
            <summary>
            When <see langword="true"/>, instead of ending when finished, it will repeat. Otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectSet.DelayBetweenEffects">
            <summary>
            An artificial delay between each effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectSet.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.ToString">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.GetEnumerator">
            <summary>
            Gets an enumerator of all the effects.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Add(SadConsole.Effects.ICellEffect)">
            <summary>
            Adds an effect to the end of the <see cref="P:SadConsole.Effects.EffectSet.Effects"/> collection.
            </summary>
            <param name="effect">The effect to add.</param>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager">
            <summary>
            Effects manager for a text surface.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager._effects">
            <summary>
            A dictionary of effect data keyed by the effect.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager._effectCells">
            <summary>
            A dictionary of effect data keyed by the cell index.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager._backingSurface">
            <summary>
            The surface hosting this effects manager.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.Count">
            <summary>
            Gets the number of effects.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.ICellSurface)">
            <summary>
            Creates a new effects manager associated with a text surface.
            </summary>
            <param name="surface">Text surface to manage.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a specific cell.
            </summary>
            <param name="cellIndex">Cell index to set the effect for.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{System.Int32},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of the <paramref name="cellIndicies"/> provided.
            </summary>
            <param name="cellIndicies">A list of cell indicies to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffect(System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffects">
            <summary>
            Gets a collection of effects associated with the manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)">
            <summary>
            Removes an effect and associated cells from the manager.
            </summary>
            <param name="effect">Effect to remove.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.RemoveAll">
            <summary>
            Removes all effects and associated cells.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)">
            <summary>
            Gets effect data from the dicronary if it exists.
            </summary>
            <param name="effect">The effect to get.</param>
            <param name="effectData">The effect data ssociated with the effect.</param>
            <returns><see langword="true"/> when the effect exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ClearCellEffect(System.Int32)">
            <summary>
            Clears the effect for the cell specified by index.
            </summary>
            <param name="cellIndex">The cell index.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)">
            <summary>
            Updates all known effects and applies them to their associated cells.
            </summary>
            <param name="delta">The time elapased since the last update.</param>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData">
            <summary>
            Represents a mapping of a single effect and associated cells.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.Effect">
            <summary>
            The effect.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.CellsStates">
            <summary>
            The cells affected by the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.#ctor(SadConsole.Effects.ICellEffect)">
            <summary>
            Creates a new instance of the cell-effect mapping.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.RemoveCell(System.Int32,System.Boolean)">
            <summary>
            Removes a cell by index from the effect data.
            </summary>
            <param name="cellIndex">The cell index.</param>
            <param name="restoreState">If <see langword="true"/> the cell will have its original state restored; otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.ContainsCell(System.Int32)">
            <summary>
            Returns <see langword="true"/> when the cell index is already associated with the effect; otherwise <see langword="false"/>.
            </summary>
            <param name="cellIndex">The cell to check.</param>
            <returns><see langword="true"/> to indicate the cell is associated with the effect; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.ColoredGlyphWithState">
            <summary>
            A glyph with its original state.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.Cell">
            <summary>
            The cell.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.State">
            <summary>
            The original state of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.CellIndex">
            <summary>
            The cells index.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.#ctor(SadConsole.ColoredGlyph,System.Int32)">
            <summary>
            Creates a new instance of this class with the specified cell and index.
            </summary>
            <param name="cell">The cell to generate a state from.</param>
            <param name="cellIndex">The index of the cell in the parent surface.</param>
        </member>
        <member name="T:SadConsole.Effects.Fade">
            <summary>
            Fades both the background and foreground to seperate colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationBackground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationForeground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeDuration">
            <summary>
            Gets or sets how long the fade takes to complete in seconds.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.Repeat">
            <summary>
            Gets or sets a value to indicate that the fade effect should repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellForeground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationForeground"/> should replace its first color stop with the cell's foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellBackground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationBackground"/> should replace its first color stop with the cell's background color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeForeground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the foreground color on the cell's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeBackground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the background color on the cell's background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.AutoReverse">
            <summary>
            Gets or sets a value to indicate that the fade effect should automatically reverse itself when it finishes going up the color spectrum. By setting this to true, and setting the <see cref="P:SadConsole.Effects.Fade.Repeat"/> property to true, you can create a pulse effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellDestinationReverse">
            <summary>
            When <see cref="P:SadConsole.Effects.Fade.UseCellForeground"/> or <see cref="P:SadConsole.Effects.Fade.UseCellBackground"/> is set, and this is true, the last color in the fade will be set to the cell instead of the first.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.Fade._calculatedValue">
            <summary>
            A value used in lerping the fade.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.Fade._goingDown">
            <summary>
            Indicates the fade is currently in reverse.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.#ctor">
            <summary>
            Creates a new instance of the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.ICellEffect">
            <summary>
            The interface describing a cell effect
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.IsFinished">
            <summary>
            True when the effect is finished.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.CloneOnAdd">
            <summary>
            Flags this effect to be cloned when assigned to a cell instead of reused.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.StartDelay">
            <summary>
            A delay applied to the effect only when it first runs or is restarted.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RemoveOnFinished">
            <summary>
            When true, the effect should be disassociated with cells when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RestoreCellOnRemoved">
            <summary>
            When <see langword="true"/>, indicates the <see cref="T:SadConsole.Effects.EffectsManager"/> should restore the cell to its original state.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <summary>
            Applies the state of the effect to a cell.
            </summary>
            <param name="cell">The surface cell using this effect.</param>
            <param name="originalState">The state of the cell prior to the effect being applied.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Update(System.TimeSpan)">
            <summary>
            Updates the state of the effect.
            </summary>
            <param name="delta">Time since the last call to this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Restart">
            <summary>
            Restarts the cell effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clone">
            <summary>
            Returns a duplicate of this effect.
            </summary>
            <returns>A new copy of this effect.</returns>
        </member>
        <member name="T:SadConsole.Effects.Recolor">
            <summary>
            Recors the foreground or the background of a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Foreground">
            <summary>
            The foreground color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Background">
            <summary>
            The background color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoForeground">
            <summary>
            When true, the <see cref="P:SadConsole.Effects.Recolor.Foreground"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoBackground">
            <summary>
            /// When true, the <see cref="P:SadConsole.Effects.Recolor.Background"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.#ctor">
            <summary>
            Creates a new instance of the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Recolor.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Recolor.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Entities.Entity">
            <summary>
            A positionable and animated game object.
            </summary>
        </member>
        <member name="E:SadConsole.Entities.Entity.IsDirtyChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.Entities.Entity.IsDirty"/> property changes value.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Name">
            <summary>
            A friendly name of the game object.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.ZIndex">
            <summary>
            The drawing layer this entity is drawn at
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Appearance">
            <summary>
            Represents what the entity looks like.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.IsDirty">
            <summary>
            Indidcates this entity's visual appearance has changed.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Effect">
            <summary>
            An effect that can be applied to the <see cref="P:SadConsole.Entities.Entity.Appearance"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.IScreenObject.Position"/> of the entity as if it is pixels and not cells.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,System.Int32)">
            <summary>
            Creates a new entity with the specified foreground, background, and glyph.
            </summary>
            <param name="foreground">The foreground color of the entity.</param>
            <param name="background">The background color of the entity.</param>
            <param name="glyph">The glyph color of the entity.</param>
            <param name="zIndex">The rendering order. Higher values are drawn on top of lower values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.ColoredGlyph@,System.Int32)">
            <summary>
            Creates a new entity, references the provided glyph as the appearance.
            </summary>
            <param name="appearance">The appearance of the entity.</param>
            <param name="zIndex">The rendering order. Lower values are under higher values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.ColoredGlyph,System.Int32)">
            <summary>
            Creates a new entity, copying the provided appearance to this entity.
            </summary>
            <param name="appearance">The appearance of the entity.</param>
            <param name="zIndex">The rendering order. Lower values are under higher values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.OnPositionChanged(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Entity.OnIsDirtyChanged">
            <summary>
            Raises the <see cref="E:SadConsole.Entities.Entity.IsDirtyChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Entity.Update(System.TimeSpan)">
            <summary>
            If an effect is applied to the cell, updates the effect.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SadConsole.Entities.Entity.ToString">
            <summary>
            Returns the name of the entity prefixed with "Entity - ".
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SadConsole.Entities.Entity.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Entities.Entity"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Entities.Entity"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns>The entity.</returns>
        </member>
        <member name="T:SadConsole.Entities.Entity.EntityMovedEventArgs">
            <summary>
            Arguments for the entity moved event.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.EntityMovedEventArgs.Entity">
            <summary>
            The entity associated with the event.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.EntityMovedEventArgs.FromPosition">
            <summary>
            The positiont the <see cref="F:SadConsole.Entities.Entity.EntityMovedEventArgs.Entity"/> moved from.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.EntityMovedEventArgs.#ctor(SadConsole.Entities.Entity,SadRogue.Primitives.Point)">
            <summary>
            Creates a new event args for the entity movement.
            </summary>
            <param name="entity">The entity associated with the event.</param>
            <param name="oldPosition">The position the entity moved from.</param>
        </member>
        <member name="T:SadConsole.Entities.Renderer">
            <summary>
            Manages a set of entities. Adds a render step and only renders the entities that are in the parent <see cref="T:SadConsole.IScreenSurface"/> visible area.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer.IsAttached">
            <summary>
            Indicatest that the entity renderer has been added to a parent object.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._entities">
            <summary>
            The entities to process.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._entitiesVisible">
            <summary>
            The entities currently visible.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._screen">
            <summary>
            The parent screen hosting this component.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._offsetAreaPixels">
            <summary>
            Cached rectangle for rendering.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._screenCachedView">
            <summary>
            A cached copy of the <see cref="P:SadConsole.ICellSurface.View"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._screenCachedFont">
            <summary>
            A cached copy of the <see cref="P:SadConsole.IScreenSurface.Font"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer._screenCachedFontSize">
            <summary>
            A cached copy of the <see cref="P:SadConsole.IScreenSurface.FontSize"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Renderer.Entities">
            <summary>
            The entities associated with this manager.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Renderer.EntitiesVisible">
            <summary>
            The entities within the visible portion of the parent surface.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Renderer.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that this object needs to be redrawn; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Renderer.DoEntityUpdate">
            <summary>
            When <see langword="true"/>, indicates this manager should call <see cref="M:SadConsole.IScreenObject.Update(System.TimeSpan)"/> on each entity; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Renderer.RenderStep">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Renderer.Add(SadConsole.Entities.Entity)">
            <summary>
            Adds an entity to this manager.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:SadConsole.Entities.Renderer.AddRange(System.Collections.Generic.IEnumerable{SadConsole.Entities.Entity})">
            <summary>
            Adds a collection of entities to this manager.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:SadConsole.Entities.Renderer.Remove(SadConsole.Entities.Entity)">
            <summary>
            Removes an entity from this manager.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:SadConsole.Entities.Renderer.RemoveAll">
            <summary>
            Removes all entities from this renderer.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Renderer.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.Renderer.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.Renderer.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.Renderer.GetRenderRectangle(SadRogue.Primitives.Point,System.Boolean)">
            <summary>
            Gets a render rectangle for a position.
            </summary>
            <param name="position">The position of the entity.</param>
            <param name="isPixel">Indicates the entity is pixel positioned.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Entities.Renderer.OnEntityChangedPosition(SadConsole.Entities.Entity,SadConsole.ValueChangedEventArgs{SadRogue.Primitives.Point})">
            <summary>
            Called when an entity changes position.
            </summary>
            <param name="entity">The entity that moved.</param>
            <param name="e">The previous and new values of the position.</param>
        </member>
        <member name="M:SadConsole.Entities.Renderer.OnEntityAdded(SadConsole.Entities.Entity)">
            <summary>
            Called when an entity is added.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SadConsole.Entities.Renderer.OnEntityRemoved(SadConsole.Entities.Entity)">
            <summary>
            Called when an entity is removed.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SadConsole.Entities.Renderer.SetEntityVisibility(SadConsole.Entities.Entity)">
            <summary>
            Detects a visibility state change of an entity and changes its internal list position.
            </summary>
            <param name="entity"></param>
            <returns><see langword="true"/> when the entity is visible; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Entities.Renderer.UpdateCachedVisibilityArea">
            <summary>
            Updates the cached view area based on the parent surface.
            </summary>
        </member>
        <member name="T:SadConsole.PointExtensions">
            <summary>
            Extensions for the <see cref="T:SadRogue.Primitives.Point"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.PointExtensions.SurfaceLocationToPixel(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Translates a surface cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.SurfaceLocationToPixel(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates a surface cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="fontSize">The font to use in calculating the position.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.PixelLocationToSurface(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Translates a pixel to where it appears on a surface cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.PixelLocationToSurface(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates a pixel to where it appears on a surface cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="fontSize">The font to use in calculating the position.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.TranslateFont(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates the coordinates of a cell from the source font size to a target font size.
            </summary>
            <param name="point">The position of the cell in the <paramref name="sourceFontSize"/>.</param>
            <param name="sourceFontSize">The source font translating from.</param>
            <param name="targetFontSize">The target font translating to.</param>
            <returns>The position of the cell in the <paramref name="targetFontSize"/>.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.GetValidDirections(SadRogue.Primitives.Point,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the <paramref name="area"/>.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="area">The area to test.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed by a <see cref="T:SadRogue.Primitives.Direction.Types"/> enumeration. Index 0 in the array represents the <paramref name="position"/>.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.GetDirectionPoints(SadRogue.Primitives.Point)">
            <summary>
            Gets an indexed array of direction positions based on the <paramref name="position"/>.
            </summary>
            <param name="position">The source position.</param>
            <returns>An array of positions indexed by a <see cref="T:SadRogue.Primitives.Direction.Types"/> enumeration. Index 0 in the array represents the <paramref name="position"/>.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.GetDirectionIndexes(SadRogue.Primitives.Point,SadRogue.Primitives.Rectangle,System.Int32)">
            <summary>
            Gets an array of indexes of a surface based on a position and then a relative <see cref="F:SadRogue.Primitives.Direction.Type"/> direction enumeration..
            </summary>
            <param name="position">The position center.</param>
            <param name="area">The area containing the position.</param>
            <param name="width">The width to use in converting each index to a point.</param>
            <returns>Returns the an array of values indidcating the index in the area surface of each direction where -1 represents a position outside the bounds of the area. Indexed by a <see cref="T:SadRogue.Primitives.Direction.Types"/> enumeration.</returns>
        </member>
        <member name="T:SadConsole.RectangleExtensions">
            <summary>
            Extensions for the <see cref="T:SadRogue.Primitives.Rectangle"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToPixels(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Point)">
            <summary>
            Converts a rectangle from cells to pixels.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="fontSize">The font size used for translation.</param>
            <returns>A new rectangle in pixels.</returns>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToPixels(SadRogue.Primitives.Rectangle,System.Int32,System.Int32)">
            <summary>
            Converts a rectangle from cells to pixels.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="cellWidth">The width of a cell used in converting.</param>
            <param name="cellHeight">The height of a cell used in converting.</param>
            <returns>A new rectangle in pixels.</returns>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToConsole(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Point)">
            <summary>
            Converts a rectangle from pixels to cells.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="fontSize">The font size used for translation.</param>
            <returns>A new rectangle in cell coordinates.</returns>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToConsole(SadRogue.Primitives.Rectangle,System.Int32,System.Int32)">
            <summary>
            Converts a rectangle from pixels to cells.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="cellWidth">The width of a cell used in converting.</param>
            <param name="cellHeight">The height of a cell used in converting.</param>
            <returns>A new rectangle in cell coordinates.</returns>
        </member>
        <member name="T:SadConsole.StringExtensions">
            <summary>
            Helpers for strings.
            </summary>
        </member>
        <member name="M:SadConsole.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32)">
            <summary>
            Aligns a string given a total character width and alignment style. Fills in the extra space with the space character.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32,System.Char)">
            <summary>
            Aligns a string given a total character width and alignment style.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <param name="fillCharacter">The character to use to fill in the extra spaces after alignment.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.CreateColored(System.String,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadConsole.Mirror},SadConsole.CellDecorator[])">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground and background, setting the ignore properties if needed.
            </summary>
            <param name="value">The current string.</param>
            <param name="foreground">The foreground color. If null, <see cref="P:SadConsole.ColoredString.IgnoreForeground"/> will be set.</param>
            <param name="background">The background color. If null, <see cref="P:SadConsole.ColoredString.IgnoreBackground"/> will be set.</param>
            <param name="mirror">The mirror setting. If null, <see cref="P:SadConsole.ColoredString.IgnoreMirror"/> will be set.</param>
            <param name="decorators">The decorators setting. If null, <see cref="P:SadConsole.ColoredString.IgnoreDecorators"/> will be set.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.CreateGradient(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.CreateGradient(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient, background gradient, and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <param name="startingBackground">The starting background color to blend.</param>
            <param name="endingBackground">The ending background color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.ToBool(System.String)">
            <summary>
            Converts a string to a boolean when it is "0", "1", "true", or "false".
            </summary>
            <param name="item">The string to convert</param>
            <returns>The converted boolean value, otherwise false.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.Masked(System.String,System.Char)">
            <summary>
            Returns a string of mask characters the same length as the input string.
            </summary>
            <param name="toMask">The string to mask.</param>
            <param name="mask">The mask to use.</param>
            <returns>A string of masks.</returns>
        </member>
        <member name="T:SadConsole.HorizontalAlignment">
            <summary>
            Horizontal alignment modes.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Stretch">
            <summary>
            Stretch.
            </summary>
        </member>
        <member name="T:SadConsole.VerticalAlignment">
            <summary>
            Vertical alignment modes.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Bottom">
            <summary>
            Bottom allignment.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Stretch">
            <summary>
            Stretch.
            </summary>
        </member>
        <member name="T:SadConsole.Orientation">
            <summary>
            Orientation modes.
            </summary>
        </member>
        <member name="F:SadConsole.Orientation.Vertical">
            <summary>
            Orient along the vertical axis.
            </summary>
        </member>
        <member name="F:SadConsole.Orientation.Horizontal">
            <summary>
            Orient along the horizontal axis.
            </summary>
        </member>
        <member name="T:SadConsole.FocusBehavior">
            <summary>
            How the console handles becoming focused and added to the <see cref="P:SadConsole.GameHost.FocusedScreenObjects"/> collection.
            </summary>
        </member>
        <member name="F:SadConsole.FocusBehavior.Set">
            <summary>
            Becomes the only active input object when focused.
            </summary>
        </member>
        <member name="F:SadConsole.FocusBehavior.Push">
            <summary>
            Pushes to the top of the stack when it becomes the active input object.
            </summary>
        </member>
        <member name="F:SadConsole.FocusBehavior.None">
            <summary>
            Don't use the global focus manager.
            </summary>
        </member>
        <member name="T:SadConsole.FocusedScreenObjectStack">
            <summary>
            A stack of screen objects. The top-most of the stack is considered active and represented by the <see cref="T:SadConsole.IScreenObject"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.FocusedScreenObjectStack.ScreenObject">
            <summary>
            Gets the current active screen object.
            </summary>
        </member>
        <member name="F:SadConsole.FocusedScreenObjectStack._screenObjects">
            <summary>
            The stack of screen objects for input processing.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.#ctor">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Clear">
            <summary>
            Clears all screen objects from the active stack along with the current active screen object.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Push(SadConsole.IScreenObject)">
            <summary>
            Adds another screen object to active stack, setting it as the active (top most in the stack) screen object.
            </summary>
            <param name="screenObject"></param>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Set(SadConsole.IScreenObject)">
            <summary>
            Replaces the top screen object (active screen object) with the provided instance. Sets <see cref="T:SadConsole.IScreenObject"/> to this instance.
            </summary>
            <param name="screenObject">The screen object to make active.</param>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Pop(SadConsole.IScreenObject)">
            <summary>
            Removes the screen object from the active stack. If the instance is the current active screen object, the active screen object is set to the last screen object in the previous screen object.
            </summary>
            <param name="screenObject">The screen object to remove.</param>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Pop">
            <summary>
            Removes the top screen object from the stack.
            </summary>
        </member>
        <member name="T:SadConsole.FontExtensions">
            <summary>
            Extensions for <see cref="T:SadConsole.IFont"/>.
            </summary>
        </member>
        <member name="M:SadConsole.FontExtensions.GetRenderRect(SadConsole.IFont,System.Int32,System.Int32,SadRogue.Primitives.Point)">
            <summary>
            Returns a rectangle that is positioned and sized based on the font and the cell position specified.
            </summary>
            <param name="font">Unused.</param>
            <param name="x">The x-axis of the cell position.</param>
            <param name="y">The y-axis of the cell position.</param>
            <param name="fontSize">The size of the output cell.</param>
            <returns>A rectangle to representing a specific cell.</returns>
        </member>
        <member name="M:SadConsole.FontExtensions.GetWorldPosition(SadConsole.IFont,SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Gets the pixel position of a cell position based on the font size.
            </summary>
            <param name="font">Unused.</param>
            <param name="position">The cell position to convert.</param>
            <param name="fontSize">The size of the font used to calculate the pixel position.</param>
            <returns>A new pixel-positioned point.</returns>
        </member>
        <member name="M:SadConsole.FontExtensions.GetGlyphRatio(SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Returns the ratio in size difference between the font's glyph width and height.
            </summary>
            <param name="font">Unused.</param>
            <param name="fontSize">The glyph size of the font used.</param>
            <returns>A tuple with the names (X, Y) where X is the difference of width to height and Y is the difference of height to width.</returns>
        </member>
        <member name="T:SadConsole.GameHost">
             <summary>
             Represents the SadConsole game engine.
             </summary>
             <remarks>
             When a new host is created, the host should do the following:
            
             - Run `LoadDefaultFonts`.
             - Run `SetRenderer` for `window`, `controls`, `layered`, and `default` renderers.
             - Run `LoadMappedColors`.
             - Configure the `Screen` to a new console with `ScreenCellsX` and `ScreenCellsY`.
             - Prior to running the game, run `SplashScreens.SplashScreenManager.CheckRun()`.
             </remarks>
            <summary>
            Represents the SadConsole game engine.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost._renderers">
            <summary>
            Holds all of the <see cref="T:SadConsole.Renderers.IRenderer"/> types.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost._rendererSteps">
            <summary>
            Holds all of the <see cref="T:SadConsole.Renderers.IRenderStep"/> types.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost._splashScreens">
            <summary>
            The splashs screens to show on game startup.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Instance">
            <summary>
            Instance of the game host.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost.LoadingEmbeddedFont">
            <summary>
            Temp variable to indicate that the fonts being loaded are the embedded fonts.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.SerializerPathHint">
            <summary>
            Contains the path to a file being serialized or deserialized.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.FrameRender">
            <summary>
            Raised when the game draws a frame to the screen.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.FrameUpdate">
            <summary>
            Raised when the game updates prior to drawing a frame.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost.OnStart">
            <summary>
            A callback to run before the <see cref="M:SadConsole.GameHost.Run"/> method is called;
            </summary>
        </member>
        <member name="F:SadConsole.GameHost.OnEnd">
            <summary>
            A callback to run after the <see cref="M:SadConsole.GameHost.Run"/> method is called;
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DrawCalls">
            <summary>
            Draw calls registered for the next drawing frame.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.ScreenCellsX">
            <summary>
            How many cells fit in the render area width used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.ScreenCellsY">
            <summary>
            How many cells fit in the render area width used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.FrameNumber">
            <summary>
            A frame number counter, incremented every game frame.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnFrameRender">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.FrameRender"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnFrameUpdate">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.FrameUpdate"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Run">
            <summary>
            Runs the game.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.GetTexture(System.String)">
            <summary>
            Gets a texture from the implemented host.
            </summary>
            <param name="resourcePath">The path to the texture to load.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.GameHost.GetTexture(System.IO.Stream)">
            <summary>
            Gets a texture from the implemented host.
            </summary>
            <param name="textureStream">A stream containing the texture.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.GameHost.GetRenderer(System.String)">
            <summary>
            Creates and returns an <see cref="T:SadConsole.Renderers.IRenderer"/> by name.
            </summary>
            <param name="name">The name of the renderer.</param>
            <returns>A new renderer.</returns>
        </member>
        <member name="M:SadConsole.GameHost.SetRenderer(System.String,System.Type)">
            <summary>
            Sets the default <see cref="T:SadConsole.Renderers.IRenderer"/> for a type.
            </summary>
            <param name="name">The name to register the renderer as.</param>
            <param name="rendererType">The renderer type.</param>
        </member>
        <member name="M:SadConsole.GameHost.SetRendererStep(System.String,System.Type)">
            <summary>
            Sets the default <see cref="T:SadConsole.Renderers.IRenderStep"/> for a type.
            </summary>
            <param name="name">The name to register the render step as.</param>
            <param name="rendererStepType">The render step type.</param>
        </member>
        <member name="M:SadConsole.GameHost.GetRendererStep(System.String)">
            <summary>
            Creates and returns a <see cref="T:SadConsole.Renderers.IRenderStep"/> by name.
            </summary>
            <param name="name">The name of the renderer.</param>
            <returns>A new renderer.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetKeyboardState">
            <summary>
            Gets the state of the keyboard from the implemented host.
            </summary>
            <returns>The state of the keyboard.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetMouseState">
            <summary>
            Gets the state of the mouse from the implemented host.
            </summary>
            <returns>The state of the mouse.</returns>
        </member>
        <member name="M:SadConsole.GameHost.SetSplashScreens(SadConsole.ScreenSurface[])">
            <summary>
            The splash screens the game should sequentially show on startup.
            </summary>
            <param name="surfaces">The splash screens to show.</param>
        </member>
        <member name="M:SadConsole.GameHost.LoadFont(System.String)">
            <summary>
            Loads a font from a file and adds it to the <see cref="P:SadConsole.GameHost.Fonts"/> collection.
            </summary>
            <param name="font">The font file to load.</param>
            <returns>A master font that you can generate a usable font from.</returns>
        </member>
        <member name="M:SadConsole.GameHost.DestroyDefaultStartingConsole">
            <summary>
            Destroys the <see cref="P:SadConsole.GameHost.StartingConsole"/> instance.
            </summary>
            <remarks>
            Prior to calling this method, you must set <see cref="P:SadConsole.GameHost.Screen"/> to an object other than <see cref="P:SadConsole.GameHost.StartingConsole"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.GameHost.OpenStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file stream with the specified mode and access.
            </summary>
            <param name="file">The file to open.</param>
            <param name="mode">The mode for opening. Defaults to <see cref="F:System.IO.FileMode.Open"/>.</param>
            <param name="access">The type of access for the stream. Defaults to <see cref="F:System.IO.FileAccess.Read"/>.</param>
            <returns>The stream object.</returns>
        </member>
        <member name="M:SadConsole.GameHost.FileExists(System.String)">
            <summary>
            Checks if a file exists.
            </summary>
            <param name="file">The file to check.</param>
            <returns><see langword="true"/> if the file exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHost.FileDelete(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="file">The file to delete.</param>
            <returns><see langword="true"/> if the file was deleted; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHost.LoadDefaultFonts(System.String)">
            <summary>
            Loads the embedded <c>IBM.font</c> files. Sets the <see cref="P:SadConsole.GameHost.DefaultFont"/> property.
            </summary>
            <param name="defaultFont">An optional font to load and set as the default.</param>
            <remarks>
            If <paramref name="defaultFont"/> is <see langword="null"/>, the <see cref="P:SadConsole.GameHost.EmbeddedFont"/> or <see cref="P:SadConsole.GameHost.EmbeddedFontExtended"/> font is set based on the value of <see cref="P:SadConsole.Settings.UseDefaultExtendedFont"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.GameHost.LoadMappedColors">
            <summary>
            Uses reflection to examine the <see cref="T:SadRogue.Primitives.Color"/> type and add any predefined colors into <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/>.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Dispose(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:SadConsole.GameHost.Finalize">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Fonts">
            <summary>
            Collection of fonts. Used mainly by the deserialization system.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.EmbeddedFont">
            <summary>
            The font automatically loaded by SadConsole. Standard IBM style font.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.EmbeddedFontExtended">
            <summary>
            The font automatically loaded by SadConsole. Standard IBM style font. Extended with extra SadConsole characters.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DefaultFont">
            <summary>
            The default font for any type that does not provide a font.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DefaultFontSize">
            <summary>
            The default font to use with <see cref="P:SadConsole.GameHost.DefaultFont"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Keyboard">
            <summary>
            Global keyboard object used by SadConsole during the update frame.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Mouse">
            <summary>
            Global mouse object used by SadConsole during the update frame.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.UpdateFrameDelta">
            <summary>
            The elapsed time between now and the last update call.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DrawFrameDelta">
            <summary>
            The elapsed time between now and the last draw call.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.GameRunningTotalTime">
            <summary>
            The total time the game has been running.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.StartingConsole">
            <summary>
            The console created by the game and automatically assigned to <see cref="P:SadConsole.GameHost.Screen"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Screen">
            <summary>
            The active screen processed by the game.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.FocusedScreenObjects">
            <summary>
            The stack of focused consoles used by the mouse and keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Random">
            <summary>
            A global random number generator.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.ResizeWindow(System.Int32,System.Int32)">
            <summary>
            Resizes the window to the specified dimensions.
            </summary>
            <param name="width">The width of the window in pixels.</param>
            <param name="height">The height of the window in pixels.</param>
        </member>
        <member name="M:SadConsole.GameHost.ResizeWindow(System.Int32,System.Int32,SadRogue.Primitives.Point)">
            <summary>
            Resizes the window to the specified cell count along the X-axis and Y-axis.
            </summary>
            <param name="cellsX">The number of cells to fit horizontally.</param>
            <param name="cellsY">The number of cells to fit vertically.</param>
            <param name="cellSize">The size of the cells in pixels.</param>
        </member>
        <member name="M:SadConsole.GameHost.SaveGlobalState">
            <summary>
            Saves the global state, mainly the <see cref="P:SadConsole.GameHost.FocusedScreenObjects"/> and <see cref="P:SadConsole.GameHost.Screen"/> objects.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.RestoreGlobalState">
            <summary>
            Restores the global state that was saved with <see cref="M:SadConsole.GameHost.SaveGlobalState"/>.
            </summary>
        </member>
        <member name="T:SadConsole.GlyphDefinition">
            <summary>
            Represents a decorator (glyph and mirror) defined by a font.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Empty">
            <summary>
            Gets a glyph definition that has -1 for the glyph.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Glyph">
            <summary>
            The glyph of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Mirror">
            <summary>
            The mirror effect of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.GlyphDefinition.#ctor(System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a new cell decorator instance.
            </summary>
            <param name="glyph"></param>
            <param name="mirror"></param>
        </member>
        <member name="M:SadConsole.GlyphDefinition.CreateCellDecorator(SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.CellDecorator"/> from this definition.
            </summary>
            <param name="foreground">The color of the decorator.</param>
            <returns>A new decorator instance.</returns>
        </member>
        <member name="M:SadConsole.GlyphDefinition.CreateCell(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredGlyph"/> from this definition.
            </summary>
            <param name="foreground">The foreground color of the cell.</param>
            <param name="background">The background color of the cell.</param>
            <returns>A new cell instance.</returns>
        </member>
        <member name="T:SadConsole.Mirror">
            <summary>
            The mirroring mode
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.None">
            <summary>
            No mirroring set.
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.Vertical">
            <summary>
            Mirror vertically.
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.Horizontal">
            <summary>
            Mirror horizontally.
            </summary>
        </member>
        <member name="T:SadConsole.HandledEventArgs">
            <summary>
            Event args that allow a handled flag to be set.
            </summary>
        </member>
        <member name="P:SadConsole.HandledEventArgs.IsHandled">
            <summary>
            When <see langword="true"/> indicates that the event has been handled and no more processing should continue.
            </summary>
        </member>
        <member name="T:SadConsole.Helpers">
            <summary>
            General code helpers.
            </summary>
        </member>
        <member name="M:SadConsole.Helpers.HasFlag(System.Int32@,System.Int32@)">
            <summary>
            Checks for the presense of a flag in a value.
            </summary>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns><see langword="true"/> when the flag exists in the value; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Helpers.SetFlag(System.Int32,System.Int32)">
            <summary>
            Sets a flag in a value.
            </summary>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>A new value with the flag added.</returns>
        </member>
        <member name="M:SadConsole.Helpers.UnsetFlag(System.Int32,System.Int32)">
            <summary>
            Removes a flag from a value.
            </summary>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>A new value with the flag removed.</returns>
        </member>
        <member name="T:SadConsole.ICellSurface">
            <summary>
            An array of <see cref="T:SadConsole.ColoredGlyph"/> objects used to represent a 2D surface.
            </summary>
        </member>
        <member name="E:SadConsole.ICellSurface.IsDirtyChanged">
            <summary>
            An event that is raised when <see cref="P:SadConsole.ICellSurface.IsDirty"/> changes.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedDown">
            <summary>
            A variable that tracks how many times this editor shifted the surface down.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedRight">
            <summary>
            A variable that tracks how many times this editor shifted the surface right.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedLeft">
            <summary>
            A variable that tracks how many times this editor shifted the surface left.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedUp">
            <summary>
            A variable that tracks how many times this editor shifted the surface up.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.UsePrintProcessor">
            <summary>
            When true, the <see cref="P:SadConsole.ColoredString.Parser"/> is used to generate a <see cref="T:SadConsole.ColoredString"/> before printing.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.Effects">
            <summary>
            Processes the effects added to cells with <see cref="M:CellSurfaceEditor.SetEffect*"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.Area">
            <summary>
            Returns a rectangle that represents the maximum size of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.DefaultBackground">
            <summary>
            The default background for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.DefaultForeground">
            <summary>
            The default foreground for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.DefaultGlyph">
            <summary>
            The default glyph used in clearing and erasing.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.IsScrollable">
            <summary>
            Returns <see langword="true"/> when the <see cref="P:SadConsole.ICellSurface.View"/> width or height is different from <see cref="P:SadConsole.ICellSurface.Area"/>; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.View">
            <summary>
            The visible portion of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ViewHeight">
            <summary>
            Gets or sets the visible height of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ViewPosition">
            <summary>
            The position of the view within the buffer.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ViewWidth">
            <summary>
            Gets or sets the visible width of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineThin">
            <summary>
            Glyph indexes for a thin line.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineThick">
            <summary>
            Glyph indexes for a thick line.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineThinExtended">
            <summary>
            Glyph indexes for a thin line using a SadConsole extended font.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineEmpty">
            <summary>
            Glyph indexes for an empty line 0. 
            </summary>
        </member>
        <member name="M:SadConsole.ICellSurface.CreateLine(System.Int32)">
            <summary>
            Creates an array of glyphs that can be used as a connected line.
            </summary>
            <param name="singleGlyph">The glyph to use for the connected line array.</param>
            <returns>An array of glyphs.</returns>
        </member>
        <member name="M:SadConsole.ICellSurface.ValidateLineStyle``1(``0[]@)">
            <summary>
            Returns a value that indicates a line style array is not null and contains the required number of elements.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="connectedLineStyle">The array to check based on the <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/> enum.</param>
            <returns>True when the line style is correct.</returns>
        </member>
        <member name="T:SadConsole.ICellSurface.ConnectedLineIndex">
            <summary>
            Array index enum for line glyphs.
            </summary>
        </member>
        <member name="T:SadConsole.CellSurfaceEditor">
            <summary>
            Methods to interact with a <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetPixels(SadConsole.ICellSurface,SadRogue.Primitives.Color[])">
            <summary>
            Sets each background of a cell to the array of colors. Must be the same length as this cell surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="pixels">The colors to place.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetPixels(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,SadRogue.Primitives.Color[])">
            <summary>
            Sets each background of a cell to the array of colors.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">An area to fill with pixels.</param>
            <param name="pixels">Colors for each cell of the surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.IsValidCell(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.IsValidCell(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.IsValidCell(SadConsole.ICellSurface,System.Int32)">
            <summary>
            Tests if a cell is valid based on its index.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">The index to test.</param>
            <returns>A true value indicating the cell index is in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the glyph of a specified cell to a new value.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the glyph and foreground of a cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Changes the glyph, foreground, background, and mirror of a cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror,System.Collections.Generic.IEnumerable{SadConsole.CellDecorator})">
            <summary>
            Changes the glyph, foreground, background, and mirror of a cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
            <param name="decorators">Decorators to set on the cell. Will clear existing decorators first.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetGlyph(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Gets the glyph of a specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The glyph index.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetForeground(SadConsole.ICellSurface,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the foreground of a specified cell to a new color.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetForeground(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Gets the foreground of a specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetBackground(SadConsole.ICellSurface,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the background of a cell to the specified color.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetBackground(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Gets the background of a specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ICellSurface,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">Index of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ICellSurface,System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ICellSurface,System.Collections.Generic.IEnumerable{System.Int32},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ICellSurface,SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="cell">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ICellSurface,System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyph},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetEffect(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetCellAppearance(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.ColoredGlyph)">
            <summary>
            Changes the appearance of the cell. The appearance represents the look of a cell and will first be cloned, then applied to the cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="appearance">The desired appearance of the cell. A null value cannot be passed.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetCellAppearance(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Gets the appearance of a cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The appearance.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetCells(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets an enumerable of cells over a specific area.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area to get cells from.</param>
            <returns>A new array with references to each cell in the area.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetSubSurface(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Returns a new surface with reference to each cell inside of the <paramref name="view"/>.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="view">An area of the surface to create a view of.</param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetMirror(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Gets the mirror of a specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetMirror(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.Mirror)">
            <summary>
            Sets the mirror of a specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="mirror">The mirror of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetDecorator(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetDecorator(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.AddDecorator(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.AddDecorator(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. If <code>null</code>, does nothing.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ClearDecorators(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ClearDecorators(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,System.String)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color)">
            <summary>
            Draws the string on the console at the specified location and color, wrapping if needed.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Draws the string on the console at the specified location with the specified foreground and background color, wrapping if needed.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadConsole.Mirror)">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="appearance">The appearance of the cell</param>
            <param name="effect">An optional effect to apply to the printed surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.ColoredGlyph)">
            <summary>
            Draws a single glyph on the console at the specified location.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="glyph">The glyph to display.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ICellSurface,System.Int32,System.Int32,SadConsole.ColoredString)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetString(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetString(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetStringColored(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetStringColored(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ClearShiftValues(SadConsole.ICellSurface)">
            <summary>
            Resets the shifted amounts to 0, as if the surface has never shifted.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftUp(SadConsole.ICellSurface)">
            <summary>
            Scrolls all the console data up by one.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftUp(SadConsole.ICellSurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data up by the specified amount of rows.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the bottom. When true, the top line appears at the bottom.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftDown(SadConsole.ICellSurface)">
            <summary>
            Scrolls all the console data down by one.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftDown(SadConsole.ICellSurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data down by the specified amount of rows.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the top. When true, the bottom line appears at the top.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRight(SadConsole.ICellSurface)">
            <summary>
            Scrolls all the console data right by one.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRight(SadConsole.ICellSurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data right by the specified amount.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the left. When true, the right line appears at the left.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftLeft(SadConsole.ICellSurface)">
            <summary>
            Scrolls all the console data left by one.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftLeft(SadConsole.ICellSurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data left by the specified amount.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the right. When true, the left line appears at the right.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Erase(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starting at the specified coordinate, clears the glyph, mirror, and decorators, for the specified count of surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="count">The count of glyphs to erase.</param>
            <returns>The cells processed by this method.</returns>
            <remarks>
            Cells altered by this method has the <see cref="P:SadConsole.ColoredGlyph.Glyph"/> set to <see cref="P:SadConsole.ICellSurface.DefaultGlyph"/>, the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Erase(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Clears the glyph, mirror, and decorators, for the specified cell.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <remarks>
            The cell altered by this method has the <see cref="P:SadConsole.ColoredGlyph.Glyph"/> set to <see cref="P:SadConsole.ICellSurface.DefaultGlyph"/>, the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Erase(SadConsole.ICellSurface)">
            <summary>
            Erases all cells which clears the glyph, mirror, and decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <remarks>
            All cells have <see cref="P:SadConsole.ColoredGlyph.Glyph"/> set to <see cref="P:SadConsole.ICellSurface.DefaultGlyph"/>, the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ICellSurface)">
            <summary>
            Clears the console data. Characters are reset to 0, the foreground and background are set to default, and mirror set to none. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Clears a cell. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears a segment of cells, starting from the left, extending to the right, and wrapping if needed. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x position of the left end of the segment.</param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <remarks>This works similarly to printing a string of whitespace</remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Clears an area of surface. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ICellSurface,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills the console. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Foreground to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>The array of all cells in this console, starting from the top left corner.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills a segment of cells, starting from the left, extending to the right, and wrapping if needed. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x position of the left end of the segment. </param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If x or y are out of bounds, nothing happens and an empty array is returned</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills the specified area. Clears cell decorators.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area to fill.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If the area is out of bounds, nothing happens and an empty array is returned.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawLine(SadConsole.ICellSurface,SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Nullable{System.Int32},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadConsole.Mirror})">
            <summary>
            Draws a line from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="start">Starting point of the line.</param>
            <param name="end">Ending point of the line.</param>
            <param name="foreground">Foreground to set. If null, skipped.</param>
            <param name="background">Background to set. If null, skipped.</param>
            <param name="glyph">Glyph to set. If null, skipped.</param>
            <param name="mirror">Mirror to set. If null, skipped.</param>
            <returns>A list of cells the line touched; ordered from first to last.</returns>
            <remarks>To simply return the list of cells that would be drawn to, use <see langword="null"/> for <paramref name="glyph"/>, <paramref name="foreground"/>, <paramref name="background"/>, and <paramref name="mirror"/>.</remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawBox(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,SadConsole.ShapeParameters)">
            <summary>
            Draws a box.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area of the box.</param>
            <param name="parameters">Provides the options for drawing a border and filling the box.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawBox(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,SadConsole.ColoredGlyph,SadConsole.ColoredGlyph,System.Int32[])">
            <summary>
            Draws a box.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area of the box.</param>
            <param name="border">The border style.</param>
            <param name="fill">The fill style. If null, the box is not filled.</param>
            <param name="connectedLineStyle">The lien style of the border. If null, <paramref name="border"/> glyph is used.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawCircle(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,SadConsole.ShapeParameters)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area the ellipse </param>
            <param name="parameters">Provides the options for drawing a border and filling the circle.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawCircle(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,SadConsole.ColoredGlyph,SadConsole.ColoredGlyph)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area the ellipse </param>
            <param name="outer">The appearance of the outer line of the ellipse.</param>
            <param name="inner">The appearance of the inside of hte ellipse. If null, it will not be filled.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ConnectLines(SadConsole.ICellSurface)">
            <summary>
            Connects all lines in a surface for both <see cref="P:SadConsole.ICellSurface.ConnectedLineThin"/> and <see cref="P:SadConsole.ICellSurface.ConnectedLineThick"/> styles.
            </summary>
            <param name="surface">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ConnectLines(SadConsole.ICellSurface,System.Int32[])">
            <summary>
            Connects all lines in this based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/>.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ConnectLines(SadConsole.ICellSurface,System.Int32[],SadRogue.Primitives.Rectangle)">
            <summary>
            Connects all lines in this based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/>.</param>
            <param name="area">The area to process.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ICellSurface,SadConsole.ICellSurface)">
            <summary>
            Copies the contents of the cell surface to the destination.
            </summary>
            <param name="surface">The surface being edited.</param>
            <remarks>If the sizes to not match, it will always start at 0,0 and work with what it can and move on to the next row when either surface runs out of columns being processed</remarks>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ICellSurface,SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the cell surface to the destination at the specified x,y.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate of the destination.</param>
            <param name="y">The y coordinate of the destination.</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle,SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Copies an area of this cell surface to the destination surface.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="area">The area to copy.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ICellSurface,System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of this cell surface at the specified x,y coordinates to the destination, only with the specified surface.BufferWidth and surface.BufferHeight, and copies it to the specified <paramref name="destinationX"/> and <paramref name="destinationY"/> position.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="x">The x coordinate to start from.</param>
            <param name="y">The y coordinate to start from.</param>
            <param name="width">The BufferWidth to copy from.</param>
            <param name="height">The BufferHeight to copy from.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.FillWithRandomGarbage(SadConsole.ICellSurface,SadConsole.IFont)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="associatedFont">The font used in assigning glyphs randomly.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.FillWithRandomGarbage(SadConsole.ICellSurface,System.Int32)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
            <param name="surface">The surface being edited.</param>
            <param name="maxGlyphValue">The maximum glyph value to use on the surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.PrintTheDraw(SadConsole.ICellSurface,System.Int32,System.String,SadConsole.Readers.TheDrawFont,SadConsole.HorizontalAlignment,System.Int32)">
            <summary>
            Prints text using <see cref="T:SadConsole.Readers.TheDrawFont"/> and horizontal alignment specified. Calculates x coordinate. Truncates string to fit it in one line.
            </summary>
            <param name="cellSurface">Class implementing <see cref="T:SadConsole.ICellSurface"/>.</param>
            <param name="y">Y coordinate of the surface.</param>
            <param name="text">Text to print.</param>
            <param name="drawFont">Instance of the <see cref="T:SadConsole.Readers.TheDrawFont"/> to use.</param>
            <param name="alignment"><see cref="T:SadConsole.HorizontalAlignment"/> to use.</param>
            <param name="padding">Amount of regular font characters used as horizontal padding on both sides of the output.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.PrintTheDraw(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadConsole.Readers.TheDrawFont)">
            <summary>
            Prints text using <see cref="T:SadConsole.Readers.TheDrawFont"/>.
            </summary>
            <param name="cellSurface">Class implementing <see cref="T:SadConsole.ICellSurface"/>.</param>
            <param name="x">X coordinate of the surface.</param>
            <param name="y">Y coordinate of the surface.</param>
            <param name="text">Text to print.</param>
            <param name="drawFont">Instance of the <see cref="T:SadConsole.Readers.TheDrawFont"/> to use.</param>
        </member>
        <member name="T:SadConsole.ICellSurfaceResize">
            <summary>
            Adds a method to support resizing a surface.
            </summary>
        </member>
        <member name="M:SadConsole.ICellSurfaceResize.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
            <param name="clear">When <see langword="true"/>, indicates each cell should be reset to the default values.</param>
        </member>
        <member name="M:SadConsole.ICellSurfaceResize.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface and view to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="clear">When <see langword="true"/>, indicates each cell should be reset to the default values.</param>
        </member>
        <member name="T:SadConsole.ICellSurfaceSettable">
            <summary>
            Adds a method to change the backing cells of a surface.
            </summary>
        </member>
        <member name="M:SadConsole.ICellSurfaceSettable.SetSurface(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Remaps the cells of this surface to a view of the <paramref name="surface"/>.
            </summary>
            <param name="surface">The target surface to map cells from.</param>
            <param name="view">A view rectangle of the target surface.</param>
        </member>
        <member name="M:SadConsole.ICellSurfaceSettable.SetSurface(SadConsole.ColoredGlyph[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the cells of the surface to the provided array.
            </summary>
            <param name="cells">The cells to replace in this surface.</param>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
        </member>
        <member name="T:SadConsole.IFont">
            <summary>
            Represents a font used by the rendering engine.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.Name">
            <summary>
            The name of the font used when it is registered with the <see cref="P:SadConsole.GameHost.Fonts"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.GlyphHeight">
            <summary>
            The height of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.GlyphWidth">
            <summary>
            The width of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.TotalGlyphs">
            <summary>
            Gets how many glyphs this font has.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.SolidGlyphRectangle">
            <summary>
            The rectangle to draw the solid glyph used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.UnsupportedGlyphIndex">
            <summary>
            The glyph index to use when an unsupported glyph is used during rendering.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.UnsupportedGlyphRectangle">
            <summary>
            The rectangle to draw when a glyph that isn't supported is used by a surface.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.IsSadExtended">
            <summary>
            True when the font supports SadConsole extended decorators; otherwise false.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="M:SadConsole.IFont.GetGlyphSourceRectangle(System.Int32)">
            <summary>
            Gets the rendering rectangle for a glyph.
            </summary>
            <param name="glyph">The index of the glyph to get.</param>
            <returns>The rectangle for the glyph.</returns>
        </member>
        <member name="M:SadConsole.IFont.GetFontSize(SadConsole.IFont.Sizes)">
            <summary>
            Gets the pixel size of a font based on a <see cref="T:SadConsole.IFont.Sizes"/>.
            </summary>
            <param name="size">The desired size.</param>
            <returns>The width and height of a font cell.</returns>
        </member>
        <member name="M:SadConsole.IFont.GetDecorator(System.String,SadRogue.Primitives.Color)">
            <summary>
            Gets a <see cref="T:SadConsole.CellDecorator"/> by the <see cref="T:SadConsole.GlyphDefinition"/> defined by the font file.
            </summary>
            <param name="name">The name of the decorator to get.</param>
            <param name="color">The color to apply to the decorator.</param>
            <returns>The decorator instance.</returns>
            <remarks>If the decorator does not exist, <see cref="P:SadConsole.CellDecorator.Empty"/> is returned.</remarks>
        </member>
        <member name="M:SadConsole.IFont.HasGlyphDefinition(System.String)">
            <summary>
            Returns <see langword="true"/> when the glyph has been defined by name.
            </summary>
            <param name="name">The name of the glyph</param>
            <returns><see langword="true"/> when the glyph name exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SadConsole.IFont.Sizes">
            <summary>
            The size options of a font.
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Quarter">
            <summary>
            One quater the size of the font. (Original Width and Height * 0.25)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Half">
            <summary>
            Half the size of the font. (Original Width and Height * 0.50)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.One">
            <summary>
            Exact size of the font. (Original Width and Height * 1.0)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Two">
            <summary>
            Two times the size of the font. (Original Width and Height * 2.0)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Three">
            <summary>
            Two times the size of the font. (Original Width and Height * 3.0)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Four">
            <summary>
            Two times the size of the font. (Original Width and Height * 4.0)
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey">
            <summary>
            Represents the state of a single key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Key">
            <summary>
            The key from MonoGame or XNA.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Character">
            <summary>
            The keyboard character of the key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.TimeHeld">
            <summary>
            Total time the key has been held.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.PostInitialDelay">
            <summary>
            Tracks if the key was previously held when calculating the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.RemapVirtualKeys(SadConsole.Input.Keys,SadConsole.Input.IKeyboardState)">
            <summary>
             Does any necessary remapping for virtual keys.
            </summary>
            <param name="key"> The key to be remapped. </param>
            <param name="state">Keyboar state to read numlock.</param>
            <returns> The remapped key. </returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Fill(SadConsole.Input.Keys,System.Boolean,SadConsole.Input.IKeyboardState)">
            <summary>
            Fills out the fields based on the MonoGame/XNA key.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">Helps identify which <see cref="F:SadConsole.Input.AsciiKey.Character"/> to use while the key is pressed. For example, if <see cref="F:SadConsole.Input.Keys.A"/> is used the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field will be either 'A' if <paramref name="shiftPressed"/> is true or 'a' if false.</param>
            <param name="state">Keyboar state to read from.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(SadConsole.Input.Keys,SadConsole.Input.IKeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:SadConsole.Input.Keys"/> type. Shift is considered not pressed.
            </summary>
            <param name="key">The key.</param>
            <param name="state">Keyboar state to read from.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:SadConsole.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(SadConsole.Input.Keys,System.Boolean,SadConsole.Input.IKeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:SadConsole.Input.Keys"/> type.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">If shift should be considered pressed or not.</param>
            <param name="state">Keyboar state to read from.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:SadConsole.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the two <see cref="T:SadConsole.Input.AsciiKey"/> types use the same <see cref="F:SadConsole.Input.AsciiKey.Key"/> if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is 0. If the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is not 0, the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is compared.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.GetHashCode">
            <summary>
            Gets a hashcode based on the key and character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Compares if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field of two <see cref="T:SadConsole.Input.AsciiKey"/> instances are the same.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Equals(System.Object)">
            <summary>
            Compares references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Input.IKeyboardState">
            <summary>
            Holds the state of keystrokes by a keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IKeyboardState.CapsLock">
            <summary>
            Gets the current state of the Caps Lock key.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IKeyboardState.NumLock">
            <summary>
            Gets the current state of the Num Lock key.
            </summary>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.IsKeyDown(SadConsole.Input.Keys)">
            <summary>
            Gets whether given key is currently being pressed.
            </summary>
            <param name="key">The key to query.</param>
            <returns>true if the key is pressed; false otherwise.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.IsKeyUp(SadConsole.Input.Keys)">
            <summary>
            Gets whether given key is currently being not pressed.
            </summary>
            <param name="key">The key to query.</param>
            <returns>true if the key is not pressed; false otherwise.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.GetPressedKeys">
            <summary>
            Returns an array of values holding keys that are currently being pressed.
            </summary>
            <returns>The keys that are currently being pressed.</returns>
        </member>
        <member name="T:SadConsole.Input.IMouseState">
            <summary>
            Reports the state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsLeftButtonDown">
            <summary>
            <see langword="true"/>  when the left mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsRightButtonDown">
            <summary>
            <see langword="true"/>  when the right mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsMiddleButtonDown">
            <summary>
            <see langword="true"/>  when the middle mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen relative to the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.MouseWheel">
            <summary>
            The value of the mousewheel.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keyboard">
            <summary>
            Represents the state of the keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysPressed">
            <summary>
            A collection of keys registered as pressed which behaves like a command prompt when holding down keys. 
            Uses the <see cref="F:SadConsole.Input.Keyboard.RepeatDelay"/> and <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> settings.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysDown">
            <summary>
            A collection of keys currently held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysReleased">
            <summary>
            A collection of keys that were just released this frame.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.HasKeysDown">
            <summary>
            <see langword="true"/> when the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection has at least one key; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.HasKeysPressed">
            <summary>
            <see langword="true"/> when the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection has at least one key; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.RepeatDelay">
            <summary>
            How often a key is included in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection after the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> time has passed.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.InitialRepeatDelay">
            <summary>
            The initial delay after a key is first pressed before it is included a second time (while held down) in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.#ctor">
            <summary>
            Creates a new instance of the keyboard manager.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Clear">
            <summary>
            Clears the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/>, <see cref="P:SadConsole.Input.Keyboard.KeysDown"/>, <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collections.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.Keys)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.Keys)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Update(System.TimeSpan)">
            <summary>
            Reads the keyboard state from <see cref="M:SadConsole.GameHost.GetKeyboardState"/>.
            </summary>
            <param name="elapsedSeconds">Fractional seconds passed since Update was called.</param>
        </member>
        <member name="T:SadConsole.Input.KeyboardHandledKeyEventArgs">
            <summary>
            Event handler to preview key presses and cancel them.
            </summary>
        </member>
        <member name="P:SadConsole.Input.KeyboardHandledKeyEventArgs.Key">
            <summary>
            The key being pressed.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keys">
            <summary>
            Defines the keys on a keyboard.
            </summary>	
        </member>
        <member name="F:SadConsole.Input.Keys.None">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Back">
            <summary>
            BACKSPACE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Tab">
            <summary>
            TAB key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Enter">
            <summary>
            ENTER key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.CapsLock">
            <summary>
            CAPS LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Escape">
            <summary>
            ESC key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Space">
            <summary>
            SPACEBAR key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PageUp">
            <summary>
            PAGE UP key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PageDown">
            <summary>
            PAGE DOWN key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.End">
            <summary>
            END key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Home">
            <summary>
            HOME key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Left">
            <summary>
            LEFT ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Up">
            <summary>
            UP ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Right">
            <summary>
            RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Down">
            <summary>
            DOWN ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Select">
            <summary>
            SELECT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Print">
            <summary>
            PRINT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Execute">
            <summary>
            EXECUTE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PrintScreen">
            <summary>
            PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Insert">
            <summary>
            INS key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Delete">
            <summary>
            DEL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Help">
            <summary>
            HELP key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D0">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D9">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftWindows">
            <summary>
            Left Windows key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightWindows">
            <summary>
            Right Windows key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Apps">
            <summary>
            Applications key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Sleep">
            <summary>
            Computer Sleep key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad0">
            <summary>
            Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad1">
            <summary>
            Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad2">
            <summary>
            Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad3">
            <summary>
            Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad4">
            <summary>
            Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad5">
            <summary>
            Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad6">
            <summary>
            Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad7">
            <summary>
            Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad8">
            <summary>
            Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad9">
            <summary>
            Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Multiply">
            <summary>
            Multiply key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Add">
            <summary>
            Add key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Separator">
            <summary>
            Separator key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Subtract">
            <summary>
            Subtract key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Decimal">
            <summary>
            Decimal key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Divide">
            <summary>
            Divide key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F13">
            <summary>
            F13 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F14">
            <summary>
            F14 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F15">
            <summary>
            F15 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F16">
            <summary>
            F16 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F17">
            <summary>
            F17 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F18">
            <summary>
            F18 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F19">
            <summary>
            F19 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F20">
            <summary>
            F20 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F21">
            <summary>
            F21 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F22">
            <summary>
            F22 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F23">
            <summary>
            F23 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F24">
            <summary>
            F24 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumLock">
            <summary>
            NUM LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Scroll">
            <summary>
            SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftShift">
            <summary>
            Left SHIFT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightShift">
            <summary>
            Right SHIFT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftControl">
            <summary>
            Left CONTROL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightControl">
            <summary>
            Right CONTROL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftAlt">
            <summary>
            Left ALT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightAlt">
            <summary>
            Right ALT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserBack">
            <summary>
            Browser Back key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserForward">
            <summary>
            Browser Forward key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserRefresh">
            <summary>
            Browser Refresh key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserStop">
            <summary>
            Browser Stop key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserSearch">
            <summary>
            Browser Search key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserFavorites">
            <summary>
            Browser Favorites key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserHome">
            <summary>
            Browser Start and Home key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeMute">
            <summary>
            Volume Mute key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeDown">
            <summary>
            Volume Down key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeUp">
            <summary>
            Volume Up key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaNextTrack">
            <summary>
            Next Track key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaPreviousTrack">
            <summary>
            Previous Track key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaStop">
            <summary>
            Stop Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaPlayPause">
            <summary>
            Play/Pause Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchMail">
            <summary>
            Start Mail key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.SelectMedia">
            <summary>
            Select Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchApplication1">
            <summary>
            Start Application 1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchApplication2">
            <summary>
            Start Application 2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPlus">
            <summary>
            For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemComma">
            <summary>
            For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemMinus">
            <summary>
            For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPeriod">
            <summary>
            For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemTilde">
            <summary>
            The OEM tilde key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ProcessKey">
            <summary>
            IME PROCESS key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Attn">
            <summary>
            Attn key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Crsel">
            <summary>
            CrSel key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Exsel">
            <summary>
            ExSel key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.EraseEof">
            <summary>
            Erase EOF key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Play">
            <summary>
            Play key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Zoom">
            <summary>
            Zoom key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Pa1">
            <summary>
            PA1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemClear">
            <summary>
            CLEAR key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ChatPadGreen">
            <summary>
            Green ChatPad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ChatPadOrange">
            <summary>
            Orange ChatPad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Pause">
            <summary>
            PAUSE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ImeConvert">
            <summary>
            IME Convert key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ImeNoConvert">
            <summary>
            IME NoConvert key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Kana">
            <summary>
            Kana key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Kanji">
            <summary>
            Kanji key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemAuto">
            <summary>
            OEM Auto key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemCopy">
            <summary>
            OEM Copy key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemEnlW">
            <summary>
            OEM Enlarge Window key.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Mouse">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleButtonDown">
            <summary>
            Indicates the middle mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleClicked">
            <summary>
            Indicates the middle mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleDoubleClicked">
            <summary>
            Inidcates the middle mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftButtonDown">
            <summary>
            Indicates the left mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftClicked">
            <summary>
            Indicates the left mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftDoubleClicked">
            <summary>
            Inidcates the left mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightButtonDown">
            <summary>
            Indicates the right mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightClicked">
            <summary>
            Indicates the right mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightDoubleClicked">
            <summary>
            Indicates the right mouse buttion was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValue">
            <summary>
            The cumulative value of the scroll wheel. 
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValueChange">
            <summary>
            The scroll wheel value change between frames.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.IsOnScreen">
            <summary>
            Indicates that the mouse is currently within the bounds of the rendering area.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Update(System.TimeSpan)">
            <summary>
            Reads the mouse state from <see cref="M:SadConsole.GameHost.GetMouseState"/>.
            </summary>
            <param name="elapsedSeconds">Fractional seconds passed since Update was called.</param>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clear">
            <summary>
            Clears the buttons, position, wheel information.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Process">
            <summary>
            Builds information about the mouse state based on the <see cref="P:SadConsole.GameHost.FocusedScreenObjects"/> or <see cref="P:SadConsole.GameHost.Screen"/>. Should be called each frame.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.ClearLastMouseScreenObject">
            <summary>
            Unlocks the last screen object the mouse was locked to. Allows another console to become locked to the mouse.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.IsMouseOverScreenObjectSurface(SadConsole.IScreenSurface)">
            <summary>
            Returns true when the mouse is currently over the provided screen object.
            </summary>
            <param name="screenObject">The screen object to check.</param>
            <returns>True or false indicating if the mouse is over the screen object.</returns>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clone">
            <summary>
            Clones this mouse into a new object.
            </summary>
            <returns>A clone.</returns>
        </member>
        <member name="T:SadConsole.Input.MouseScreenObjectState">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.ScreenObject">
            <summary>
            The screen object used to create the mouse state.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.Mouse">
            <summary>
            The mouse data.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.Cell">
            <summary>
            The cell the mouse is over, from <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.CellPosition">
            <summary>
            The position of the <see cref="F:SadConsole.Input.MouseScreenObjectState.Cell"/>.  
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.SurfaceCellPosition">
            <summary>
            The position of the mouse on the <see cref="T:SadConsole.IScreenObject"/>, based on the <see cref="F:SadConsole.Input.MouseScreenObjectState.WorldCellPosition"/> and the position of the <see cref="F:SadConsole.Input.MouseScreenObjectState.ScreenObject"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.WorldCellPosition">
            <summary>
            A cell-based location of the mouse based on the screen, not the screen object.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.SurfacePixelPosition">
            <summary>
            The mouse position in pixels on the screen object.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseScreenObjectState.IsOnScreenObject">
            <summary>
            Indicates that the mouse is within the bounds of <see cref="F:SadConsole.Input.MouseScreenObjectState.ScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.MouseScreenObjectState.#ctor(SadConsole.IScreenObject,SadConsole.Input.Mouse)">
            <summary>
            Calculates a new <see cref="T:SadConsole.Input.MouseScreenObjectState"/> based on an <see cref="T:SadConsole.IScreenObject"/> and <see cref="T:SadConsole.Input.Mouse"/> state.
            </summary>
            <param name="screenObject">The screen object to process with the mouse state.</param>
            <param name="mouseData">The current mouse state.</param>
        </member>
        <member name="M:SadConsole.Input.MouseScreenObjectState.Clone">
            <summary>
            Creates a copy.
            </summary>
            <returns>A copy of this class instance.</returns>
        </member>
        <member name="T:SadConsole.Instructions.AnimatedValue">
            <summary>
            An function that applies an <see cref="T:SadConsole.EasingFunctions.EasingBase"/> function between two values.
            </summary>
        </member>
        <member name="F:SadConsole.Instructions.AnimatedValue.EasingFunction">
            <summary>
            The easing function assigned to animate the value.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.AnimatedValue.Value">
            <summary>
            The current or last value of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.AnimatedValue.StartingValue">
            <summary>
            The stating value of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.AnimatedValue.EndingValue">
            <summary>
            The ending value of the animation.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.#ctor(System.TimeSpan,System.Double,System.Double,SadConsole.EasingFunctions.EasingBase)">
            <summary>
            Creates a new value animated over time.
            </summary>
            <param name="duration">The total time this animation should run.</param>
            <param name="startingValue">The starting value of the animation.</param>
            <param name="endingValue">The ending value of the animation.</param>
            <param name="easingFunction">The easing function used during animation. Defaults to <see cref="T:SadConsole.EasingFunctions.Linear"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.Reset(System.TimeSpan,System.Double,System.Double,SadConsole.EasingFunctions.EasingBase)">
            <summary>
            Resets this object to new values.
            </summary>
            <param name="duration">The total time this animation should run.</param>
            <param name="startingValue">The starting value of the animation.</param>
            <param name="endingValue">The ending value of the animation.</param>
            <param name="easingFunction">The easing function used during animation. Defaults to <see cref="T:SadConsole.EasingFunctions.Linear"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Updates the timer with the time since the last call.
            </summary>
            <param name="console">The parent object.</param>
            <param name="delta">The time since the last frame update.</param>
        </member>
        <member name="T:SadConsole.Instructions.CodeInstruction">
            <summary>
            An instruction with a code callback.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.#ctor(System.Func{SadConsole.IScreenObject,System.TimeSpan,System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.SetCallback(System.Func{SadConsole.IScreenObject,System.TimeSpan,System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.ConcurrentInstructions">
            <summary>
            Runs one or more instructions at the same time. This instruction completes when all added instructions have finished.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.ConcurrentInstructions.Instructions">
            <summary>
            The instructions to run concurrently.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.#ctor(System.Collections.Generic.IEnumerable{SadConsole.Instructions.InstructionBase})">
            <summary>
            Creates a new instruction that runs the provided instructions concurrently.
            </summary>
            <param name="instructions">The instructions</param>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Repeat">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.DrawString">
            <summary>
            Draws a string to a console as if someone was typing.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.TotalTimeToPrint">
            <summary>
            Gets or sets the total time to take to write the string. Use zero for instant.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Position">
            <summary>
            Gets or sets the position on the console to write the text.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Cursor">
            <summary>
            Represents the cursor used in printing. Use this for styling and printing behavior.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.ColoredString)">
            <summary>
            Creates a new instance of the object with the specified text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor">
            <summary>
            Creates a new instance of the object. <see cref="P:SadConsole.Instructions.DrawString.Text"/> must be set manually.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Reset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.DrawString.OnAdded(SadConsole.IScreenObject)">
            <summary>
            Creates an invisible cursor that prints on the target surface.
            </summary>
            <param name="host">The host this instruction is added to.</param>
        </member>
        <member name="T:SadConsole.Instructions.FadeTextSurfaceTint">
            <summary>
            Animates a color change to <see cref="P:SadConsole.ScreenSurface.Tint"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors">
            <summary>
            The color to fade the tint to.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadConsole.IScreenSurface,SadRogue.Primitives.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that targets the specified console.
            </summary>
            <param name="objectSurface">The <see cref="P:SadConsole.IScreenSurface.Tint"/> to fade.</param>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadRogue.Primitives.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that uses the console passed to <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/>.
            </summary>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor">
            <summary>
            Creates a new tint fade instruction with default settings that uses the console passed to <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/>.
            </summary>
            <remarks>
            The default settings are:
            
              - <see cref="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors"/>: <see cref="F:SadRogue.Primitives.Color.White"/> to <see cref="F:SadRogue.Primitives.Color.Black"/>
              - Duration: 1 second
            </remarks>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase">
            <summary>
            Base class for all instructions.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Started">
            <summary>
            Raised when the instruction starts.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Finished">
            <summary>
            Raised when the instruction completes.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Repeating">
            <summary>
            Raised when the instruction completes but is going to repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RemoveOnFinished">
            <summary>
            When true, this instruction will automatically remove itself from the parent's <see cref="P:SadConsole.IScreenObject.SadComponents"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.IsFinished">
            <summary>
            Flags the instruction as completed or not. If completed, the <see cref="E:SadConsole.Instructions.InstructionBase.Finished"/> event will be raised.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RepeatCount">
            <summary>
            Indicates how many times this set will repeat. Use 0 to not repeat and -1 to repeat forever.
            </summary>
            <remarks>This property counts down each time the instruction finishes. If set to -1 it will repeat forever. As this represents how many times to repeat, setting this value to 1 would allow the instruction to execute twice, once for the original time, and again for the repeat counter of 1.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Reset">
            <summary>
            Resets the Done flag.
            </summary>
            <remarks>On the base class, resets the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> to false. Override this method to reset the derived class' counters and status flags for the instruction.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Repeat">
            <summary>
            Repeats the current instruction. Decrements the <see cref="P:SadConsole.Instructions.InstructionBase.RepeatCount"/> value (if applicable), and raises the <see cref="E:SadConsole.Instructions.InstructionBase.Repeating"/> event. This method should be overridden in derived classes to customize how the object is reset for a repeat.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Executes the instruction. This base class method should be called from derived classes. If the IsFinished property is set to true, will try to repeat if needed and will raise all appropriate events.
            </summary>
            <param name="componentHost">The object that hosts this instruction.</param>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnFinished(SadConsole.IScreenObject)">
            <summary>
            Called when the instruction finishes.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnRepeating">
            <summary>
            Called when the instruction repeats.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnStarted">
            <summary>
            Called when the instruction first runs.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionSet">
            <summary>
            A set of instructions to be executed sequentially.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Instructions">
            <summary>
            All instructions in this set.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Name">
            <summary>
            The name of this instruction to identify it apart from other instruction sets.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.CurrentInstruction">
            <summary>
            Represents the current instruction if this set is currently executing.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Reset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Runs the instruction set. Once all instructions are finished, this set will set the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> property will be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Wait(System.TimeSpan)">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.Wait"/> instruction with the specified duration to the end of this set.
            </summary>
            <param name="duration">The time to wait.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Instruct(SadConsole.Instructions.InstructionBase)">
            <summary>
            Adds an instruction to the end of this set.
            </summary>
            <param name="instruction"></param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Code(System.Func{SadConsole.IScreenObject,System.TimeSpan,System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.CodeInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Code(System.Action)">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.CodeInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.WaitTrue(System.Func{System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.PredicateInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.InstructConcurrent(SadConsole.Instructions.InstructionBase[])">
            <summary>
            Adds a <see cref="T:SadConsole.Instructions.ConcurrentInstructions"/> to the end of this set.
            </summary>
            <param name="instructions">Instructions to add. Must be two or more instructions.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="T:SadConsole.Instructions.PredicateInstruction">
            <summary>
            Instruction that waits until the code callback returns <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.PredicateInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.#ctor(System.Func{System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.SetCallback(System.Func{System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.Wait">
            <summary>
            Represents an instruction to pause for a specified duration.
            </summary>
        </member>
        <member name="F:SadConsole.Instructions.Wait.CountedTime">
            <summary>
            How much time has passed.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Wait.Duration">
            <summary>
            The duration of the wait.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor(System.TimeSpan)">
            <summary>
            Creates a new wait timer with the specified duration.
            </summary>
            <param name="duration">How long this instruction waits until it signals <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor">
            <summary>
            Creates a new wait timer with a 1-second delay.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.Wait.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.IScreenObject">
            <summary>
            A generic object processed by SadConsole. Provides parent/child, components, position, and input callbacks.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.EnabledChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsEnabled"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.ParentChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.Parent"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.PositionChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.Position"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.VisibleChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsVisible"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.FocusLost">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsFocused"/> property is <see langword="false"/>.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.Focused">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsFocused"/> property is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.FocusedMode">
            <summary>
            How the object should handle becoming active.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.AbsolutePosition">
            <summary>
            A position that is based on the current <see cref="P:SadConsole.IScreenObject.Position"/> and <see cref="P:SadConsole.IScreenObject.Parent"/> position, in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.Children">
            <summary>
            The child objects of this instance.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.SadComponents">
            <summary>
            A collection of components processed by this console.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsEnabled">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsExclusiveMouse">
            <summary>
            Gets or sets whether or not this object has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsFocused">
            <summary>
            Gets or sets this console as the focused object for input.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsVisible">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.Parent">
            <summary>
            The parent object that this instance is a child of.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.Position">
            <summary>
            The position of the object on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.UseKeyboard">
            <summary>
            When <see langword="true"/>, this object will use the keyboard; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.UseMouse">
            <summary>
            When <see langword="true"/>, this object will use the mouse; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.IScreenObject.Render(System.TimeSpan)">
            <summary>
            Draws all <see cref="P:SadConsole.IScreenObject.SadComponents"/> and <see cref="P:SadConsole.IScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.IScreenObject.IsVisible"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.IScreenObject.OnFocused">
            <summary>
            Called when this object is focused.
            </summary>
        </member>
        <member name="M:SadConsole.IScreenObject.OnFocusLost">
            <summary>
            Called when this object's focus has been lost.
            </summary>
        </member>
        <member name="M:SadConsole.IScreenObject.GetSadComponent``1">
            <summary>
            Gets the first component of the specified type.
            </summary>
            <typeparam name="TComponent">The component to find.</typeparam>
            <returns>The component if found, otherwise null.</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.GetSadComponents``1">
            <summary>
            Gets components of the specified types.
            </summary>
            <typeparam name="TComponent">The component to find</typeparam>
            <returns>The components found.</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.HasSadComponent``1(``0@)">
            <summary>
            Indicates whether or not the component exists in the <see cref="P:SadConsole.IScreenObject.SadComponents"/> collection.
            </summary>
            <typeparam name="TComponent">The component to find.</typeparam>
            <returns><see langword="true"/> when the component exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called by the engine to process the keyboard.
            </summary>
            <param name="keyboard">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Processes the mouse.
            </summary>
            <param name="state">The mouse state related to this object.</param>
            <returns>True when this object should halt further mouse processing..</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Called when the mouse is being used by something else.
            </summary>
            <param name="state">The current state of the mouse based on this object.</param>
        </member>
        <member name="M:SadConsole.IScreenObject.Update(System.TimeSpan)">
            <summary>
            Updates all <see cref="P:SadConsole.IScreenObject.SadComponents"/> and <see cref="P:SadConsole.IScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.IScreenObject.IsEnabled"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.IScreenObject.UpdateAbsolutePosition">
            <summary>
            Sets a value for <see cref="P:SadConsole.IScreenObject.AbsolutePosition"/> based on the <see cref="P:SadConsole.IScreenObject.Position"/> of this instance and the <see cref="P:SadConsole.IScreenObject.Parent"/> instance.
            </summary>
        </member>
        <member name="T:SadConsole.IScreenSurface">
            <summary>
            A screen object that has mouse input, surface, and render information.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseButtonClicked">
            <summary>
            Raised when the a mouse button is clicked on this console.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseEnter">
            <summary>
            Raised when the mouse enters this console.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseExit">
            <summary>
            Raised when the mouse exits this console.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseMove">
            <summary>
            Raised when the mouse moves around the this console.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.DefaultRendererName">
            <summary>
            The name of the default renderer for this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.FocusOnMouseClick">
            <summary>
            When true, this console will set <see cref="P:SadConsole.IScreenObject.IsFocused"/> to true when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.HeightPixels">
            <summary>
            The height of the surface in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.MoveToFrontOnMouseClick">
            <summary>
            When true, this console will move to the front of its parent console when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Renderer">
            <summary>
            The renderer used to draw this surface.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.RenderSteps">
            <summary>
            The render steps to draw this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.IScreenObject.Position"/> of the console as if it is pixels and not cells.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.WidthPixels">
            <summary>
            The width of the surface in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.AbsoluteArea">
            <summary>
            The pixel area on the screen this surface occupies.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Font">
            <summary>
            Font used with rendering.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.FontSize">
            <summary>
            The size of the <see cref="P:SadConsole.IScreenSurface.Font"/> cells applied to the object when rendering.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.ForceRendererRefresh">
            <summary>
            When <see langword="true"/>, forces the <see cref="P:SadConsole.IScreenSurface.Renderer"/> to refresh the backing texture with the latest state of the object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Surface">
            <summary>
            The surface the screen object represents.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="T:SadConsole.ITexture">
            <summary>
            Represents a texture provided by a game host.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.ResourcePath">
            <summary>
            The file path to the texture.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.Height">
            <summary>
            The height of the texture.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.Width">
            <summary>
            The width of the texture.
            </summary>
        </member>
        <member name="M:SadConsole.ITexture.GetPixels">
            <summary>
            Gets an array of colors. Row-major ordered.
            </summary>
        </member>
        <member name="M:SadConsole.ITexture.SetPixel(SadRogue.Primitives.Point,SadRogue.Primitives.Color)">
            <summary>
            Sets a specific pixel in the texture to a color by x,y coordinate.
            </summary>
            <param name="position">The position of the pixel to set.</param>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:SadConsole.ITexture.SetPixel(System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Sets a specific pixel in the texture to a color by index. Row-major ordered.
            </summary>
            <param name="index"></param>
            <param name="color"></param>
        </member>
        <member name="M:SadConsole.ITexture.GetPixel(SadRogue.Primitives.Point)">
            <summary>
            Gets a pixel in the texture by x,y coordinate.
            </summary>
            <param name="position">The x,y coordinate of the pixel.</param>
            <returns>The color of the pixel.</returns>
        </member>
        <member name="M:SadConsole.ITexture.GetPixel(System.Int32)">
            <summary>
            Gets a pixel in the texture by index. Row-major ordered.
            </summary>
            <param name="index">The index of the pixel.</param>
            <returns>The color of the pixel.</returns>
        </member>
        <member name="M:SadConsole.ITexture.ToSurface(SadConsole.TextureConvertMode,System.Int32,System.Int32,SadConsole.TextureConvertBackgroundStyle,SadConsole.TextureConvertForegroundStyle,SadRogue.Primitives.Color[],SadConsole.ICellSurface)">
            <summary>
            Converts the texture into a cell surface based on the specified mode.
            </summary>
            <param name="mode">The mode used when converting the texture to a surface.</param>
            <param name="surfaceWidth">How many cells wide the returned surface is.</param>
            <param name="surfaceHeight">How many cells high the returned surface is.</param>
            <param name="backgroundStyle">The style to use when <paramref name="mode"/> is <see cref="F:SadConsole.TextureConvertMode.Background"/>.</param>
            <param name="foregroundStyle">The style to use when <paramref name="mode"/> is <see cref="F:SadConsole.TextureConvertMode.Foreground"/>.</param>
            <param name="cachedColorArray">When provided, this array is used for color data. It must match the texture's expected <see cref="M:SadConsole.ITexture.GetPixels"/> bounds. Used with <paramref name="cachedColorArray"/>.</param>
            <param name="cachedSurface">The cell surface to use instead of creating a new one. Used with <paramref name="cachedColorArray"/>.</param>
            <returns>A new surface.</returns>
            <remarks></remarks>
        </member>
        <member name="T:SadConsole.TextureConvertMode">
            <summary>
            The conversion mode from <see cref="T:SadConsole.ITexture"/> to <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertMode.Background">
            <summary>
            Fills the background of each cell with the pixel color.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertMode.Foreground">
            <summary>
            Fills the foreground of each cell with the pixel color.
            </summary>
        </member>
        <member name="T:SadConsole.TextureConvertForegroundStyle">
            <summary>
            The style applied when <see cref="F:SadConsole.TextureConvertMode.Foreground"/> is set.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertForegroundStyle.Block">
            <summary>
            Fills the surface with block ascii that represents the brightness of the pixel. Foreground is set to the pixel color.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertForegroundStyle.AsciiSymbol">
            <summary>
            Fills the surface with ascii symbols that represents the brightness of the pixel. Foreground is set to the pixel color.
            </summary>
        </member>
        <member name="T:SadConsole.TextureConvertBackgroundStyle">
            <summary>
            The style applied when <see cref="F:SadConsole.TextureConvertMode.Background"/> is set.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertBackgroundStyle.Pixel">
            <summary>
            Simply resizes the image and maps the cell to the pixel without any other color conversion.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertBackgroundStyle.Smooth">
            <summary>
            Calculates the cell color based on the surrounding colors of the image.
            </summary>
        </member>
        <member name="T:SadConsole.Quick.Keyboard">
            <summary>
            Adds keyboard-related extension methods for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Quick.Keyboard.WithKeyboard(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})">
            <summary>
            Adds a keyboard handler to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="M:SadConsole.Quick.Keyboard.RemoveKeyboardHooks(SadConsole.IScreenObject)">
            <summary>
            Removes all of the keyboard hooks added with <see cref="M:SadConsole.Quick.Keyboard.WithKeyboard(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
        </member>
        <member name="M:SadConsole.Quick.Keyboard.RemoveKeyboardHook(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})">
            <summary>
            Removes the specified handler that was added with <see cref="M:SadConsole.Quick.Keyboard.WithKeyboard(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="T:SadConsole.Quick.Mouse">
            <summary>
            Adds mouse-related extension methods for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Quick.Mouse.WithMouse(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})">
            <summary>
            Adds a mouse handler to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="M:SadConsole.Quick.Mouse.RemoveMouseHooks(SadConsole.IScreenObject)">
            <summary>
            Removes all of the mouse hooks added with <see cref="M:SadConsole.Quick.Mouse.WithMouse(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
        </member>
        <member name="M:SadConsole.Quick.Mouse.RemoveMouseHook(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})">
            <summary>
            Removes the specified handler that was added with <see cref="M:SadConsole.Quick.Mouse.WithMouse(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage">
            <summary>
            A RexPaint image.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Cell">
            <summary>
            A RexPaint layer cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Character">
            <summary>
            The character for the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Foreground">
            <summary>
            The foreground color of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Background">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Cell.#ctor(System.Int32,SadConsole.Readers.REXPaintImage.Color,SadConsole.Readers.REXPaintImage.Color)">
            <summary>
            Creates a new REXPaint cell.
            </summary>
            <param name="character">The glyph.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Cell.IsTransparent">
            <summary>
            Returns true when the current color is considered transparent.
            </summary>
            <returns>True when transparent.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Color">
            <summary>
            A RexPaint color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.R">
            <summary>
            The red channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.G">
            <summary>
            The green channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.B">
            <summary>
            The blue channel of the color.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RexPaint color with the specified RGB channels.
            </summary>
            <param name="r">The red channel of the color.</param>
            <param name="g">The green channel of the color.</param>
            <param name="b">The blue channel of the color.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.op_Equality(SadConsole.Readers.REXPaintImage.Color,SadConsole.Readers.REXPaintImage.Color)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.op_Inequality(SadConsole.Readers.REXPaintImage.Color,SadConsole.Readers.REXPaintImage.Color)">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Color.Transparent">
            <summary>
            Returns the transparent color used by RexPaint: rgb(255, 0, 255).
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Version">
            <summary>
            The version of RexPaint that created this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Width">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Height">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.LayerCount">
            <summary>
            The total number of layers for this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layers">
            <summary>
            A read-only collection of layers.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RexPaint image.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create">
            <summary>
            Creates a new layer for the image adding it to the end of the layer stack.
            </summary>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create(System.Int32)">
            <summary>
            Creates a new layer for the image and inserts it at the specified position (0-based).
            </summary>
            <param name="index">The position to create the new layer at.</param>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer,System.Int32)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image and inserts it at the specified position (0-based).
            </summary>
            <param name="layer">The layer to add.</param>
            <param name="index">The position to add the layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Remove(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Removes the specified layer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.ToLayersComponent">
            <summary>
            Converts this REXPaint image to a collection of <see cref="T:SadConsole.CellSurface"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Load(System.IO.Stream)">
            <summary>
            Loads a .xp RexPaint image from a GZip compressed stream.
            </summary>
            <param name="stream">The GZip stream to load.</param>
            <returns>The RexPaint image.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Layer">
            <summary>
            A layer of a RexPaint image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Width">
            <summary>
            The width of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Height">
            <summary>
            The height of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Cells">
            <summary>
            Represents all cells of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates.
            </summary>
            <param name="x">The x (0-based) position of the cell.</param>
            <param name="y">The y (0-based) position of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new layer with the specified width and height.
            </summary>
            <param name="width">The width of the layer.</param>
            <param name="height">The height of the layer.</param>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont">
            <summary>
            Represents a TheDraw ascii font. http://www.roysac.com/thedrawfonts-tdf.html
            </summary>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont.FontType">
            <summary>
            The type of font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.FontType.Outline">
            <summary>
            An outline font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.FontType.Block">
            <summary>
            A block-based font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.FontType.Color">
            <summary>
            A font supporting color.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.Title">
            <summary>
            The title of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.Type">
            <summary>
            The type of font.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.LetterSpacing">
            <summary>
            The empty characters between letters when drawing.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.CharactersSupported">
            <summary>
            An array indexed by character code, indicating if a glyph character is supported by the font. Characters 33 to 126 are supported, starting at index 0.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.Characters">
            <summary>
            A dictionary keyed by character code representing each character in the font. Characters 33 to 126 are supported but indexed starting at 0.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.IsCharacterSupported(System.Int32)">
            <summary>
            Returns <see langword="true"/> when the specified character glyph is supported by this font; otherwise <see langword="false"/>.
            </summary>
            <param name="glyph"></param>
            <returns>A boolean value indicating whether or not the specified glyph is supported.</returns>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.GetCharacter(System.Int32)">
            <summary>
            Gets a character from this font by character code.
            </summary>
            <param name="glyph">The character to get.</param>
            <returns>The specified character.</returns>
            <exception cref="T:System.InvalidOperationException">The character glyph index is valid but isn't included in this font.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The character glyph index isn't in range. It must be between 33 and 126.</exception>
        </member>
        <member name="T:SadConsole.Renderers.Constants.RendererNames">
            <summary>
            Renderer names used by hosts and types.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RendererNames.Default">
            <summary>
            The default renderer for a screen surface.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.Constants.RenderStepNames">
            <summary>
            Renderer names used by hosts and types.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Surface">
            <summary>
            The render step for a <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.ControlHost">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.ControlHost"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Window">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.Window"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Cursor">
            <summary>
            The render step for a <see cref="T:SadConsole.Components.Cursor"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.EntityRenderer">
            <summary>
            The render step for a <see cref="T:SadConsole.Entities.Renderer"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Output">
            <summary>
            The render to draw the output texture of an <see cref="T:SadConsole.Renderers.IRenderer"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Tint">
            <summary>
            The render to draw the tint texture of an <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.Constants.RenderStepSortValues">
            <summary>
            Renderer names used by hosts and types.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Surface">
            <summary>
            The render step for a <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.ControlHost">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.ControlHost"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Window">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.Window"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Cursor">
            <summary>
            The render step for a <see cref="T:SadConsole.Components.Cursor"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.EntityRenderer">
            <summary>
            The render step for a <see cref="T:SadConsole.Entities.Renderer"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Output">
            <summary>
            The render to draw the output texture of an <see cref="T:SadConsole.Renderers.IRenderer"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Tint">
            <summary>
            The render to draw the tint texture of an <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.IRenderer">
            <summary>
            Draws a surface.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.Output">
            <summary>
            The output texture created by the renderer.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.Opacity">
            <summary>
            A 0 to 255 value represening how transparent the surface is when drawn to the screen. 255 represents full visibility.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.IsForced">
            <summary>
            <see langword="true"/> when the renderer is being forced to be redrawn this frame; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Refresh(SadConsole.IScreenSurface,System.Boolean)">
            <summary>
            Refreshes a cached drawing state.
            </summary>
            <param name="surface">Target surface.</param>
            <param name="force">When <see langword="true"/>, indicates the refresh should happen even if a surface isn't dirty.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Render(SadConsole.IScreenSurface)">
            <summary>
            Creates a drawcall in the drawing pipeline.
            </summary>
            <param name="surface">Target surface.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.OnHostUpdated(SadConsole.IScreenObject)">
            <summary>
            Called when various states in the host change.
            </summary>
            <param name="host">The host that uses this component.</param>
        </member>
        <member name="T:SadConsole.Renderers.IRenderStep">
            <summary>
            A rendering step processed by an <see cref="T:SadConsole.Renderers.IRenderer"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderStep.SortOrder">
            <summary>
            Indicates priority related to other steps. Lowest runs first.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.SetData(System.Object)">
            <summary>
            Adds supplemental data to the render step. 
            </summary>
            <param name="data">The data to add to the step.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Reset">
            <summary>
            Called when the step should reset any state or texture information.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Refresh(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface,System.Boolean,System.Boolean)">
            <summary>
            Called to redraw the render step if needed.
            </summary>
            <param name="renderer">The renderer the render step is using.</param>
            <param name="screenObject">The surface associated with the renderer. This may be null.</param>
            <param name="backingTextureChanged"><see langword="true"/> to indicate the <see cref="P:SadConsole.Renderers.IRenderer.Output"/> changed; otherwise <see langword="false"/>.</param>
            <param name="isForced"><see langword="true"/> when refresh is being forced; otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> when the step is going to draw something new and is requesting a <see cref="M:SadConsole.Renderers.IRenderStep.Composing(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface)"/> step; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Composing(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface)">
            <summary>
            Called when the renderer needs to redraw the <see cref="P:SadConsole.Renderers.IRenderer.Output"/> texture.
            </summary>
            <param name="renderer">The renderer the render step is using.</param>
            <param name="screenObject">The surface associated with the renderer. This may be null.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Render(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface)">
            <summary>
            Called when building draw calls for the render pipeline.
            </summary>
            <param name="renderer">The renderer the render step is using.</param>
            <param name="screenObject">The surface associated with the renderer. This may be null.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.OnHostUpdated(SadConsole.IScreenObject)">
            <summary>
            Called when various states in the host change.
            </summary>
            <param name="host">The host that uses this component.</param>
        </member>
        <member name="T:SadConsole.Renderers.IRenderStepTexture">
            <summary>
            Indicates the render step has an associated texture.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderStepTexture.CachedTexture">
            <summary>
            The texture created by the render step.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.RenderStepComparer">
            <summary>
            Compares <see cref="T:SadConsole.Renderers.IRenderStep"/> with the <see cref="P:SadConsole.Renderers.IRenderStep.SortOrder"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.RenderStepComparer.Compare(SadConsole.Renderers.IRenderStep,SadConsole.Renderers.IRenderStep)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.SadFont">
            <summary>
            Represents a graphical font used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.SolidGlyphIndex">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.SolidGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.SadFont.SolidGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.Columns">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.Rows">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.TotalGlyphs">
            <summary>
            Gets the total glyphs in this font, which represents the last index. Calculated from <see cref="P:SadConsole.SadFont.Columns"/> times <see cref="P:SadConsole.SadFont.Rows"/>.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.Name">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.FilePath">
            <summary>
            The name of the image file as defined in the .font file.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.GlyphHeight">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.GlyphWidth">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.UnsupportedGlyphIndex">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.UnsupportedGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.SadFont.UnsupportedGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.GlyphRectangles">
            <summary>
            A dictionary that stores the source rectangles of the font by glyph id.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.IsSadExtended">
            <summary>
            True when the font supports SadConsole extended decorators; otherwise false.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.GlyphDefinitions">
            <summary>
            Standard decorators used by your app.
            </summary>
        </member>
        <member name="M:SadConsole.SadFont.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ITexture,System.String,System.Collections.Generic.Dictionary{System.Int32,SadRogue.Primitives.Rectangle})">
            <summary>
            Creates a new font with the specified settings.
            </summary>
            <param name="glyphWidth">The pixel width of each glyph.</param>
            <param name="glyphHeight">The pixel height of each glyph.</param>
            <param name="glyphPadding">The pixel padding between each glyph.</param>
            <param name="rows">Number of glyph rows in the <paramref name="image"/>.</param>
            <param name="columns">Number of glyph columns in the <paramref name="image"/>.</param>
            <param name="solidGlyphIndex">The index of the glyph that is a solid white box.</param>
            <param name="image">The texture for of the font.</param>
            <param name="name">A font identifier used for serialization of resources using this font.</param>
            <param name="glyphRectangles">Glyph mapping dictionary.</param>
        </member>
        <member name="M:SadConsole.SadFont.GetGlyphSourceRectangle(System.Int32)">
            <summary>
            Gets the rendering rectangle for a glyph.
            </summary>
            <param name="glyph">The index of the glyph to get.</param>
            <returns>The rectangle for the glyph if it exists, otherwise returns <see cref="P:SadConsole.SadFont.UnsupportedGlyphRectangle"/>.</returns>
        </member>
        <member name="M:SadConsole.SadFont.GetDecorator(System.String,SadRogue.Primitives.Color)">
            <summary>
            Gets a <see cref="T:SadConsole.CellDecorator"/> by the <see cref="T:SadConsole.GlyphDefinition"/> defined by the font file.
            </summary>
            <param name="name">The name of the decorator to get.</param>
            <param name="color">The color to apply to the decorator.</param>
            <returns>The decorator instance.</returns>
            <remarks>If the decorator does not exist, <see cref="P:SadConsole.CellDecorator.Empty"/> is returned.</remarks>
        </member>
        <member name="M:SadConsole.SadFont.GetGlyphDefinition(System.String)">
            <summary>
            Gets a <see cref="T:SadConsole.GlyphDefinition"/> by name that is defined by the font file.
            </summary>
            <param name="name">The name of the glyph definition.</param>
            <returns>The glyph definition.</returns>
            <remarks>If the glyph definition doesn't exist, return s<see cref="P:SadConsole.GlyphDefinition.Empty"/>.</remarks>
        </member>
        <member name="M:SadConsole.SadFont.HasGlyphDefinition(System.String)">
            <summary>
            Returns <see langword="true"/> when the glyph has been defined by name.
            </summary>
            <param name="name">The name of the glyph</param>
            <returns><see langword="true"/> when the glyph name exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.SadFont.ConfigureRects">
            <summary>
            Builds the <see cref="P:SadConsole.SadFont.GlyphRectangles"/> array based on the current font settings.
            </summary>
        </member>
        <member name="T:SadConsole.ScreenObject">
            <summary>
            A generic object processed by SadConsole. Provides parent/child, components, and position.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObject.ParentChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.PositionChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.VisibleChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.EnabledChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.FocusLost">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.Focused">
            <inheritdoc/>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsUpdate">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsUpdate"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsRender">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsRender"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsMouse">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsMouse"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsKeyboard">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsKeyboard"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsEmpty">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.SadComponents"/> that is not set for update, render, mouse, or keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.SadComponents">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.Children">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.Parent">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.Position">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.AbsolutePosition">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsVisible">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsFocused">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.FocusedMode">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsExclusiveMouse">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.UseKeyboard">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.UseMouse">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.Render(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.Update(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnFocusLost">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnFocused">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.GetSadComponents``1">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.GetSadComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnSadComponentAdded(SadConsole.Components.IComponent)">
            <summary>
            Called when a component is added to the <see cref="P:SadConsole.ScreenObject.SadComponents"/> collection.
            </summary>
            <param name="component">The component added.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnSadComponentRemoved(SadConsole.Components.IComponent)">
            <summary>
            Called when a component is removed from the <see cref="P:SadConsole.ScreenObject.SadComponents"/> collection.
            </summary>
            <param name="component">The component removed.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.HasSadComponent``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnParentChanged(SadConsole.IScreenObject,SadConsole.IScreenObject)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.ParentChanged"/> event.
            </summary>
            <param name="oldParent">The previous parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnPositionChanged(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.PositionChanged"/> event.
            </summary>
            <param name="oldPosition">The previous position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnVisibleChanged">
            <summary>
            Called when the visibility of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.OnEnabledChanged">
            <summary>
            Called when the paused status of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.UpdateAbsolutePosition">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.SortComponents">
            <summary>
            Sorts the components based on the <see cref="P:SadConsole.Components.IComponent.SortOrder"/> value.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.ToString">
            <summary>
            Returns the value "ScreenObject".
            </summary>
            <returns>The string "ScreenObject".</returns>
        </member>
        <member name="M:SadConsole.ScreenObject.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Nothing.
            </summary>
            <param name="context">Nothing.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.Components_FilterAddItem(SadConsole.Components.IComponent,System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent})">
            <summary>
            Adds a component to the provided collections, based on its configuration.
            </summary>
            <param name="component">The component.</param>
            <param name="componentsRender">The render collection.</param>
            <param name="componentsUpdate">The update collection.</param>
            <param name="componentsKeyboard">The keyboard collection.</param>
            <param name="componentsMouse">The mouse collection.</param>
            <param name="componentsEmpty">The empty collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.Components_FilterRemoveItem(SadConsole.Components.IComponent,System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent})">
            <summary>
            Removes a component to the provided collections, based on its configuration.
            </summary>
            <param name="component">The component.</param>
            <param name="componentsRender">The render collection.</param>
            <param name="componentsUpdate">The update collection.</param>
            <param name="componentsKeyboard">The keyboard collection.</param>
            <param name="componentsMouse">The mouse collection.</param>
            <param name="componentsEmpty">The empty collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.Components_Sort(System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent})">
            <summary>
            Helper to sort the components in the split collections.
            </summary>
            <param name="componentsRender">The render collection.</param>
            <param name="componentsUpdate">The update collection.</param>
            <param name="componentsKeyboard">The keyboard collection.</param>
            <param name="componentsMouse">The mouse collection.</param>
            <param name="componentsEmpty">The empty collection.</param>
        </member>
        <member name="T:SadConsole.ScreenObjectCollection">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.#ctor(SadConsole.IScreenObject)">
            <summary>
            Creates a new object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="T:SadConsole.ScreenObjectCollection`1">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObjectCollection`1.CollectionChanged">
            <summary>
            Raised when the itmes in this collection are added, removed, or repositioned.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObjectCollection`1.objects">
            <summary>
            Internal list of objects.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObjectCollection`1.owningObject">
            <summary>
            The parent object.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection`1.Count">
            <summary>
            Returns the total number of objects in this collection.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection`1.IsLocked">
            <summary>
            When true, the collection cannot be modified.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets a child object for this collection.
            </summary>
            <param name="index">The index of the child object.</param>
            <returns>The wanted object.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.#ctor(SadConsole.IScreenObject)">
            <summary>
            Creates a new object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Contains(`0)">
            <summary>
            Returns true if this console list contains the specified <paramref name="obj"/>.
            </summary>
            <param name="obj">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.IsTop(`0)">
            <summary>
            When true, indicates that the <paramref name="obj"/> is at the top of the collection stack.
            </summary>
            <param name="obj">The obj object to check.</param>
            <returns>True when the object is on top.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Add(`0)">
            <summary>
            Adds a new child object to this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a child object at the specified <paramref name="index"/>.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
            <param name="index">The 0-based index to insert the object at.</param>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Remove(`0)">
            <summary>
            Removes a new child object from this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.MoveToTop(`0)">
            <summary>
            Moves the specified <paramref name="obj"/>  to the top of the collection.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.MoveToBottom(`0)">
            <summary>
            Moves the specified <paramref name="obj"/>  to the bottom of the collection.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.IndexOf(`0)">
            <summary>
            Gets the 0-based index of the <paramref name="obj"/>.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.ScreenSurface">
            <summary>
            An object that renders a <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.ForceRendererRefresh">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.DefaultRendererName">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.Renderer">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.RenderSteps">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.Surface">
            <summary>
            The surface this screen object represents.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that the <see cref="P:SadConsole.ScreenSurface.Surface"/> needs to be redrawn; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.Font">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.FontSize">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.Tint">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.AbsoluteArea">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.UsePixelPositioning">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.WidthPixels">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.HeightPixels">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new screen object that can render a surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The visible width of the surface in cells.</param>
            <param name="viewHeight">The visible height of the surface in cells.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(SadRogue.Primitives.GridViews.IGridView{SadConsole.ColoredGlyph},System.Int32,System.Int32)">
            <summary>
            Creates a new surface from a grid view. The cells between this object and the grid view are shared.
            </summary>
            <param name="surface">The surface to use as the source of cells.</param>
            <param name="visibleWidth">Optional view width. If <c>0</c>, the view width matches the width of the surface.</param>
            <param name="visibleHeight">Optional view height. If <c>0</c>, the view width matches the height of the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new screen object wrapping an existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The width of the surface in cells to show.</param>
            <param name="viewHeight">The height of the surface in cells to show.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ScreenSurface.Render(System.TimeSpan)">
            <summary>
            Draws the <see cref="P:SadConsole.ScreenSurface.Surface"/> and all <see cref="P:SadConsole.ScreenObject.SadComponents"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.ScreenObject.IsVisible"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.ScreenSurface.Update(System.TimeSpan)">
            <summary>
            Updates the <see cref="P:SadConsole.ScreenSurface.Surface"/> effects and all <see cref="P:SadConsole.ScreenObject.SadComponents"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since this method was last called.</param>
            <remarks>Only processes if <see cref="P:SadConsole.ScreenObject.IsEnabled"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnIsDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnFontChanged(SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.Font"/> or <see cref="P:SadConsole.ScreenSurface.FontSize"/> property changes.
            </summary>
            <param name="oldFont">The font prior to the change.</param>
            <param name="oldFontSize">The font size prior to the change.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnSurfaceChanged(SadConsole.ICellSurface)">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.Surface"/> property is changed.
            </summary>
            <param name="oldSurface">The previous surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnRendererChanged">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.Renderer"/> property is changed.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.ToString">
            <summary>
            Returns the value "ScreenSurface".
            </summary>
            <returns>The string "ScreenSurface".</returns>
        </member>
        <member name="M:SadConsole.ScreenSurface.CallOnHostUpdated">
            <summary>
            Calls the OnHostUpdated method on components, renderer, and rendersteps.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.ScreenSurface.Renderer"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.Dispose">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseButtonClicked">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseMove">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseExit">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseEnter">
            <inheritdoc/>
        </member>
        <member name="F:SadConsole.ScreenSurface.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.MoveToFrontOnMouseClick">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.FocusOnMouseClick">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseEnter(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseEnter"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseExit(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseExit"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseMove(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseMove"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseLeftClicked(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseButtonClicked"/> event. Possibly moves the console to the top of it's parent's children collection.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnRightMouseClicked(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseButtonClicked"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="T:SadConsole.Serializer.Contracts">
            <summary>
            Registers the default converters for SadConsole objects, when needed.
            </summary>
        </member>
        <member name="P:SadConsole.Serializer.Settings">
            <summary>
            The settings to use during <see cref="M:SadConsole.Serializer.Save``1(``0,System.String,System.Boolean)"/> and <see cref="M:SadConsole.Serializer.Load``1(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.Serialize``1(``0)">
            <summary>
            A shortcut for serialization that uses <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/> with the <see cref="P:SadConsole.Serializer.Settings"/> property defined by this class.
            </summary>
            <typeparam name="T">The object type to serialize.</typeparam>
            <param name="instance">The object to serialize.</param>
            <returns>A json encoded string.</returns>
        </member>
        <member name="M:SadConsole.Serializer.Deserialize``1(System.String)">
            <summary>
            A shortcut for serialization that uses <see cref="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/> with the <see cref="P:SadConsole.Serializer.Settings"/> property defined by this class.
            </summary>
            <param name="json">The json string to create an object from.</param>
            <returns>An object created from the <paramref name="json"/> parameter.</returns>
        </member>
        <member name="M:SadConsole.Serializer.Save``1(``0,System.String,System.Boolean)">
            <summary>
            Serializes the <paramref name="instance"/> to the specified file.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="instance">The object to serialize.</param>
            <param name="file">The file to save the object to.</param>
            <param name="compress">When true, uses GZIP compression on the json string saved to the <paramref name="file"/></param>
        </member>
        <member name="M:SadConsole.Serializer.Load``1(System.String,System.Boolean)">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> from the specified file.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="file">The file to load from.</param>
            <param name="isCompressed">When true, indicates that the json <paramref name="file"/> should be decompressed with GZIP compression.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="T:SadConsole.Serializer.LogTraceWriter">
            <summary>
            A simple log writer that helps debug the JSON serialization.
            </summary>
        </member>
        <member name="F:SadConsole.Serializer.LogTraceWriter.Log">
            <summary>
            THe string containing the log.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.LogTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Captures a JSON log event.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">The message.</param>
            <param name="ex">The exception associated with the log event.</param>
        </member>
        <member name="P:SadConsole.Serializer.LogTraceWriter.LevelFilter">
            <summary>
            THe level filter for the log.
            </summary>
        </member>
        <member name="T:SadConsole.Settings">
            <summary>
            Various settings for SadConsole.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultConsoleUseKeyboard">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.IScreenObject.UseKeyboard"/> when the console is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultScreenObjectUseKeyboard">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.ScreenObject.UseKeyboard"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultScreenObjectUseMouse">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.ScreenObject.UseMouse"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ClearColor">
            <summary>
            The color to automatically clear the device with.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ResizeMode">
            <summary>
            The type of resizing options for the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.AllowWindowResize">
            <summary>
            Allow the user to resize the window. Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.UnlimitedFPS">
            <summary>
            Unlimited FPS when rendering (normally limited to 60fps). Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoDraw">
            <summary>
            When true, indicates that the game loop should call <see cref="M:SadConsole.IScreenObject.Render(System.TimeSpan)"/> on each object in <see cref="P:SadConsole.GameHost.Screen"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoFinalDraw">
            <summary>
            When true, indicates that any game framework should render a composed image, of all consoles, to the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoUpdate">
            <summary>
            When true, indicates that the game loop should call <see cref="M:SadConsole.IScreenObject.Update(System.TimeSpan)"/> on each object in <see cref="P:SadConsole.GameHost.Screen"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowMinimumSize">
            <summary>
            When not set to (0,0) this property specifies the minimum size of the game window in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.SerializationIsCompressed">
            <summary>
            When set to true, all loading and saving performed by SadConsole uses GZIP. <see cref="M:SadConsole.GameHost.LoadFont(System.String)"/> does not use this setting and always runs uncompressed.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.UseDefaultExtendedFont">
            <summary>
            When set to true, and a font is not specified with the <see cref="T:SadConsole.GameHost"/>, the IBM 8x16 extended SadConsole font will be used.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowTitle">
            <summary>
            The window title to display when the app is windowed.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.DebuggerPipeId">
            <summary>
            The identifier of the named pipe used to communicate with the in game debugger app.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.AutomaticAddColorsToMappings">
            <summary>
            Automatically adds all of the static color declarations of <see cref="T:SadRogue.Primitives.Color"/> to <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Input">
            <summary>
            Settings related to input.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.ProcessMouseOffscreen">
            <summary>
            Not currently used
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.DoMouse">
            <summary>
            Indicates that the <see cref="T:SadConsole.GameHost"/> should process mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.DoKeyboard">
            <summary>
            Indicates that the <see cref="T:SadConsole.GameHost"/> should process keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.MouseClickTime">
            <summary>
            The maximum amount of time to trigger a mouse click.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.MouseDoubleClickTime">
            <summary>
            The maximum amount of time to trigger a mouse double click.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Rendering">
            <summary>
            Rendering options generally set by a game host.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderWidth">
            <summary>
            The width of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderHeight">
            <summary>
            The height of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderRect">
            <summary>
            Where on the screen the engine will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderScale">
            <summary>
            If the <see cref="P:SadConsole.Settings.Rendering.RenderRect"/> is stretched, this is the ratio difference between unstretched.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.WindowResizeOptions">
            <summary>
            Resize modes for the final SadConsole render pass.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Stretch">
            <summary>
            Stretches the output to fit the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Center">
            <summary>
            Centers output in the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Scale">
            <summary>
            Scales output to fit the window as best as possible while maintaining a good picture.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Fit">
            <summary>
            Fits output to the window using padding to maintain aspect ratio.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.None">
            <summary>
            Output always matches the window.
            </summary>
        </member>
        <member name="T:SadConsole.ShapeParameters">
            <summary>
            Defines the parameters for generating a shape with a border and fill glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.ShapeParameters.#ctor(System.Boolean,SadConsole.ColoredGlyph,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SadConsole.ColoredGlyph,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32[],SadConsole.ColoredGlyph[])">
            <summary>
            
            </summary>
            <param name="hasBorder"></param>
            <param name="borderGlyph"></param>
            <param name="ignoreBorderForeground"></param>
            <param name="ignoreBorderBackground"></param>
            <param name="ignoreBorderGlyph"></param>
            <param name="ignoreBorderMirror"></param>
            <param name="hasFill"></param>
            <param name="fillGlyph"></param>
            <param name="ignoreFillForeground"></param>
            <param name="ignoreFillBackground"></param>
            <param name="ignoreFillGlyph"></param>
            <param name="ignoreFillMirror"></param>
            <param name="boxBorderStyle"></param>
            <param name="boxBorderStyleGlyphs"></param>
        </member>
        <member name="T:SadConsole.SplashScreens.PCBoot">
            <summary>
            A spashscreen that simulates an old computer boot up process.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.PCBoot.#ctor">
            <summary>
            Creates a new instance of this spashscreen.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.PCBoot.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Ends the animation when a key is pressed.
            </summary>
            <param name="keyboard">The keyboard state.</param>
            <returns>The base implementation of the keyboard.</returns>
        </member>
        <member name="T:SadConsole.SplashScreens.Simple">
            <summary>
            A simple splashscreen that fades in a screen specifying "Powered by SadConsole".
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.Simple.#ctor">
            <summary>
            A new instance of this class.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.Simple.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Ends the animation when a key is pressed.
            </summary>
            <param name="keyboard">The keyboard state.</param>
            <returns>The base implementation of the keyboard.</returns>
        </member>
        <member name="T:SadConsole.SplashScreens.SplashScreenManager">
            <summary>
            GameHost use only. Use the <see cref="M:SadConsole.SplashScreens.SplashScreenManager.CheckRun"/> method to show any splash screens after <see cref="F:SadConsole.GameHost.OnStart"/> was called.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.SplashScreenManager.CheckRun">
            <summary>
            Checks if any splash screens have been added with <see cref="M:SadConsole.GameHost.SetSplashScreens(SadConsole.ScreenSurface[])"/>, if so, starts them.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.SplashScreenManager.#ctor">
            <summary>
            Creates a new instance of this type.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.SplashScreenManager.Update(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.StringParser.Default">
            <summary>
            The default string parser.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.Default.CustomProcessor">
            <summary>
            Custom processor called if any built in command is not triggerd. Signature is ("command", "parameters", existing glyphs, text surface, associated editor, command stacks).
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.Default.Parse(System.ReadOnlySpan{System.Char},System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns>The finalized string.</returns>
        </member>
        <member name="T:SadConsole.StringParser.IParser">
            <summary>
            Describes a parser
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.CommandTypes">
            <summary>
            Command type of a <see cref="T:SadConsole.StringParser.ParseCommandBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Foreground">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Foreground"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Background">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Background"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Glyph">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Glyph"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Mirror">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Mirror"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Effect">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Effect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.PureCommand">
            <summary>
            Command runs on creation and is not added to anything in <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Invalid">
            <summary>
            Command is invalid and should not be processed at all.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBase">
            <summary>
            Base class for a string processor behavior.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBase.CommandType">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Builds a glyph.
            </summary>
            <param name="glyphState">The current glyph being built.</param>
            <param name="glyphString">The current string of glyphs that has been processed until now.</param>
            <param name="surfaceIndex">Where on the surface this flyph will appear.</param>
            <param name="surface">The surface associated with the glyph.</param>
            <param name="stringIndex">Where in the original string this glyph is from.</param>
            <param name="processedString">The entire string being processed.</param>
            <param name="commandStack">The state of commands.</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBlink">
            <summary>
            Blinks characters.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBlink.Speed">
            <summary>
            The speed of the blink.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBlink.#ctor(System.String,SadConsole.ColoredGlyph[],SadConsole.StringParser.ParseCommandStacks,SadConsole.ICellSurface)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="glyphString">The string that has been processed so far.</param>
            <param name="commandStack">The current commands for the string.</param>
            <param name="surface">The surface hosting the string.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBlink.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandClearEffect">
            <summary>
            Clears the cell effect for the glyph.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandClearEffect.#ctor(System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="commandStack">The current commands for the string.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandClearEffect.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSetGlyph">
            <summary>
            Prints a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandSetGlyph.Glyph">
            <summary>
            The glyph to set.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandSetGlyph.RandomGlyph">
            <summary>
            Uses a random glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandSetGlyph.RandomGlyphMin">
            <summary>
            The minimum glyph to use with the random glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandSetGlyph.RandomGlyphMax">
            <summary>
            The maximumglyph to use with the random glyph.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandSetGlyph.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandSetGlyph.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandGradient">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandGradient.GradientString">
            <summary>
            The string to apply to the characters.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandGradient.Length">
            <summary>
            The length to apply.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandGradient.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandGradient.#ctor">
            <summary>
            Creates a new instance of this command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandGradient.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandMirror">
            <summary>
            Sets the mirror of a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandMirror.Mirror">
            <summary>
            The mirror mode.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandMirror.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandMirror.#ctor">
            <summary>
            Creates a new instance of this command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandMirror.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandRecolor">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.Default">
            <summary>
            Use the default foreground and background based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepRed">
            <summary>
            Keeps the red channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepGreen">
            <summary>
            Keeps the green channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepBlue">
            <summary>
            Keeps the blue channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepAlpha">
            <summary>
            Keeps the alpha channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.R">
            <summary>
            The current red value
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.G">
            <summary>
            The current green value
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.B">
            <summary>
            The current blue value
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.A">
            <summary>
            The current alpha value
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandRecolor.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandRecolor.#ctor">
            <summary>
            Creates a new instance of this command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandRecolor.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandStacks">
            <summary>
            A list of behaviors applied as a string is processed.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.TurnOnEffects">
            <summary>
            Indicates there is a command that uses effects.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Foreground">
            <summary>
            The commands that affect the foreground.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Background">
            <summary>
            The commands that affect the background.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Glyph">
            <summary>
            The commands that affect the glyph.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Mirror">
            <summary>
            The commands that affect the mirror setting.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Effect">
            <summary>
            The commands that affect the glyph effect.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.All">
            <summary>
            All commands.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.#ctor">
            <summary>
            Creates new stacks of commands.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.AddSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Adds a behavior to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.All"/> collection and the collection 
            based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/> type.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.RemoveSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Removes a command from the appropriate command stack and from the <see cref="P:SadConsole.StringParser.ParseCommandStacks.All"/> stack.
            </summary>
            <param name="command">The command to remove</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandUndo">
            <summary>
            Pops a behavior off of a <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandUndo.#ctor(System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="stacks">The current commands for the string.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandUndo.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.AdjustableColor">
            <summary>
            A color that can be adjusted by brightness and mapped to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.Name">
            <summary>
            The name of the color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.BaseColor">
            <summary>
            The color without brightness.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.ComputedColor">
            <summary>
            The color with brightness applied.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.IsCustomColor">
            <summary>
            <see langword="true"/> when this color is not defined by a <see cref="T:SadConsole.UI.Colors"/> object; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.UIColor">
            <summary>
            The <see cref="T:SadConsole.UI.Colors"/> mapped color when <see cref="P:SadConsole.UI.AdjustableColor.IsCustomColor"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.Brightness">
            <summary>
            A brightness to apply to the color.
            </summary>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.#ctor(SadRogue.Primitives.Color,System.String)">
            <summary>
            Creates a color that isn't mapped to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The color.</param>
            <param name="name">A friendly name of the color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.#ctor(SadRogue.Primitives.Color,System.String,SadConsole.UI.Colors)">
            <summary>
            Creates a color and tries to map it to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The color.</param>
            <param name="name">A friendly name of the color.</param>
            <param name="colors">The colors to try and map to.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.#ctor(SadConsole.UI.Colors.ColorNames,System.String,SadConsole.UI.Colors)">
            <summary>
            Creates a color that maps to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The predefined color.</param>
            <param name="name">A friendly name of the color.</param>
            <param name="colors">The colors used setting the <see cref="P:SadConsole.UI.AdjustableColor.BaseColor"/> value.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.SetUIColor(SadConsole.UI.Colors.ColorNames,SadConsole.UI.Colors,SadConsole.UI.Colors.Brightness)">
            <summary>
            Maps this adjustable color to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The predefined color.</param>
            <param name="colors">The colors used setting the <see cref="P:SadConsole.UI.AdjustableColor.BaseColor"/> value.</param>
            <param name="brightness">The brightness to apply to the color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.SetColor(SadRogue.Primitives.Color,SadConsole.UI.Colors,SadConsole.UI.Colors.Brightness)">
            <summary>
            Tries to map this adjustable color to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The color.</param>
            <param name="colors">The colors to try and map to.</param>
            <param name="brightness">The brightness to apply to the color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.SetColor(SadRogue.Primitives.Color)">
            <summary>
            Configures this adjustable color to the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.RefreshUIColor(SadConsole.UI.Colors)">
            <summary>
            Refreshes <see cref="P:SadConsole.UI.AdjustableColor.BaseColor"/> using <see cref="P:SadConsole.UI.AdjustableColor.UIColor"/> and the provided <see cref="T:SadConsole.UI.Colors" /> object.
            </summary>
            <param name="colors">The colors to pull a color value from.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A new adjustable color object.</returns>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.op_Implicit(SadConsole.UI.AdjustableColor)~SadRogue.Primitives.Color">
            <summary>
            Casts this object to a <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="color">The adjustable color.</param>
        </member>
        <member name="T:SadConsole.UI.Colors">
            <summary>
            Default colors used by control themes.
            </summary>
            <summary>
            Default colors used by control themes.
            </summary>
            <summary>
            Default colors used by control themes.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.IsLibrary">
            <summary>
            Indicates that this color object is set to a library object.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.IsLightTheme">
            <summary>
            Status flag to indicate that the primary backgrounds of the controls are considered light rather than dark.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.White">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Gray">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.GrayDark">
            <summary>
            The dark gray color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Green">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Purple">
            <summary>
            The purple color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Yellow">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Orange">
            <summary>
            The orange color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Cyan">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Brown">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.RedDark">
            <summary>
            The dark red color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.GreenDark">
            <summary>
            The dark green color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.BlueDark">
            <summary>
            The dark blue color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.PurpleDark">
            <summary>
            The dark purple color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.YellowDark">
            <summary>
            The dark yellow color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.OrangeDark">
            <summary>
            The dark orange color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.CyanDark">
            <summary>
            The dark cyan color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.BrownDark">
            <summary>
            The dark brown color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Gold">
            <summary>
            The gold color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.GoldDark">
            <summary>
            The dark gold color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Silver">
            <summary>
            The silver color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.SilverDark">
            <summary>
            The dark silver color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Bronze">
            <summary>
            The bronze color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.BronzeDark">
            <summary>
            The dark bronze color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ModalBackground">
            <summary>
            The color used to darken the background when <see cref="o:UI.Window.Show"/> is called and <see cref="P:SadConsole.UI.Window.IsModal"/> is <see langword="true"/>. Defaults to (20, 20, 20, 200).
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Title">
            <summary>
            Color used for titles.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Lines">
            <summary>
            Color used in drawing lines.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundNormal">
            <summary>
            Color of a control's foreground in normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundDisabled">
            <summary>
            Color of a control's foreground in disabled state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundMouseOver">
            <summary>
            Color of a control's foreground in mouse-over state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundMouseDown">
            <summary>
            Color of a control's foreground in mouse-button-down state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundSelected">
            <summary>
            Color of a control's foreground in selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundFocused">
            <summary>
            Color of a control's foreground in focused state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundNormal">
            <summary>
            Color of a control's background in normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundDisabled">
            <summary>
            Color of a control's background in disabled state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundMouseOver">
            <summary>
            Color of a control's background in normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundMouseDown">
            <summary>
            Color of a control's background in mouse-button-down state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundSelected">
            <summary>
            Color of a control's background in selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundFocused">
            <summary>
            Color of a control's background in focused state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlHostForeground">
            <summary>
            Color of the control host's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlHostBackground">
            <summary>
            Color of the control host's background.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlNormal">
            <summary>
            The appearance of a control when in the normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlDisabled">
            <summary>
            The appearance of a control when in the disabled state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlOver">
            <summary>
            The appearance of a control when in the mouse-over state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlSelected">
            <summary>
            The appearance of a control when in the selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlMouseDown">
            <summary>
            The appearance of a control when in the mouse-down state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlFocused">
            <summary>
            The appearance of a control when in the focused state.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.#ctor">
            <summary>
            Creates a color object based on the <see cref="M:SadConsole.UI.Colors.CreateAnsi"/> scheme.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.#ctor(System.Int32)">
            <summary>
            Internal constructor to avoid creating any predefined colors.
            </summary>
            <param name="_">Discarded parameter</param>
        </member>
        <member name="M:SadConsole.UI.Colors.RebuildAppearances">
            <summary>
            Sets all Appearance* properties based on the existing colors and settings.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.CopyTo(SadConsole.UI.Colors)">
            <summary>
            Copies the colors to another color object.
            </summary>
            <param name="colors">The color object to copy to.</param>
        </member>
        <member name="M:SadConsole.UI.Colors.FromColorName(SadConsole.UI.Colors.ColorNames)">
            <summary>
            Gets a color by enumeration.
            </summary>
            <param name="color">The color to get.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadConsole.UI.Colors.SetColorByName(SadConsole.UI.Colors.ColorNames,SadRogue.Primitives.Color)">
            <summary>
            Sets a named color to a specified value.
            </summary>
            <param name="name">The name of the color.</param>
            <param name="color">The color value.</param>
        </member>
        <member name="M:SadConsole.UI.Colors.TryToColorName(SadRogue.Primitives.Color,SadConsole.UI.Colors.ColorNames@)">
            <summary>
            Tries to get the color name of the specified color.
            </summary>
            <param name="color">The color to match.</param>
            <param name="colorName">Set to the color enumeration value when the <paramref name="color"/> parameter matches a defined color.</param>
            <returns><see langword="true"/> if the specified color matched a defined color name; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Colors.AddToColorMappings">
            <summary>
            Adds each color here to the <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/> dictionary. Uses the format of "theme.property-name".
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>A new Colors object.</returns>
        </member>
        <member name="T:SadConsole.UI.Colors.ColorNames">
            <summary>
            An enumeration of each color name defined by the library colors object.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Colors.Brightness">
            <summary>
            A brightness value that can be applied to a color.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.CreateSadConsoleBlue">
            <summary>
            Creates a new colors object with the default blue colors theme of SadConsole.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Colors.CreateAnsi">
            <summary>
            Creates a new colors object with a standard black-based theme.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SadConsole.UI.ControlHost">
            <summary>
            Adds the ability for a host to contain and display controls from <see cref="N:SadConsole.UI.Controls"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="F:SadConsole.UI.ControlHost.ControlsList">
            <summary>
            The collection of controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.Item(System.Int32)">
            <summary>
            Gets a control by index.
            </summary>
            <param name="index">The index of the control.</param>
            <returns>A control.</returns>
        </member>
        <member name="P:SadConsole.UI.ControlHost.ParentConsole">
            <summary>
            The parent object hosting the controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.ThemeColors">
            <summary>
            Gets or sets the colors to use with drawing the console and controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.IsDirty">
            <summary>
            Indicates that the control host needs to be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.CapturedControl">
            <summary>
            Gets the control currently capturing mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.FocusedControl">
            <summary>
            Gets or sets the control that has keyboard focus.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.ClearOnAdded">
            <summary>
            When <see langword="true"/>, the component will clear the console it's attached to with the theme color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.DisableCursorOnAdded">
            <summary>
            When <see langword="true"/>, the component will disable the cursor of the console it's attached to.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.CanTabToNextConsole">
            <summary>
            When true, allows the tab command to move to the next console (when there is a parent) instead of cycling back to the first control on this console.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.NextTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.UI.ControlHost.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.PreviousTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.UI.ControlHost.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.DisableControlFocusing">
            <summary>
            When set to true, child controls are not alerted to focused and non-focused states.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.Count">
            <summary>
            The total number of controls in this component.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.IsReadOnly">
            <summary>
            Always returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TabNextControl">
            <summary>
            Gives the focus to the next control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TabPreviousControl">
            <summary>
            Gives focus to the previous control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TryTabPreviousConsole">
            <summary>
            Tries to tab to the console that comes before this one in the <see cref="P:SadConsole.IScreenObject.Parent"/> collection of <see cref="P:SadConsole.IScreenObject.Children"/>. Sets focus to the target console if found.
            </summary>
            <returns><see langword="true"/> if the tab was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TryTabNextConsole">
            <summary>
            Tries to tab to the console that comes after this one in the <see cref="P:SadConsole.IScreenObject.Parent"/> collection of <see cref="P:SadConsole.IScreenObject.Children"/>. Sets focus to the target console if found.
            </summary>
            <returns><see langword="true"/> if the tab was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.GetThemeColors">
            <summary>
            Returns the colors assigned to this console or the library default.
            </summary>
            <returns>The found colors.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ToArray">
            <summary>
            Gets an array containing all of the controls this host contains.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.FocusedControlChanging(SadConsole.UI.Controls.ControlBase,SadConsole.UI.Controls.ControlBase)">
            <summary>
            When overridden, allows you to prevent a control from taking focus from another control.
            </summary>
            <param name="newControl">The control requesting focus.</param>
            <param name="oldControl">The control that has focus.</param>
            <returns>True when the focus change is allowed; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.FocusedControlChanged(SadConsole.UI.Controls.ControlBase,SadConsole.UI.Controls.ControlBase)">
            <summary>
            This method is called when a control gains focus.
            </summary>
            <param name="newControl">The control that has focus.</param>
            <param name="oldControl">The control that previously had focus.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ReOrderControls">
            <summary>
            Reorders the control collection based on the tab index of each control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Surface_MouseExit(System.Object,SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.ControlHost.CaptureControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Captures a control for exclusive mouse focus. Sets the ExclusiveMouse property to true.
            </summary>
            <param name="control">The control to capture</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ReleaseControl">
            <summary>
            Releases the control from exclusive mouse focus. Sets the ExclusiveMouse property to false and sets the CapturedControl property to null.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ForceRedrawAllControls">
            <summary>
            Forces each control to dirty so that the next frame will redraw each control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.IndexOf(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Gets the index of the specified control.
            </summary>
            <param name="item">The control.</param>
            <returns>The index of the control in the backing collection.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Insert(System.Int32,SadConsole.UI.Controls.ControlBase)">
            <summary>
            Inserts an item at the specified index and sets the <see cref="P:SadConsole.UI.Controls.ControlBase.TabIndex"/> to the specified index.
            </summary>
            <remarks>Index within the backing collection is always based on <see cref="P:SadConsole.UI.Controls.ControlBase.TabIndex"/> ranking. There may be conflicts so you're not guaranteed that the control will be available at the specified index.</remarks>
            <param name="index">Index to insert at.</param>
            <param name="item">The control to insert.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.RemoveAt(System.Int32)">
            <summary>
            Removes a control by index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Add(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Adds an existing control to this console.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Clear">
            <summary>
            Removes all controls from this console.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Contains(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Checks if the specified control exists in this console.
            </summary>
            <param name="control">The control to check.</param>
            <returns>True when the control exists in this console; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.CopyTo(SadConsole.UI.Controls.ControlBase[],System.Int32)">
            <summary>
            Copies the controls to a new array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The starting index of where to copy the controls in the destination array.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Remove(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Removes a control from this console.
            </summary>
            <param name="control">The control to remove.</param>
            <returns><see langword="true"/> if item was successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if item is not found.</returns>
        </member>
        <member name="T:SadConsole.UI.ControlsConsole">
            <summary>
            A basic console that can contain controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlsConsole.Controls">
            <summary>
            The controls host holding all the controls.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the console in cells.</param>
            <param name="height">The visible height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the console in cells.</param>
            <param name="height">The height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
            <param name="initialCells">The cells to seed the console with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new console using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.ToString">
            <summary>
            Returns the value "Console (Controls)".
            </summary>
            <returns>The string "Console (Controls)".</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.Button">
            <summary>
            Simple button control with a height of 1.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Button.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ButtonBase">
            <summary>
            Base class for creating a button type control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ButtonBase.Click">
            <summary>
            Raised when the button is clicked.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ButtonBase._text">
            <summary>
            The display text of the button.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ButtonBase._textAlignment">
            <summary>
            The alignment of the <see cref="F:SadConsole.UI.Controls.ButtonBase._text"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ButtonBase.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ButtonBase.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new button control.
            </summary>
            <param name="width">Width of the button.</param>
            <param name="height">Height of the button.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnClick">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.ButtonBase.Click"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.InvokeClick">
            <summary>
            Simulates a mouse click on the button.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Detects if the SPACE or ENTER keys are pressed and calls the <see cref="E:SadConsole.UI.Controls.ButtonBase.Click"/> method.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnMouseExit(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Controls.CheckBox">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new checkbox control with the specified width and height.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.OnClick">
            <summary>
            Perfroms a click on the base button and also toggles the <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> property.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.CompositeControl">
            <summary>
            Base class for controls that host and render other controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CompositeControl.Controls">
            <summary>
            The controls this composite control is hosting. Use <see cref="M:SadConsole.UI.Controls.CompositeControl.AddControl(SadConsole.UI.Controls.ControlBase)"/> and <see cref="M:SadConsole.UI.Controls.CompositeControl.RemoveControl(SadConsole.UI.Controls.ControlBase)"/> to manage the collection.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new control with the specified width and height.
            </summary>
            <param name="width">Width of the control in cells.</param>
            <param name="height">Height of the control in cells.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.CreateChildControls">
            <summary>
            Create each control and add it to <see cref="P:SadConsole.UI.Controls.CompositeControl.Controls"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.IsDirtyEventHandler(System.Boolean)">
            <summary>
            A handler to forward state to <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Processes the mouse on each control hosted by this control.
            </summary>
            <param name="state">The mouse state based on the parent screen object.</param>
            <returns><see langword="true"/> when a control processes the mouse; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.AddControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Adds a child control to this control. <see cref="M:SadConsole.UI.Controls.IContainer.Add(SadConsole.UI.Controls.ControlBase)"/> does't work on the <see cref="T:SadConsole.UI.Controls.CompositeControl"/>.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.RemoveControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Removes a child control from this control. <see cref="M:SadConsole.UI.Controls.IContainer.Remove(SadConsole.UI.Controls.ControlBase)"/> does't work on the <see cref="T:SadConsole.UI.Controls.CompositeControl"/>.
            </summary>
            <param name="control">The control to remove.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.Update(System.TimeSpan)">
            <summary>
            Updates each control hosted by this control.
            </summary>
            <param name="time">The game frame time delta.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ControlBase">
            <summary>
            Base class for all controls.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_IsMouseOver">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseEnter(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the mouse is over the bounds defined by <see cref="P:SadConsole.UI.Controls.ControlBase.MouseArea"/> .
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_EnteredWithButtonDown">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseEnter(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the mouse entered the control's bounds with the mouse button down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_IsMouseLeftDown">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the left mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_IsMouseRightDown">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the right mouse button is down.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.IsDirtyChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.UseKeyboard">
            <summary>
            <see langword="true"/> to allow this control to respond to keyboard interactions when focused.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.UseMouse">
            <summary>
            <see langword="true"/> to allow this control to respond to mouse interactions.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.CanFocus">
            <summary>
            <see langword="true"/> to indicate this control can be focused, generally by clicking on the control or tabbing with the keyboard. Otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.CanResize">
            <summary>
            When <see langword="true"/>, indicates that this control can be resized with the <see cref="M:SadConsole.UI.Controls.ControlBase.Resize(System.Int32,System.Int32)"/> method; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.AlternateFont">
            <summary>
            An alternate font used to render this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Surface">
            <summary>
            The cell data to render the control. Controlled by a theme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.MouseArea">
            <summary>
            The relative region the of the control used for mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsMouseButtonStateClean">
            <summary>
            When <see langword="true"/>, indicates the mouse button state has only been set with this control and not another; othwerise <see langword="false"/>.
            </summary>
            <remarks>
            This property is only set when the mouse enters the control with the buttons pressed. Once the buttons are let go, the mouse is considered clean for this control.
            </remarks>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Position">
            <summary>
            The relative position of this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.AbsolutePosition">
            <summary>
            Gets the position of this control based on the control's <see cref="P:SadConsole.UI.Controls.ControlBase.Position"/> and the position of the <see cref="P:SadConsole.UI.Controls.ControlBase.Parent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsVisible">
            <summary>
            Indicates whether or not this control is visible.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Tag">
            <summary>
            A user-definable data object.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.TabStop">
            <summary>
            Indicates whether or not this control can be tabbed to.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.TabIndex">
            <summary>
            Sets the tab index of this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsDirty">
            <summary>
            Indicates whether or not this control is dirty and should be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Name">
            <summary>
            Represents a name to identify a control by.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.FocusOnClick">
            <summary>
            Gets or sets whether or not this control will become focused when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Width">
            <summary>
            The width of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Height">
            <summary>
            The height of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsFocused">
            <summary>
            Gets or sets whether or not this control is focused.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsEnabled">
            <summary>
            Gets or sets whether or not this control is enabled.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Bounds">
            <summary>
            The area this control covers.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Parent">
            <summary>
            Gets or sets the parent console of this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Theme">
            <summary>
            The custom theme to use with this control. If set to <see langword="null"/>, will use the theme assigned by the <see cref="P:SadConsole.UI.Controls.ControlBase.Parent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsCustomTheme">
            <summary>
            When <see langword="true"/>, indicates the control has a custom theme assigned to it; othwerise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.State">
            <summary>
            The state of the control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseEnter">
            <summary>
            Raised when the mouse enters this control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseExit">
            <summary>
            Raised when the mouse exits this control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseMove">
            <summary>
            Raised when the mouse is moved over this control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseButtonClicked">
            <summary>
            Raised when a mouse button is clicked while the mouse is over this control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Creates a control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.FocusLost">
            <summary>
            Called when the control loses focus. Calls DetermineAppearance.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.Focused">
            <summary>
            Called when the control is focused. Calls DetermineAppearance.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnThemeChanged">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ControlBase.Theme"/> changes.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the keyboard is used on this control.
            </summary>
            <param name="state">The state of the keyboard.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Checks if the mouse is the control and calls the appropriate mouse methods.
            </summary>
            <param name="state">Mouse information.</param>
            <returns>True when the control is enabled, set to use the mouse and the mouse is over it, otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Called to trigger the state of losing mouse focus.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnParentChanged">
            <summary>
            Called when the parent property is changed.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnPositionChanged">
            <summary>
            Called when the control changes position.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.PlaceRelativeTo(SadConsole.UI.Controls.ControlBase,SadRogue.Primitives.Direction.Types,System.Int32)">
            <summary>
            Places this control relative to another, taking into account the bounds of the control.
            </summary>
            <param name="control">The other control to place this one relative to.</param>
            <param name="direction">The direction this control should be placed.</param>
            <param name="padding">Additional space between the controls after placement.</param>
            <remarks>If this control hasn't been added to the parent of <paramref name="control"/>, it will be added.</remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.DetermineState">
            <summary>
            Sets the appropriate theme for the control based on the current state of the control.
            </summary>
            <remarks>Called by the control as the mouse state changes, like when the mouse is clicked on top of the control or leaves the area of the control. This method is implemented by each derived control.</remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnStateChanged(SadConsole.UI.Controls.ControlStates,SadConsole.UI.Controls.ControlStates)">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ControlBase.State"/> changes. Sets the <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> to true.
            </summary>
            <param name="oldState">The original state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.FindThemeColors">
            <summary>
            Returns the colors assigned to this control, the parent, or the library default.
            </summary>
            <returns>The found colors.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.SetThemeColors(SadConsole.UI.Colors)">
            <summary>
            Sets the theme colors used by this control. When <see langword="null"/>, indicates this control should read the theme colors from the parent.
            </summary>
            <param name="value">The colors to use with this control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.HasThemeColors">
            <summary>
            When <see langword="true"/>, indicates the control has custom theme colors assigned to it; othwerise <see langword="false"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.Resize(System.Int32,System.Int32)">
             <summary>
             Resizes the control if the <see cref="P:SadConsole.UI.Controls.ControlBase.CanResize"/> property is <see langword="true"/>.
             </summary>
             <remarks>
             When overriding this method, to perhaps restrict the requested size, make sure to do the following:
            
             - Check if the <see cref="P:SadConsole.UI.Controls.ControlBase.CanResize"/> property allows resizing. If it doesn't, throw an <see cref="T:System.InvalidOperationException"/>.
             - The <see cref="F:SadConsole.UI.Controls.ControlBase._width"/> and <see cref="F:SadConsole.UI.Controls.ControlBase._height"/> variables of the control are set to the values provided.
             - The <see cref="P:SadConsole.UI.Controls.ControlBase.MouseArea"/> property is set to the same width and height as values provided. Generally the theme will adjust this if needed, but it might ignore this so you'll need to set it.
             - The <see cref="P:SadConsole.UI.Controls.ControlBase.Theme"/>, if set, is reattached by calling <see cref="M:SadConsole.UI.Themes.ThemeBase.Attached(SadConsole.UI.Controls.ControlBase)"/>.
             - Set <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> to <see langword="true"/>.
             </remarks>
             <param name="width">The desired width of the control.</param>
             <param name="height">The desired height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnMouseEnter(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the mouse first enters the control. Raises the MouseEnter event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnMouseExit(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the mouse exits the area of the control. Raises the MouseExit event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called as the mouse moves around the control area. Raises the MouseMove event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the left mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnRightMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the right mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.Update(System.TimeSpan)">
            <summary>
            Update the control appearance based on <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> and <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/>.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.ControlBase.ControlMouseState">
            <summary>
            Mouse state based on a specific control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.Control">
            <summary>
            The control this mouse state is associated with.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.MousePosition">
            <summary>
            The relative position of the mouse to the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.OriginalMouseState">
            <summary>
            The original mouse state used to generate the event.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.IsMouseOver">
            <summary>
            When <see langword="true"/>, indicates the mouse is over the <see cref="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.Control"/>; othwerise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ControlMouseState.#ctor(SadConsole.UI.Controls.ControlBase,SadRogue.Primitives.Point,SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Creates an instance of the mouse control state class.
            </summary>
            <param name="control">The control.</param>
            <param name="mousePosition">The position of the mouse relative to the control.</param>
            <param name="originalMouseState">The original mouse state sent to the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ControlMouseState.#ctor(SadConsole.UI.Controls.ControlBase,SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Creates an instance of the mouse control state class and infers the <see cref="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.MousePosition"/> from the control and state.
            </summary>
            <param name="control">The control.</param>
            <param name="originalMouseState">The original mouse state sent to the control.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ControlStates">
            <summary>
            Indicates the state of a control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Normal">
            <summary>
            Normal state. 
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Disabled">
            <summary>
            The control is disabled.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Focused">
            <summary>
            The control has focus.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Clicked">
            <summary>
            The control is selected
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.MouseOver">
            <summary>
            The mouse is over the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.MouseLeftButtonDown">
            <summary>
            The left mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.MouseRightButtonDown">
            <summary>
            The Right mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Selected">
            <summary>
            THe control is selected
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.DrawingArea">
            <summary>
            A simple surface for drawing text that can be moved and sized like a control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.DrawingArea.OnDraw">
            <summary>
            Called when the surface is redrawn.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.DrawingArea.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.IContainer">
            <summary>
            A simple container for controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.IContainer.AbsolutePosition">
            <summary>
            Gets the position of the container based on any parents position.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.IContainer.Host">
            <summary>
            The host owning this container.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.IContainer.Add(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Adds a control to this container.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.IContainer.Remove(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Removes a control from this container.
            </summary>
            <param name="control">The control.</param>
            <returns><see langword="true"/> if item was successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if item is not found.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.IContainer.Contains(SadConsole.UI.Controls.ControlBase)">
            <summary>
            <see langword="true"/> when the control exists in the container; otherwise, <see langword="false"/>.
            </summary>
            <param name="control">The control to find.</param>
            <returns>A value to indicate if this control is in this container.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.Label">
            <summary>
            A simple surface for drawing text that can be moved and sized like a control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.ShowUnderline">
            <summary>
            When <see langword="true"/>, shows an underline on the text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.ShowStrikethrough">
            <summary>
            When <see langword="true"/>, shows a strikethrough on the text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.TextColor">
            <summary>
            Optional text color for the label. Otherwise the theme controls the color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.Alignment">
            <summary>
            Sets the horizontal alignment of the label. Defaults to <see cref="F:SadConsole.HorizontalAlignment.Left"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.DisplayText">
            <summary>
            The text to display on the label. The label size is set in the constructor and cannot be changed.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.#ctor(System.String)">
            <summary>
            A control to display simple one-line text.
            </summary>
            <param name="displayText">The text to display. Sets the width based on the length.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.#ctor(System.Int32)">
            <summary>
            A control to display simple one-line text.
            </summary>
            <param name="length">The initial length of the label without any text.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the label but forces a height of 1.
            </summary>
            <param name="width">The width of the label.</param>
            <param name="height">Not used.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ListBox">
            <summary>
            A scrollable list control.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.ListBox.SelectedItemEventArgs">
            <summary>
            The event args used when the selected item changes.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ListBox.SelectedItemEventArgs.Item">
            <summary>
            The item selected.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.SelectedItemEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of this type with the specified item.
            </summary>
            <param name="item">The selected item from the list.</param>
        </member>
        <member name="E:SadConsole.UI.Controls.ListBox.SelectedItemChanged">
            <summary>
            An event that triggers when the <see cref="P:SadConsole.UI.Controls.ListBox.SelectedItem"/> changes.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ListBox.SelectedItemExecuted">
            <summary>
            An event that triggers when an item is double clicked or the Enter key is pressed while the listbox has focus.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.ItemTheme">
            <summary>
            The theme used by the listbox items.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.IsScrollBarVisible">
            <summary>
            Internal use only; used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.ScrollBar">
            <summary>
            Used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.RelativeIndexMouseOver">
            <summary>
            Used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.VisibleItemsTotal">
            <summary>
            The total items visible in the listbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.VisibleItemsMax">
            <summary>
            The maximum amount of items that can be shown in the listbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.CompareByReference">
            <summary>
            When the <see cref="P:SadConsole.UI.Controls.ListBox.SelectedItem"/> changes, and this property is true, objects will be compared by reference. If false, they will be compared by value.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.SingleClickItemExecute">
            <summary>
            When set to <see langword="true"/>, the <see cref="E:SadConsole.UI.Controls.ListBox.SelectedItemExecuted"/> event will fire when an item is single-clicked instead of double-clicked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.Items">
            <summary>
            The items in the listbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the listbox control with the default theme for the items.
            </summary>
            <param name="width">The width of the listbox.</param>
            <param name="height">The height of the listbox.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.#ctor(System.Int32,System.Int32,SadConsole.UI.Themes.ListBoxItemTheme)">
            <summary>
            Creates a new instance of the listbox control with the specified item theme.
            </summary>
            <param name="width">The width of the listbox.</param>
            <param name="height">The height of the listbox.</param>
            <param name="itemTheme">The theme to use with rendering the listbox items.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnSelectedItemChanged">
            <summary>
            Invokes the <see cref="E:SadConsole.UI.Controls.ListBox.SelectedItemChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnItemAction">
            <summary>
            Invokes the <see cref="E:SadConsole.UI.Controls.ListBox.SelectedItemExecuted"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.SetupScrollBar(SadConsole.Orientation,System.Int32,SadRogue.Primitives.Point)">
            <summary>
            Configures the associated <see cref="P:SadConsole.UI.Controls.ListBox.ScrollBar"/>.
            </summary>
            <param name="orientation">The orientation of the scrollbar.</param>
            <param name="sizeValue">The size of the scrollbar.</param>
            <param name="position">The position of the scrollbar.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.ScrollToSelectedItem">
            <summary>
            Scrolls the list to the item currently selected.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnThemeChanged">
            <summary>
            Sets the scrollbar's theme to the current theme's <see cref="F:SadConsole.UI.Themes.ListBoxTheme.ScrollBarTheme"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Controls.Panel">
            <summary>
            A control container that processes the mouse on each child. <see cref="P:SadConsole.UI.Controls.ControlBase.TabStop"/> defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.Controls">
            <summary>
            The controls this panel contains.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.Host">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Add(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Remove(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Contains(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Update(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.OnMouseExit(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the controls in this panel.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the controls in this panel.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.ProgressBar">
            <summary>
            A control that fills an area (vertical or horizontal) according to a value.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ProgressBar.ProgressChanged">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ProgressBar.Progress"/> property value changes.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.progressValue">
            <summary>
            The progress bar fill value. Between 0f and 1f.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.controlSize">
            <summary>
            The size of the bar.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.fillSize">
            <summary>
            For theme use only. The size of the bar currently filled based on the <see cref="P:SadConsole.UI.Controls.ProgressBar.Progress"/> property.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.isHorizontal">
            <summary>
            Flag to indicate this bar was created horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.horizontalAlignment">
            <summary>
            The alignment if the bar is horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.verticalAlignment">
            <summary>
            The alignment if the bar is vertical.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayText">
            <summary>
            An optional text to display on the bar. If set to <c>"%"</c>, displays the percentage of the progress.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayTextColor">
            <summary>
            The color to print the <see cref="P:SadConsole.UI.Controls.ProgressBar.DisplayText"/> string.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayTextAlignment">
            <summary>
            Alignment to print the <see cref="P:SadConsole.UI.Controls.ProgressBar.DisplayText"/>. <see cref="F:SadConsole.HorizontalAlignment.Stretch"/> is invalid for the property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.HorizontalAlignment">
            <summary>
            The horizontal orientation used when <see cref="P:SadConsole.UI.Controls.ProgressBar.IsHorizontal"/> is set to true.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:SadConsole.HorizontalAlignment.Center"/> or <see cref="F:SadConsole.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.VerticalAlignment">
            <summary>
            The vertical orientation used when <see cref="P:SadConsole.UI.Controls.ProgressBar.IsHorizontal"/> is set to false.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:SadConsole.VerticalAlignment.Center"/> or <see cref="F:SadConsole.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.IsHorizontal">
            <summary>
            When true, the progress bar uses the <see cref="P:SadConsole.UI.Controls.ProgressBar.HorizontalAlignment"/> property to determine the starting fill direction. When false, uses the <see cref="P:SadConsole.UI.Controls.ProgressBar.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.Progress">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.#ctor(System.Int32,System.Int32,SadConsole.HorizontalAlignment)">
            <summary>
            Creates a new horizontal progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="horizontalAlignment">Sets the control to be horizontal, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="horizontalAlignment"/> is set to either <see cref="F:SadConsole.HorizontalAlignment.Center"/> or <see cref="F:SadConsole.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.#ctor(System.Int32,System.Int32,SadConsole.VerticalAlignment)">
            <summary>
            Creates a new vertical progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="verticalAlignment">Sets the control to be vertical, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="verticalAlignment"/> is set to either <see cref="F:SadConsole.VerticalAlignment.Center"/> or <see cref="F:SadConsole.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.RadioButton">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.GroupName">
            <summary>
            The group of the radio button. All radio buttons with the same group name will work together to keep one radio button selected at a time.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new radio button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.OnClick">
            <summary>
            Perfroms a click on the base button and also toggles the <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.OnIsSelected">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.ToggleButtonBase.IsSelectedChanged"/> event and when <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> is <see langword="true"/>, deselects any other <see cref="T:SadConsole.UI.Controls.RadioButton"/> with the same <see cref="P:SadConsole.UI.Controls.RadioButton.GroupName"/>.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.ScrollBar">
            <summary>
            Represents a scrollbar control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ScrollBar.ValueChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> property changes.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Orientation">
            <summary>
            Indicates if the scroll bar is horizontal or veritcal.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.SliderBarSize">
            <summary>
            Used by the theme. The size of the slider bar portion.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.CurrentSliderPosition">
            <summary>
            Used by the theme. The position of the slider glyph in the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.IsSliding">
            <summary>
            When <see langword="true"/>, indicates this control is captured and the slider button is being used; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Value">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum value for the scrollbar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Minimum">
            <summary>
            Reserved for future use. This is always 0.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Step">
            <summary>
            Gets or sets the amount of values to add or substract to the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> when the up or down arrows are used.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.#ctor(SadConsole.Orientation,System.Int32)">
            <summary>
            Creates a new ScrollBar control.
            </summary>
            <param name="orientation">Sets the control to either horizontal or vertical.</param>
            <param name="size">The height or width of the control.</param>
            <returns>The new control instance.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.Resize(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Not Used.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:SadConsole.UI.Controls.SelectionButton">
            <summary>
            Provides a button-like control that changes focus to a designated previous or next selection button when the arrow keys are pushed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SelectionButton.PreviousSelection">
            <summary>
            The selection button to focus when the UP key is pressed or the SelectPrevious() method is called.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SelectionButton.NextSelection">
            <summary>
            The selection button to focus when the DOWN key is pressed or the SelectNext() method is called.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Selection Button with a specific width and height.
            </summary>
            <param name="width">The width of the selection button.</param>
            <param name="height">The height of the selection button.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.SetNextSelection(SadConsole.UI.Controls.SelectionButton@,System.Boolean)">
            <summary>
            Sets the next selection button and optionally sets the previous of the referenced selection to this button.
            </summary>
            <param name="nextSelection">The selection button to be used as next.</param>
            <param name="setPreviousOnNext">Sets the PreviousSelection property on the <paramref name="nextSelection"/> instance to current selection button. Defaults to true.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Focuses the previous or next selection button depending on if the UP or DOWN arrow keys were pressed.
            </summary>
            <param name="info">The keyboard state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.SelectPrevious">
            <summary>
            Selects the previous selection button.
            </summary>
            <returns>Returns the previous selection button.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.SelectNext">
            <summary>
            Selects the next selection button.
            </summary>
            <returns>Returns the next selection button.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.SurfaceViewer">
            <summary>
            Draws a <see cref="T:SadConsole.ICellSurface"/> within an area. Optionally supports scroll bars.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes">
            <summary>
            Determines how the control draws the scroll bars.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes.Always">
            <summary>
            Always draw the scroll bars on the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes.Never">
            <summary>
            Never show the scroll bars on the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes.AsNeeded">
            <summary>
            Display the scroll bars if needed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SurfaceViewer.ScrollBarMode">
            <summary>
            Sets the visual behavior of the scroll bars for the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SurfaceViewer.ChildSurface">
            <summary>
            The surface rendered on this control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.HorizontalScroller">
            <summary>
            The horizontal scroll bar. This shouldn't be changed.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.VerticalScroller">
            <summary>
            The vertical scroll bar. This shouldn't be changed.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.SurfaceControl">
            <summary>
            A control that displays the view area of the <see cref="P:SadConsole.UI.Controls.SurfaceViewer.ChildSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.#ctor(System.Int32,System.Int32,SadConsole.ICellSurface)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="surface">The surface to view.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.SetSurface(SadConsole.ICellSurface)">
            <summary>
            Sets the surface for the view.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.ResetSurface">
            <summary>
            Resets 
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Processes the mouse for the scrollers and then the surface area.
            </summary>
            <param name="state">The state of the mouse.</param>
            <returns><see langword="true"/> when the mouse was processed by a scroller or the surface area.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.TextBox">
            <summary>
            InputBox control that allows text input.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.Mask">
            <summary>
            Mask input with a certain character.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox.IsCaretVisible">
            <summary>
            Indicates the caret is visible.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._validNumbers">
            <summary>
            A list of valid number characters
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._alignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.LeftDrawOffset">
            <summary>
            When editing the text box, this allows the text to scroll to the right so you can see what you are typing.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._caretPos">
            <summary>
            The location of the caret.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._text">
            <summary>
            The text value of the input box.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._isNumeric">
            <summary>
            Indicates the input box is numeric only.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._allowDecimalPoint">
            <summary>
            Indicates that the input box (when numeric) will accept decimal points.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._currentAppearance">
            <summary>
            The current appearance of the control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.EditModeEnter">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.TextBox.DisableKeyboard"/> property changes to <see langword="true"/>, causing the textbox to accept keyboard input.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.EditModeExit">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.TextBox.DisableKeyboard"/> property changes to <see langword="false"/>.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.EditingTextChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.TextBox.EditingText"/> property changes while the textbox is being typed in.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.TextChanged">
            <summary>
            Raised when the text has changed and the preview has accepted it.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.TextChangedPreview">
            <summary>
            Raised before the text has changed and allows the change to be cancelled.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.KeyPressed">
            <summary>
            Raised when a key is pressed on the textbox.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox.DisableMouse">
            <summary>
            Disables mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.DisableKeyboard">
            <summary>
            Disables the keyboard which turns off keyboard input and hides the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.EditingText">
            <summary>
            A temp holder for the text as it's being edited.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.TextAlignment">
            <summary>
            The alignment of the caret.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.MaxLength">
            <summary>
            How big the text can be. Setting this to 0 will make it unlimited.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.CaretPosition">
            <summary>
            Gets or sets the position of the caret in the current text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.Text">
            <summary>
            Gets or sets the text of the input box.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.IsNumeric">
            <summary>
            Gets or sets whether or not this input box only allows numeric input.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.AllowDecimal">
            <summary>
            Gets or sets whether or not this input box should restrict numeric input should allow a decimal point.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the input box.
            </summary>
            <param name="width">The width of the input box.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.Resize(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.Validate">
            <summary>
            Validates that the value of the input box conforms to the settings of this control and sets the dirty flag to true.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.ValidateCursorPosition">
            <summary>
            Correctly positions the cursor within the text.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.FocusLost">
            <summary>
            Called when the control loses focus.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.Focused">
            <summary>
            Called when the control is focused.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Focuses the control and enters typing mode.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.TextBox.TextChangedEventArgs">
            <summary>
            Event arguments that indicate the change in text for a textbox control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox.TextChangedEventArgs.OldValue">
            <summary>
            The original text value.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.TextChangedEventArgs.NewValue">
            <summary>
            The new text of the textbox.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.TextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new event args object.
            </summary>
            <param name="oldValue">The original value of the text.</param>
            <param name="newValue">The value the text is chaning to.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.TextBox.KeyPressEventArgs">
            <summary>
            Event arguments to indicate that a key is being pressed on the textbox.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox.KeyPressEventArgs.Key">
            <summary>
            The key being pressed by the textbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.KeyPressEventArgs.IsCancelled">
            <summary>
            When set to <see langword="true"/>, causes the textbox to cancel the key press.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.KeyPressEventArgs.#ctor(SadConsole.Input.AsciiKey)">
            <summary>
            Creates a new event args object.
            </summary>
            <param name="key">The key being pressed.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ToggleButtonBase">
            <summary>
            Base class for toggle button controls, such as <see cref="T:SadConsole.UI.Controls.CheckBox"/> and <see cref="T:SadConsole.UI.Controls.RadioButton"/>.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ToggleButtonBase.IsSelectedChanged">
            <summary>
            Raised when the selected state of the radio button is changed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected">
            <summary>
            Gets or sets the selected state of the radio button.
            </summary>
            <remarks>Radio buttons within the same group will set their IsSelected property to the opposite of this radio button when you set this property.</remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleButtonBase.OnIsSelected">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.ToggleButtonBase.IsSelectedChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleButtonBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="T:SadConsole.UI.Themes.Button3dTheme">
            <summary>
            A 3D shadow theme of the button control
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.Button3dTheme._shade">
            <summary>
            The shaded area appearance.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.Button3dTheme.Attached(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.Button3dTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.Button3dTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.Button3dTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.ButtonLinesTheme">
            <summary>
            A 3D theme of the button control using thin lines. Supports the SadConsole extended character set.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ButtonLinesTheme.UseExtended">
            <summary>
            When <see langword="true"/>, indicates that the lines of the theme should use the extended SadConsole font characters if available.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonLinesTheme.#ctor">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonLinesTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonLinesTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonLinesTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.ButtonTheme">
            <summary>
            The theme of the button control
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ButtonTheme.ShowEnds">
            <summary>
            When true, renders the "end" glyphs on the button.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ButtonTheme.LeftEndGlyph">
            <summary>
            The theme state used with the left end of the button.Defaults to '&lt;'.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ButtonTheme.RightEndGlyph">
            <summary>
            The theme state used with the right end of the button. Defaults to '>'.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ButtonTheme.EndsThemeState">
            <summary>
            The theme state used with the left end of the button.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonTheme.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new button theme with the specified left and right brackets.
            </summary>
            <param name="leftEndGlyph">Specified the left end. Defaults to '$lt;'.</param>
            <param name="rightEndGlyph">Specified the right bracket. Defaults to '>'.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ButtonTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.CheckBoxTheme">
            <summary>
            The theme of a checkbox control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.LeftBracketGlyph">
            <summary>
            The glyph for the left-side bracket of the icon.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.RightBracketGlyph">
            <summary>
            The glyph for the right-side bracket of the icon.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.CheckedIconGlyph">
            <summary>
            The glyph of the icon when checked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.UncheckedIconGlyph">
            <summary>
            The glyph of the icon when unchecked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.CheckedIconColor">
            <summary>
            An optional color of the <see cref="P:SadConsole.UI.Themes.CheckBoxTheme.CheckedIconGlyph"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.UncheckedIconColor">
            <summary>
            An optional color of the <see cref="P:SadConsole.UI.Themes.CheckBoxTheme.UncheckedIconGlyph"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.BracketsThemeState">
            <summary>
            The theme state used with the brackets.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.CheckBoxTheme.IconThemeState">
            <summary>
            The theme state used with the icon of the checkbox.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.CheckBoxTheme.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new checkbox theme with an optional bracket and check icon.
            </summary>
            <param name="leftBracketGlyph">The left bracket of the checkbox icon. Defaults to '['.</param>
            <param name="rightBracketGlyph">The right bracket of the checkbox icon. Defaults to ']'.</param>
            <param name="checkedGlyph">The checkbox checked icon. Defaults to 251'√'.</param>
            <param name="uncheckedGlyph">The checkbox unchecked icon. Defaults to 0.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.CheckBoxTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.CheckBoxTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.CheckBoxTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.DrawingAreaTheme">
            <summary>
            A basic theme for a drawing surface that simply fills the surface based on the state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.DrawingAreaTheme.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="P:SadConsole.UI.Themes.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.DrawingAreaTheme.Appearance">
            <summary>
            The current appearance based on the control state.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.DrawingAreaTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.DrawingAreaTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.LabelTheme">
            <summary>
            A basic theme for a drawing surface that simply fills the surface based on the state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.LabelTheme.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="P:SadConsole.UI.Themes.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.LabelTheme.DecoratorUnderline">
            <summary>
            The decorator to use when the <see cref="P:SadConsole.UI.Controls.Label.ShowUnderline"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.LabelTheme.DecoratorStrikethrough">
            <summary>
            The decorator to use when the <see cref="P:SadConsole.UI.Controls.Label.ShowStrikethrough"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.LabelTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.LabelTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.Library">
            <summary>
            The library of themes. Holds the themes of all controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.Library.Default">
            <summary>
            If a control does not specify its own theme, the theme from this property will be used.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.Library.Colors">
            <summary>
            Colors for the theme library.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.Library.ApplyDefaults">
            <summary>
            Seeds the library with the default themes.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.Library.#ctor">
            <summary>
            Creates a new instance of the theme library with default themes.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.Library.GetControlTheme(System.Type)">
            <summary>
            Creates and returns a theme based on the type of control provided.
            </summary>
            <param name="control">The control type.</param>
            <returns>A theme that is associated with the control.</returns>
        </member>
        <member name="M:SadConsole.UI.Themes.Library.SetControlTheme(System.Type,SadConsole.UI.Themes.ThemeBase)">
            <summary>
            Sets a control theme based on the control type.
            </summary>
            <param name="control">The control type to register a theme.</param>
            <param name="theme">The theme to associate with the control.</param>
            <returns>A theme that is associated with the control.</returns>
        </member>
        <member name="M:SadConsole.UI.Themes.Library.SetColors(SadConsole.UI.Colors)">
            <summary>
            Copies the colors from the specified <see cref="T:SadConsole.UI.Colors"/> object to <see cref="P:SadConsole.UI.Themes.Library.Colors"/> property.
            </summary>
            <param name="colors">The colors to copy.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.Library.Clone">
            <summary>
            Clones this library.
            </summary>
            <returns>A new instance of a library.</returns>
        </member>
        <member name="T:SadConsole.UI.Themes.ListBoxTheme">
            <summary>
            The theme for a ListBox control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ListBoxTheme._reconfigureSrollBar">
            <summary>
            Internal flag to indicate the scroll bar needs to be reconfigured.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ListBoxTheme.BorderTheme">
            <summary>
            The drawing theme for the boarder when <see cref="P:SadConsole.UI.Themes.ListBoxTheme.DrawBorder"/> is true.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ListBoxTheme.BorderLineStyle">
            <summary>
            The line style for the border when <see cref="P:SadConsole.UI.Themes.ListBoxTheme.DrawBorder"/> is true.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ListBoxTheme.DrawBorder">
            <summary>
            If false the border will not be drawn.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ListBoxTheme.ScrollBarTheme">
            <summary>
            The appearance of the scrollbar used by the listbox control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.#ctor(SadConsole.UI.Themes.ScrollBarTheme)">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.UI.Controls.ListBox"/>.
            </summary>
            <param name="scrollBarTheme">The theme to use to draw the scroll bar.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.SetupScrollBar(SadConsole.UI.Controls.ListBox)">
            <summary>
            Sets up the scroll bar for the listbox.
            </summary>
            <param name="listbox"></param>
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.Attached(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxTheme.ShowHideScrollBar(SadConsole.UI.Controls.ListBox)">
            <summary>
            Shows the scroll bar when there are too many items to display; otherwise, hides it.
            </summary>
            <param name="control">Reference to the listbox being processed.</param>
        </member>
        <member name="T:SadConsole.UI.Themes.ListBoxItemTheme">
            <summary>
            A generic theme for a <see cref="T:SadConsole.UI.Controls.ListBox"/> item.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ListBoxItemTheme.UseColoredStringBackground">
            <summary>
            Gets or sets a value to allow printing the background of a colored string. When <see langword="false"/>, the control state background is used.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxItemTheme.RefreshTheme(SadConsole.UI.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxItemTheme.Draw(SadConsole.UI.Controls.ListBox,SadRogue.Primitives.Rectangle,System.Object,SadConsole.UI.Controls.ControlStates)">
            <summary>
            Draws the <paramref name="item"/> in the specified <paramref name="area"/> of the listbox.
            </summary>
            <param name="control">The listbox that contains the item.</param>
            <param name="area">The area to draw the item.</param>
            <param name="item">The item object.</param>
            <param name="itemState">The state of the item.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxItemTheme.Clone">
            <summary>
            Creates a copy of this theme.
            </summary>
            <returns>A new theme object.</returns>
        </member>
        <member name="T:SadConsole.UI.Themes.ListBoxItemColorTheme">
            <summary>
            A theme for a <see cref="T:SadConsole.UI.Controls.ListBox"/> that displays a <see cref="T:SadRogue.Primitives.Color"/> object.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ListBoxItemColorTheme.UseSingleCharacterForBox">
            <summary>
            When <see langword="false"/>, colored boxes used when drawing the color for (Color, string) tuple will use two characters; otherwise <see langword="true"/> and only one character is used.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxItemColorTheme.Draw(SadConsole.UI.Controls.ListBox,SadRogue.Primitives.Rectangle,System.Object,SadConsole.UI.Controls.ControlStates)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ListBoxItemColorTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.PanelTheme">
            <summary>
            A basic theme for a drawing surface that simply fills the surface based on the state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.PanelTheme.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="P:SadConsole.UI.Themes.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.PanelTheme.SkipDrawing">
            <summary>
            When true, ignores all states and doesn't draw anything.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.PanelTheme.Appearance">
            <summary>
            The current appearance based on the control state.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.PanelTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.PanelTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.ProgressBarTheme">
            <summary>
            The theme of a radio button control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ProgressBarTheme.Background">
            <summary>
            The theme of the unprogressed part of the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ProgressBarTheme.Foreground">
            <summary>
            The theme of the progressed part of the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ProgressBarTheme.DisplayText">
            <summary>
            The theme of the text displayed on the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ProgressBarTheme.PrintDisplayAsDecorator">
            <summary>
            When <see langword="true"/>, prints the <see cref="P:SadConsole.UI.Controls.Label.DisplayText"/> on the control in decorators instead of replacing the portation of the bar that overlaps the text.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ProgressBarTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.UI.Controls.ProgressBar"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ProgressBarTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ProgressBarTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ProgressBarTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.RadioButtonTheme">
            <summary>
            The theme of a radio button control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.RadioButtonTheme.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new radio button theme with an optional bracket and check icon.
            </summary>
            <param name="leftBracketGlyph">The left bracket of the checkbox icon. Defaults to '('.</param>
            <param name="rightBracketGlyph">The right bracket of the checkbox icon. Defaults to ')'.</param>
            <param name="checkedGlyph">The checkbox checked icon. Defaults to 15'☼'.</param>
            <param name="uncheckedGlyph">The checkbox unchecked icon. Defaults to 0.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.RadioButtonTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.ScrollBarTheme">
            <summary>
            The theme of the slider control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ScrollBarTheme.StartButtonVerticalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ScrollBarTheme.EndButtonVerticalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ScrollBarTheme.StartButtonHorizontalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ScrollBarTheme.EndButtonHorizontalGlyph">
            <summary>
            The theme part fot the start button.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ScrollBarTheme.BarGlyph">
            <summary>
            The theme part for the scroll bar bar where the slider is not located.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ScrollBarTheme.SliderGlyph">
            <summary>
            The theme part for the scroll bar icon.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ScrollBarTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.UI.Controls.ScrollBar"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ScrollBarTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ScrollBarTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.ScrollBarTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.SurfaceViewerTheme">
            <summary>
            A basic theme for a drawing surface that simply fills the surface based on the state.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.SurfaceViewerTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.SurfaceViewerTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.TextBoxTheme">
            <summary>
            A theme for the input box control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.TextBoxTheme.CaretEffect">
            <summary>
            The style to use for the carrot.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.TextBoxTheme.#ctor">
            <summary>
            Creates a new theme used by the <see cref="T:SadConsole.UI.Controls.TextBox"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.TextBoxTheme.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.TextBoxTheme.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Themes.TextBoxTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Themes.ThemeBase">
            <summary>
            The base class for a theme.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Themes.ThemeBase._colorsLastUsed">
            <summary>
            The colors last used when <see cref="M:SadConsole.UI.Themes.ThemeBase.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)"/> was called.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeBase.ControlThemeState">
            <summary>
            Default theme state of the whole control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeBase.UpdateAndDraw(SadConsole.UI.Controls.ControlBase,System.TimeSpan)">
            <summary>
            Draws the control state to the control.
            </summary>
            <param name="control">The control to draw.</param>
            <param name="time">The time since the last update frame call.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeBase.Attached(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Called when the theme is attached to a control.
            </summary>
            <param name="control">The control that will use this theme instance.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeBase.Clone">
            <summary>
            Creates a new theme instance based on the current instance.
            </summary>
            <returns>A new theme instance.</returns>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeBase.RefreshTheme(SadConsole.UI.Colors,SadConsole.UI.Controls.ControlBase)">
            <summary>
            Reloads the theme values based on the colors provided.
            </summary>
            <param name="colors">The colors to create the theme with.</param>
            <param name="control">The control being drawn with the theme.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeBase.GetOffColor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Compares two colors and if they match, returns a color that is lighter or darker based on if <see cref="P:SadConsole.UI.Colors.IsLightTheme"/>.
            </summary>
            <param name="inColor">The base color.</param>
            <param name="compareColor">The color to compare with.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeBase.NormalizeBlack(SadRogue.Primitives.Color)">
            <summary>
            Normalizes a dark color to at least R:25 G:25 B:25 A:255.
            </summary>
            <param name="inColor">The color to check.</param>
            <returns>A new color.</returns>
        </member>
        <member name="T:SadConsole.UI.Themes.ThemeStates">
            <summary>
            Has the basic appearances of each control state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeStates.Normal">
            <summary>
            The normal appearance of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeStates.Disabled">
            <summary>
            The appearance of the control when it is disabled.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeStates.Focused">
            <summary>
            The appearance of the control when it is focused.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeStates.Selected">
            <summary>
            The appearence of the control when it is in a selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeStates.MouseOver">
            <summary>
            The appearance of the control when the mouse is over it.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Themes.ThemeStates.MouseDown">
            <summary>
            THe appearance of the control when a mouse button is held down.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.SetForeground(SadRogue.Primitives.Color)">
            <summary>
            Sets the same foreground color to all theme states.
            </summary>
            <param name="color">The foreground color.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.SetBackground(SadRogue.Primitives.Color)">
            <summary>
            Sets the same background color to all theme states.
            </summary>
            <param name="color">The background color.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.SetGlyph(System.Int32)">
            <summary>
            Sets the same glyph to all theme states.
            </summary>
            <param name="glyph">The glyph.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.SetMirror(SadConsole.Mirror)">
            <summary>
            Sets the same mirror setting to all theme states.
            </summary>
            <param name="mirror">The mirror setting.</param>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.GetStateAppearance(SadConsole.UI.Controls.ControlStates)">
            <summary>
            Gets an apperance defined by this theme from the <paramref name="state" /> parameter.
            </summary>
            <param name="state">The state to check.</param>
            <returns>A cell appearance.</returns>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.Clone">
            <summary>
            Performs a deep copy of this theme.
            </summary>
            <returns>A new instance of the theme.</returns>
        </member>
        <member name="M:SadConsole.UI.Themes.ThemeStates.RefreshTheme(SadConsole.UI.Colors)">
            <summary>
            Reloads the theme values based on the colors provided.
            </summary>
            <param name="colors">The colors to create the theme with.</param>
        </member>
        <member name="T:SadConsole.UI.Window">
            <summary>
            Represents a windowed controls console.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Window.Closed">
            <summary>
            Raised when the window is closed.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Window.Shown">
            <summary>
            Raised when the window is shown.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.Controls">
            <summary>
            The controls host holding all the controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAreaY">
            <summary>
            The Y coordinate of the title drawing area. This can be set to any value > 0 and &lt; the height.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAreaX">
            <summary>
            The X coordinate of the title drawing area. This is automatically set by the theme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAreaLength">
            <summary>
            The width of the title drawing area. This is automatically set by the theme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.BorderLineStyle">
            <summary>
            The line sytle for the border.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Window.PreviousMouseInfo">
            <summary>
            The mouse state of the previous update frame.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.CellAtDragPosition">
            <summary>
            The position of the cell that the window drag started at.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.PreviousMouseExclusiveDrag">
            <summary>
            Temporary value to hold the state of <see cref="P:SadConsole.IScreenObject.IsExclusiveMouse"/> prior to dragging.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.AddedToParent">
            <summary>
            When <see langword="true"/>, indicates that the window has been added to a parent; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.IsDragging">
            <summary>
            When <see langword="true"/>, indicates that the window is being dragged; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAlignment">
            <summary>
            Gets or sets the alignment of the window title.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.IsModal">
            <summary>
            Gets the whether or not the window is being shown as modal. 
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.CanDrag">
            <summary>
            Gets or sets whether or not this window can be moved with the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.CloseOnEscKey">
            <summary>
            Gets or sets whether or not this window can be closed when the escape key is pressed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.DialogResult">
            <summary>
            Gets or set the dialog result status of the window.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.IsModalDefault">
            <summary>
            Indicates that when this window is shown by the <see cref="M:SadConsole.UI.Window.Show"/> method or by setting the <see cref="P:SadConsole.IScreenObject.IsVisible"/> property to true, the window will be shown as modal.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.Title">
            <summary>
            Gets or sets the title displayed on the window.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new window.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new window with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the window in cells.</param>
            <param name="height">The visible height of the window in cells.</param>
            <param name="bufferWidth">The total width of the window in cells.</param>
            <param name="bufferHeight">The total height of the window in cells.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a window with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the window in cells.</param>
            <param name="height">The height of the window in cells.</param>
            <param name="bufferWidth">The total width of the window in cells.</param>
            <param name="bufferHeight">The total height of the window in cells.</param>
            <param name="initialCells">The cells to seed the window with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new window using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.UI.Window.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Window.DrawBorder">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Window.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Processes the keyboard looking for the ESC key press to close the window, if required. Otherwise the base ControlsConsole will process the keyboard.
            </summary>
            <param name="info">Keyboard state.</param>
        </member>
        <member name="M:SadConsole.UI.Window.OnVisibleChanged">
            <summary>
            Depending on if the window is visible, calls <see cref="M:SadConsole.UI.Window.Show(System.Boolean)"/> or <see cref="M:SadConsole.UI.Window.Hide"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.OnShown">
            <summary>
            User-definable code called when the window is shown.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.OnHidden">
            <summary>
            User-definable code called when the window is hidden.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.Show">
            <summary>
            Displays this window using the modal value of the <see cref="P:SadConsole.UI.Window.IsModalDefault"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.Show(System.Boolean)">
            <summary>
            Displays this window.
            </summary>
            <param name="modal">When true, the window will be displayed as modal; otherwise false.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.Center">
            <summary>
            Centers the window within the bounds of <see cref="P:SadConsole.Settings.Rendering.RenderWidth"/> and <see cref="P:SadConsole.Settings.Rendering.RenderHeight"/>
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.ToString">
            <summary>
            Returns the value "Window".
            </summary>
            <returns>The string "Window".</returns>
        </member>
        <member name="M:SadConsole.UI.Window.Prompt(System.String,System.String,System.String,System.Action{System.Boolean},SadConsole.UI.Colors,SadConsole.UI.Themes.ButtonTheme)">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display.</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="resultCallback">Callback with the yes (true) or no (false) result.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>, then the colors are from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
            <param name="buttonTheme">The theme for the buttons on the message box. If <see langword="null"/>, then the theme the default from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Prompt(SadConsole.ColoredString,System.String,System.String,System.Action{System.Boolean},SadConsole.UI.Colors,SadConsole.UI.Themes.ButtonTheme)">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display. (background color is ignored)</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="resultCallback">Callback with the yes (true) or no (false) result.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>, then the colors are from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
            <param name="buttonTheme">The theme for the buttons on the message box. If <see langword="null"/>, then the theme the from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Message(System.String,System.String,System.Action,SadConsole.UI.Colors,SadConsole.UI.Themes.ButtonTheme)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message.</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>, then the colors are from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
            <param name="buttonTheme">The theme for the buttons on the message box. If <see langword="null"/>, then the theme the default from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Message(SadConsole.ColoredString,System.String,System.Action,SadConsole.UI.Colors,SadConsole.UI.Themes.ButtonTheme)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message. (background color is ignored)</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>, then the colors are from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
            <param name="buttonTheme">The theme for the buttons on the message box. If <see langword="null"/>, then the theme the default from <see cref="T:SadConsole.UI.Themes.Library"/> will be used.</param>
        </member>
        <member name="T:SadConsole.ValueChangedEventArgs`1">
            <summary>
            The old value and the value it changed to.
            </summary>
        </member>
        <member name="F:SadConsole.ValueChangedEventArgs`1.OldValue">
            <summary>
            The previous object.
            </summary>
        </member>
        <member name="F:SadConsole.ValueChangedEventArgs`1.NewValue">
            <summary>
            The new object.
            </summary>
        </member>
        <member name="F:SadConsole.ValueChangedEventArgs`1.SupportsCancel">
            <summary>
            When <see langword="true"/>, indicates this value change can be cancelled; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ValueChangedEventArgs`1.SupportsHandled">
            <summary>
            When <see langword="true"/>, indicates this value change can be flagged as handled and stop further event handlers; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ValueChangedEventArgs`1.IsCancelled">
            <summary>
            When <see cref="F:SadConsole.ValueChangedEventArgs`1.SupportsCancel"/> is <see langword="true"/>, setting this property to <see langword="true"/> causes the value change to be cancelled and to stop processing further event handlers.
            </summary>
        </member>
        <member name="P:SadConsole.ValueChangedEventArgs`1.IsHandled">
            <summary>
            When <see cref="F:SadConsole.ValueChangedEventArgs`1.SupportsHandled"/> is <see langword="true"/>, setting this property to <see langword="true"/> flags this change as handled and to stop processing further event handlers.
            </summary>
        </member>
        <member name="M:SadConsole.ValueChangedEventArgs`1.#ctor(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of this object with the specified old and new value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="supportsCancel">When <see langword="true"/>, indicates this value change can be cancelled.</param>
            <param name="supportsHandled">When <see langword="true"/>, indicates this value change can be flagged as handled and stop further event handlers.</param>
        </member>
        <member name="T:SadRogue.Primitives.ColorGradient">
            <summary>
            Represents a gradient with multiple color stops.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.ColorGradient.Stops">
            <summary>
            The color stops that define the gradient.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Color},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new color gradient with the defined colors and stops.
            </summary>
            <param name="colors">The colors with the gradient.</param>
            <param name="stops">The gradient stops where the colors are used.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a new color gradient with only two colors, the first at the start, and the second at the end.
            </summary>
            <param name="startingColor">The starting color of the gradient.</param>
            <param name="endingColor">The ending color of the gradient.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.#ctor(SadRogue.Primitives.Color[])">
            <summary>
            Creates a new color gradient, evenly spacing them out. At least one color must be provided.
            </summary>
            <param name="colors">The colors to create a gradient from.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.ToColoredString(System.String)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object using the current gradient.
            </summary>
            <param name="text">The text to use for the colored string.</param>
            <returns>A new colored string object.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.ToColorArray(System.Int32)">
            <summary>
            Gets an array of colors based from the gradient.
            </summary>
            <param name="count">The amount of colors to produce.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.Lerp(System.Single)">
            <summary>
            Returns a color from this gradient at the specified lerp value.
            </summary>
            <param name="amount">The lerp amount.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.op_Implicit(SadRogue.Primitives.Color)~SadRogue.Primitives.ColorGradient">
            <summary>
            Converts a color into a gradient. The color becomes the first and last stops.
            </summary>
            <param name="color">The color to convert.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.op_Implicit(SadRogue.Primitives.ColorGradient)~SadRogue.Primitives.Color">
            <summary>
            Converts a gradient into a color using the first color stop.
            </summary>
            <param name="gradient">The gradient to convert.</param>
        </member>
        <member name="T:SadRogue.Primitives.ColorGradientStop">
            <summary>
            A gradient stop. Defines a color and where it is located within the gradient.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorGradientStop.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorGradientStop.Stop">
            <summary>
            The color stop in the gradiant this applies to.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.ColorExtensions2">
            <summary>
            Various extension methods to <see cref="T:SadRogue.Primitives.Color"/> class.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorExtensions2.ColorMappings">
            <summary>
            Custom color mappings for the <see cref="M:SadRogue.Primitives.ColorExtensions2.FromName(System.String)"/> and <see cref="M:SadRogue.Primitives.ColorExtensions2.FromParser(SadRogue.Primitives.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"/> methods. Key names should be lowercase.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.LerpSteps(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates an array of colors that includes the <paramref name="color"/> and <paramref name="endingColor"/> and <paramref name="steps"/> of colors between them.
            </summary>
            <param name="color">The starting color which will be at index 0 in the array.</param>
            <param name="endingColor">The ending color which will be at index `steps - 1` in the array.</param>
            <param name="steps">The gradient steps in the array which uses <see cref="M:SadRogue.Primitives.Color.Lerp(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Single)"/>.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetHSL(SadRogue.Primitives.Color,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color values based on HSL instead of RGB.
            </summary>
            <param name="color">The color to change.</param>
            <param name="h">The hue amount.</param>
            <param name="s">The saturation amount.</param>
            <param name="l">The luminance amount.</param>
            <remarks>Taken from http://www.easyrgb.com/index.php?X=MATH&amp;H=19#text19 </remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetRandomColor(SadRogue.Primitives.Color,System.Random)">
            <summary>
            Gets a random color.
            </summary>
            <param name="color">The color object to start with. Will be overridden.</param>
            <param name="random">A random object to get numbers from.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetDark(SadRogue.Primitives.Color)">
            <summary>
            Gets a darker version of the color. R,G,B channels are * 0.25f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetDarker(SadRogue.Primitives.Color)">
            <summary>
            Gets a darker version of the color. R,G,B channels are * 0.50f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetDarkest(SadRogue.Primitives.Color)">
            <summary>
            Gets a darker version of the color. R,G,B channels are * 0.75f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBright(SadRogue.Primitives.Color)">
            <summary>
            Gets a brighter version of the color. R,G,B channels are * 1.25f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBrighter(SadRogue.Primitives.Color)">
            <summary>
            Gets a brighter version of the color. R,G,B channels are * 1.50f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBrightest(SadRogue.Primitives.Color)">
            <summary>
            Gets a brighter version of the color. R,G,B channels are * 1.75f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.RedOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Red value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the red channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GreenOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Green value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the green channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.BlueOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Blue value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the blue channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.AlphaOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Alpha value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the alpha channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearRed(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the red channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearGreen(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the green channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearBlue(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the blue channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearAlpha(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the alpha channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillRed(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the red channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillGreen(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the green channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillBlue(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the blue channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillAlpha(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the alpha channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetRed(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the red channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the red channel.</param>
            <returns>A color with the red channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetGreen(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the green channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the green channel.</param>
            <returns>A color with the green channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetBlue(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the blue channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the blue channel.</param>
            <returns>A color with the blue channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetAlpha(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the alpha channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the alpha channel.</param>
            <returns>A color with the alpha channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetLuma(SadRogue.Primitives.Color)">
            <summary>
            Gets the luma of an existing color.
            </summary>
            <param name="color">The color to calculate the luma from.</param>
            <returns>A value based on this code: (color.R + color.R + color.B + color.G + color.G + color.G) / 6f</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBrightness(SadRogue.Primitives.Color)">
            <summary>
            Gets the brightness of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The brightness value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetSaturation(SadRogue.Primitives.Color)">
            <summary>
            Gets the saturation of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The saturation value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetHue(SadRogue.Primitives.Color)">
            <summary>
            Gets the hue of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The hue value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ToParser(SadRogue.Primitives.Color)">
            <summary>
            Converts a color to the format used by <see cref="T:SadConsole.StringParser.ParseCommandRecolor"/> command.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string in this format R,G,B,A so for <see cref="F:SadRogue.Primitives.Color.Green"/> you would get <code>0,128,0,255</code>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FromParser(SadRogue.Primitives.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a color in the format of <see cref="T:SadConsole.StringParser.ParseCommandRecolor"/>.
            </summary>
            <param name="color">The color to use as a base.</param>
            <param name="value">The string parser color command.</param>
            <param name="keepR">Indicates that command wanted to keep the Red color channel.</param>
            <param name="keepG">Indicates that command wanted to keep the Green color channel.</param>
            <param name="keepB">Indicates that command wanted to keep the Blue color channel.</param>
            <param name="keepA">Indicates that command wanted to keep the Alpha color channel.</param>
            <param name="useDefault">Indicates that command wanted to use the default values passed.</param>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FromName(System.String)">
            <summary>
            Searches <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/> for a defined color.
            </summary>
            <param name="name">The name of a color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FromName(System.String,SadRogue.Primitives.Color)">
            <summary>
            Searches <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/> for a defined color. If color is not defined, the color specified by <paramref name="defaultColor"/> is returned.
            </summary>
            <param name="name">The name of a color.</param>
            <param name="defaultColor">Fallback color.</param>
            <returns>A color.</returns>
        </member>
    </members>
</doc>
