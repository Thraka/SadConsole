<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SadConsole</name>
    </assembly>
    <members>
        <member name="T:SadConsole.Algorithms">
            <summary>
            Provides a few minor helper methods related to filling.
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.FloodFill``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Func{``0,SadConsole.Algorithms.NodeConnections{``0}})">
            <summary>
            A very slow 4-way fill algorithm to change items from one type to another.
            </summary>
            <typeparam name="TNode">The item type that is changed.</typeparam>
            <param name="node">The item to change.</param>
            <param name="shouldNodeChange">Determines if the node should change.</param>
            <param name="changeNode">After it is determined if the node should change, this changes the node.</param>
            <param name="getNodeConnections">Gets any other nodes connected to this node.</param>
        </member>
        <member name="M:SadConsole.Algorithms.GradientFill(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Int32,System.Int32,SadRogue.Primitives.Rectangle,SadRogue.Primitives.Gradient,System.Action{System.Int32,System.Int32,SadRogue.Primitives.Color})">
            <summary>
            Processes an area and applies a gradient calculation to each part of the area.
            </summary>
            <param name="cellSize">The size of an individual cell. Makes the angle uniform.</param>
            <param name="position">The center of the gradient.</param>
            <param name="strength">The width of the gradient spread.</param>
            <param name="angle">The angle to apply the gradient.</param>
            <param name="area">The area to calculate.</param>
            <param name="gradient">The color gradient to fill with.</param>
            <param name="applyAction">The callback called for each part of the area.</param>
        </member>
        <member name="T:SadConsole.Algorithms.NodeConnections`1">
            <summary>
            Describes the 4-way connections of a node.
            </summary>
            <typeparam name="TNode">The type of object the node and its connections are.</typeparam>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.West">
            <summary>
            The west or left node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.East">
            <summary>
            The east or right node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.North">
            <summary>
            The north or up node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.South">
            <summary>
            The south or down node.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasWest">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.West"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasEast">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.East"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasNorth">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.North"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Algorithms.NodeConnections`1.HasSouth">
            <summary>
            When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.South"/> connection is valid; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor(`0,`0,`0,`0,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of this object with the specified connections.
            </summary>
            <param name="west">The west connection.</param>
            <param name="east">The east connection.</param>
            <param name="north">The north connection.</param>
            <param name="south">The south connection.</param>
            <param name="isWest">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.West"/> connection is valid; otherwise <see langword="false"/>.</param>
            <param name="isEast">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.East"/> connection is valid; otherwise <see langword="false"/>.</param>
            <param name="isNorth">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.North"/> connection is valid; otherwise <see langword="false"/>.</param>
            <param name="isSouth">When <see langword="true"/> indicates the <see cref="F:SadConsole.Algorithms.NodeConnections`1.South"/> connection is valid; otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor">
            <summary>
            Creates a new instance of this object with all connections set to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:SadConsole.AnimatedScreenObject">
            <summary>
            A <see cref="T:SadConsole.ScreenObject"/> that displays an animated set of <see cref="T:SadConsole.ICellSurface"/> surfaces.
            </summary>
        </member>
        <member name="E:SadConsole.AnimatedScreenObject.AnimationStateChanged">
            <summary>
            Raised when the <see cref="T:SadConsole.AnimatedScreenObject.AnimationState"/> changes.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Center">
            <summary>
            Center of the animation used in positioning.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Repeat">
            <summary>
            Indicates whether or not this animation will repeat once it has finished animating.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.IsPlaying">
            <summary>
            When true, Indicates the animation is currently animating. The <see cref="M:SadConsole.AnimatedScreenObject.Update(System.TimeSpan)"/> method will advance the frames.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.AnimationDuration">
            <summary>
            The length of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame index to animate.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.IsEmpty">
            <summary>
            Indicates the animation is empty.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Frames">
            <summary>
            The frames of the animated surface.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Name">
            <summary>
            Gets the name of this animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.State">
            <summary>
            Gets the current animation state.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AddedTime">
            <summary>
            Time counter for the animation
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.CurrentFrameIndexValue">
            <summary>
            The current frame index being animated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.TimePerFrame">
            <summary>
            How much time per animated frame should be used.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.CreateFrame">
            <summary>
            Creates a new frame with the same dimensions as this entity and adds it to the Frames collection of the entity.
            </summary>
            <returns>The created frame.</returns>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.CalculateFrameDuration">
            <summary>
            Calculates the time needed per frame for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Stop">
            <summary>
            Stops animating.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Start">
            <summary>
            Starts animating the frames.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Restart">
            <summary>
            Restarts the animation from the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.MoveNext(System.Boolean)">
            <summary>
            Changes the <see cref="P:SadConsole.AnimatedScreenObject.CurrentFrame"/> to the next frame.
            </summary>
            <param name="circular">If true and the current frame is the last, sets the current frame to the first frame.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.MovePrevious(System.Boolean)">
            <summary>
            Changes the <see cref="P:SadConsole.AnimatedScreenObject.CurrentFrame"/> to the previous frame.
            </summary>
            <param name="circular">If true and the current frame is the first, sets the current frame to the last frame.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.MoveEnd">
            <summary>
            Changes the <see cref="P:SadConsole.AnimatedScreenObject.CurrentFrame"/> to the last frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.MoveStart">
            <summary>
            Changes the <see cref="P:SadConsole.AnimatedScreenObject.CurrentFrame"/> to the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.CreateStatic(System.Int32,System.Int32,System.Int32,System.Double,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color})">
            <summary>
            Creates an animated surface that looks like static noise.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="frames">How many frames the animation should have.</param>
            <param name="blankChance">Chance a character will be blank. Characters are between index 48-158. Chance is evaluated versus <see cref="M:System.Random.NextDouble"/>.</param>
            <param name="background">The background color of the animation. Defaults to transparent.</param>
            <param name="foreground">The foreground color of the animation. Defaults to white.</param>
            <returns>An animation.</returns>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.FromImage(System.String,System.String,SadRogue.Primitives.Point,System.TimeSpan,System.Nullable{SadRogue.Primitives.Point},System.Nullable{SadRogue.Primitives.Point},SadConsole.IFont,System.Action{SadConsole.ColoredGlyphBase},SadConsole.TextureConvertMode,SadConsole.TextureConvertForegroundStyle,SadConsole.TextureConvertBackgroundStyle,System.Nullable{SadRogue.Primitives.Color})">
            <summary>
            Converts an image file containing frames to an instance of <see cref="T:SadConsole.AnimatedScreenObject"/>.
            </summary>
            <param name="name">Name for the animation.</param>
            <param name="filePath">File path to the image file.</param>
            <param name="frameLayout">Layout of frames in the image file: X number of columns, Y number of rows.</param>
            <param name="frameDuration">Duration for a frame in the animation.</param>
            <param name="pixelPadding">Pixel padding separating frames: X between the columns, Y between the rows.</param>
            <param name="frameStartAndFinish">Limits the number of frames copied to the animation. X first frame index, Y last frame index.</param>
            <param name="font"> <see cref="T:SadConsole.IFont"/> to be used when creating the <see cref="T:SadConsole.AnimatedScreenObject"/>.</param>
            <param name="action">Callback that will be applied to each <see cref="T:SadConsole.ColoredGlyphBase"/> when creating a frame.</param>
            <param name="convertMode">The mode used when converting the texture to a surface.</param>
            <param name="convertBackgroundStyle">The style to use when <paramref name="convertMode"/> is <see cref="F:SadConsole.TextureConvertMode.Background"/>.</param>
            <param name="convertForegroundStyle">The style to use when <paramref name="convertMode"/> is <see cref="F:SadConsole.TextureConvertMode.Foreground"/>.</param>
            <param name="frameDefaultBackground">The default background to use in the animation frames. Defaults to transparent.</param>
            
            <returns>An instance of <see cref="T:SadConsole.AnimatedScreenObject"/> with converted frames.</returns>
            
            <remarks>This method assumes the image file contains only frames and optional padding between the frames, no border space.
            
            Frame count is calculated by multiplying rows and columns from the frame layout. It can by limited by specifying frame start and finish indexes.
            
            Frame size and the subsequent AnimatedScreenSurface size is calculated from the size of the image file, number of frames, padding and the font size ratio.
            </remarks>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.AnimatedScreenObject"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.AnimatedScreenObject"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns>The animated surface.</returns>
        </member>
        <member name="T:SadConsole.AnimatedScreenObject.AnimationStateChangedEventArgs">
            <summary>
            Event args for when the animation state changes
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationStateChangedEventArgs.PreviousState">
            <summary>
            The previous state.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationStateChangedEventArgs.NewState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.AnimationStateChangedEventArgs.#ctor(SadConsole.AnimatedScreenObject.AnimationState,SadConsole.AnimatedScreenObject.AnimationState)">
            <summary>
            Creates a new instance of the event args.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:SadConsole.AnimatedScreenObject.AnimationState">
            <summary>
            Represents what state the animation is in.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationState.Stopped">
            <summary>
            The animation has never been played or was forcibly stopped.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationState.Restarted">
            <summary>
            The animation was either manually restarted or repeated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationState.Finished">
            <summary>
            The animation was played and completed.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationState.Activated">
            <summary>
            The animation is now the current animation for an entity.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.AnimationState.Deactivated">
            <summary>
            The animation is no longer the current animation for an entity.
            </summary>
        </member>
        <member name="E:SadConsole.AnimatedScreenObject.MouseButtonClicked">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.AnimatedScreenObject.MouseMove">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.AnimatedScreenObject.MouseExit">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.AnimatedScreenObject.MouseEnter">
            <inheritdoc/>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.MoveToFrontOnMouseClick">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.FocusOnMouseClick">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.OnMouseEnter(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.AnimatedScreenObject.MouseEnter"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.OnMouseExit(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.AnimatedScreenObject.MouseExit"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.OnMouseMove(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.AnimatedScreenObject.MouseMove"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.OnMouseLeftClicked(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.AnimatedScreenObject.MouseButtonClicked"/> event. Possibly moves the console to the top of it's parent's children collection.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.OnRightMouseClicked(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.AnimatedScreenObject.MouseButtonClicked"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.NewFrameWidth">
            <summary>
            The width to assign a frame when <see cref="M:SadConsole.AnimatedScreenObject.CreateFrame"/> is called.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedScreenObject.NewFrameHeight">
            <summary>
            The height to assign a frame when <see cref="M:SadConsole.AnimatedScreenObject.CreateFrame"/> is called.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.ForceRendererRefresh">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.DefaultRendererName">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Renderer">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.SadConsole#IScreenSurface#Surface">
            <summary>
            The surface this screen object represents.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that the animation needs to be redrawn; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Font">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.FontSize">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Tint">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.AbsoluteArea">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.UsePixelPositioning">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.WidthPixels">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.HeightPixels">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Width">
            <summary>
            The total width of the console.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.Height">
            <summary>
            The total height of the console.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.ViewWidth">
            <summary>
            Gets or sets the visible width of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.ViewHeight">
            <summary>
            Gets or sets the visible height of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.ViewPosition">
            <summary>
            The position of the view within the console.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedScreenObject.CurrentFrame">
            <summary>
            Gets the current animation frame surface. A shortcut for <code>Frames[CurrentFrameIndex]</code>
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.#ctor(System.String,System.Collections.Generic.IEnumerable{SadConsole.ICellSurface})">
            <summary>
            Creates a new animation with the specified name and frames.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="frames">The frames that make up the animation.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.#ctor(System.String,System.Int32,System.Int32,SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
            <param name="font">The font used with this animation.</param>
            <param name="fontSize">The size of the font.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Render(System.TimeSpan)">
            <summary>
            Draws the animation's current frame and all <see cref="P:SadConsole.ScreenObject.SadComponents"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Update(System.TimeSpan)">
            <summary>
            Updates the <see cref="T:SadConsole.AnimatedScreenObject"/> effects and all <see cref="P:SadConsole.ScreenObject.SadComponents"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.ToString">
            <summary>
            Returns the value "ScreenSurface".
            </summary>
            <returns>The string "ScreenSurface".</returns>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.AnimatedScreenObject.Renderer"/>.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedScreenObject.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Ansi.AnsiWriter">
            <summary>
            Writes a <see cref="T:SadConsole.Ansi.Document"/> to a <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.AnsiDocument">
            <summary>
            The document used to create this writer.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.BlinkEffect">
            <summary>
            The blink effect to apply when the ansi document provides the ANSI blink command.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.Cursor">
            <summary>
            The cursor used to write to the target <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.AnsiWriter.CharactersPerSecond">
            <summary>
            How many characters to process a second. When set to 0 reads the entire document at once.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.#ctor(SadConsole.Ansi.Document,SadConsole.ICellSurface)">
            <summary>
            Creates a new instance with the source document and target surface.
            </summary>
            <param name="ansiDocument">The source document containing ANSI commands.</param>
            <param name="editor">The surface to parse the ANSI to.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.Process(System.Double)">
            <summary>
            Processes the document by the amount of time that has elapsed. If <see cref="P:SadConsole.Ansi.AnsiWriter.CharactersPerSecond"/> is 0, time elapsed has no affect.
            </summary>
            <param name="timeElapsed">The time in seconds.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiInterpret(System.String)">
            <summary>
            Interprets an individual ansi code.
            </summary>
            <param name="code">The ANSI.SYS code to read.</param>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.AnsiReadLine(System.String,System.Boolean)">
            <summary>
            Reads a line of ANSI.SYS code.
            </summary>
            <param name="line">The line to read.</param>
            <param name="moreLines">When <see langword="true"/>, calls <see cref="M:SadConsole.Components.Cursor.LineFeed"/>; otherwise does nothing.</param>
            <returns>Returns false when character 26 is encountered; otherwise true.</returns>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.ReadEntireDocument">
            <summary>
            Loads an ansi file and parses it.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.AnsiWriter.Restart">
            <summary>
            Moves the reader back to the start of the file so that the source can .
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.Document">
            <summary>
            Represents an ANSI.SYS formatted document.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.AnsiBytes">
            <summary>
            Gets or sets the ANSI.SYS bytes that make up the document.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.AnsiString">
            <summary>
            A string representing the <see cref="P:SadConsole.Ansi.Document.AnsiBytes"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.Document.Stream">
            <summary>
            A stream that points to the <see cref="P:SadConsole.Ansi.Document.AnsiBytes"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.Document.#ctor(System.String)">
            <summary>
            Creates a new document from the provided file name.
            </summary>
            <param name="file">The file to load.</param>
        </member>
        <member name="M:SadConsole.Ansi.Document.Finalize">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Ansi.Document.FromAsciiString(System.String)">
            <summary>
            Creates a new document from an existing string representing ANSI.SYS codes and characters.
            </summary>
            <param name="ansiContent">The ANSI.SYS encoded string.</param>
            <returns>A new document.</returns>
        </member>
        <member name="M:SadConsole.Ansi.Document.FromBytes(System.Byte[])">
            <summary>
            Creates a new document from an existing byte array representing ANSI.SYS codes and characters.
            </summary>
            <param name="bytes">The ANSI.SYS encoded byte array.</param>
            <returns>A new document.</returns>
        </member>
        <member name="M:SadConsole.Ansi.Document.System#IDisposable#Dispose">
            <summary>
            Disposes the <see cref="P:SadConsole.Ansi.Document.Stream"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Ansi.Helpers">
            <summary>
            Helpers related to ANSI processing.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiJustNormalColor(SadRogue.Primitives.Color)">
            <summary>
            Returns the a normal, dark, ansi color based on the ansi color provided.
            </summary>
            <param name="input">An ansi color.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiAdjustColor(SadRogue.Primitives.Color,System.Boolean)">
            <summary>
            Adjusts the provided color based on the <paramref name="bold"/> value.
            </summary>
            <param name="input">The ansi color to adjust.</param>
            <param name="bold">When <see langword="true"/>, adjusts the color to the bright version. When <see langword="false"/>, adjusts the color to the normal version.</param>
            <returns>The adjusted color.</returns>
            <remarks>If the color provided is not an ansi color, dark or light, the passed in color will be returned.</remarks>
        </member>
        <member name="M:SadConsole.Ansi.Helpers.AnsiConfigurePrintColor(System.Boolean,System.Int32,SadConsole.Ansi.State)">
            <summary>
            Sets the print appearance of the cursor based on the ANSI.SYS code provided.
            </summary>
            <param name="isBackground">When true, changes the background color instead of the foreground.</param>
            <param name="code">The 0-7 color code.</param>
            <param name="ansiState">The current state of the ANSI settings.</param>
        </member>
        <member name="T:SadConsole.Ansi.State">
            <summary>
            Represents the state of an ANSI.SYS processor.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Bold">
            <summary>
            Indicates that the state is using bold colors.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Reverse">
            <summary>
            Indicates that the state is printing reverse colors.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Concealed">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Foreground">
            <summary>
            Foreground color for the state of the ANSI.SYS processor.
            </summary>
        </member>
        <member name="P:SadConsole.Ansi.State.Background">
            <summary>
            Background color for the state of the ANSI.SYS processor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.#ctor">
            <summary>
            Creates a new object to track the state of the ansi cursor.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiCorrectPrintColor">
            <summary>
            Forces the Background of the print appearance to be the darkened color and the foreground to be bright or not based on the <see cref="P:SadConsole.Ansi.State.Bold"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Ansi.State.AnsiResetVideo">
            <summary>
            Resets all of the print appearance and ansi settings back to the default.
            </summary>
        </member>
        <member name="T:SadConsole.CellDecorator">
            <summary>
            Decorates a cell with a colored glyph.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Empty">
            <summary>
            An empty cell decorator.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Color">
            <summary>
            Foreground color of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Glyph">
            <summary>
            Glyph of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Mirror">
            <summary>
            Mirror setting of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.CellDecorator.#ctor(SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a new decorator with the specified colors, glyph, visiblity, and mirror settings.
            </summary>
            <param name="color">Foreground color.</param>
            <param name="glyph">Glyph value.</param>
            <param name="mirror">Mirror setting.</param>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(SadConsole.CellDecorator)">
            <summary>
            Determines if this object has the same value as the other.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if the objects have the same values.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Equality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="P:SadConsole.CellDecorator.Color"/>, <see cref="P:SadConsole.CellDecorator.Glyph"/>, and <see cref="P:SadConsole.CellDecorator.Mirror"/> match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Inequality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects do not match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="P:SadConsole.CellDecorator.Color"/>, <see cref="P:SadConsole.CellDecorator.Glyph"/>, and <see cref="P:SadConsole.CellDecorator.Mirror"/> do not match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellDecorator.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.CellDecoratorHelpers">
            <summary>
            Helpers for <see cref="T:SadConsole.CellDecorator"/> and <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> which manages null on the property.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecoratorHelpers.Pool">
            <summary>
            The list pool used for creating the decorator lists applied to cells.
            </summary>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.SetDecorators(System.Collections.Generic.IEnumerable{SadConsole.CellDecorator},SadConsole.ColoredGlyphBase)">
            <summary>
            Replaces the decorators of a glyph.
            </summary>
            <param name="decorators">The decorators to set. <see langword="null"/> clears the decorators.</param>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.SetDecorator(SadConsole.CellDecorator,SadConsole.ColoredGlyphBase)">
            <summary>
            Replaces the decorators of a glyph with a single decorator.
            </summary>
            <param name="decorator">The decorator to set.</param>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.AddDecorators(System.Collections.Generic.IEnumerable{SadConsole.CellDecorator},SadConsole.ColoredGlyphBase)">
            <summary>
            Adds the decorators to a glyph.
            </summary>
            <param name="decorators">The decorators to add. Duplicates are skipped.</param>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.AddDecorator(SadConsole.CellDecorator,SadConsole.ColoredGlyphBase)">
            <summary>
            Adds the specified decorator to a glyph.
            </summary>
            <param name="decorator">The decorator to add.</param>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.RemoveDecorators(System.Collections.Generic.IEnumerable{SadConsole.CellDecorator},SadConsole.ColoredGlyphBase)">
            <summary>
            Removes the specified decorators from a glyph. If no decorators remain on the glyph, the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> collection is set to <see langword="null"/>.
            </summary>
            <param name="decorators">The decorators to remove.</param>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.RemoveAllDecorators(SadConsole.ColoredGlyphBase)">
            <summary>
            Removes all decorators from a glyph, returns the list to the pool, and sets the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> collection to <see langword="null"/>.
            </summary>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.RemoveDecorator(SadConsole.CellDecorator,SadConsole.ColoredGlyphBase)">
            <summary>
            Removes the specified decorator from a glyph. If no decorators remain on the glyph, the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> collection is set to <see langword="null"/>.
            </summary>
            <param name="decorator">The decorator to remove.</param>
            <param name="glyph">The glyph to alter.</param>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.CloneDecorators(SadConsole.ColoredGlyphBase)">
            <summary>
            Returns a new list of decorators from the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> property of <paramref name="glyph"/>.
            </summary>
            <param name="glyph">The glyph to copy the decorators from.</param>
            <returns>A list with all of the decorators from <paramref name="glyph"/>. If the glyph's decorators are <see langword="null"/>, <see langword="null"/> is returned.</returns>
        </member>
        <member name="M:SadConsole.CellDecoratorHelpers.ItemsMatch(System.Collections.Generic.List{SadConsole.CellDecorator},System.Collections.Generic.List{SadConsole.CellDecorator})">
            <summary>
            Determines whether the contents of two <see cref="T:SadConsole.CellDecorator"/> arrays are equal.
            </summary>
            <param name="self">The first object to compare.</param>
            <param name="other">The second object to compare.</param>
            <returns>A boolean value to indicate whether or not the two arrays are considered equal.</returns>
        </member>
        <member name="T:SadConsole.CellSurface">
            <summary>
            An array of <see cref="T:SadConsole.ColoredGlyphBase"/> objects used to represent a 2D surface.
            </summary>
        </member>
        <member name="E:SadConsole.CellSurface.IsDirtyChanged">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedDown">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedRight">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedLeft">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.TimesShiftedUp">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.UsePrintProcessor">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Surface">
            <summary>
            Returns this object.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Effects">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.IsDirty">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.DefaultForeground">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.DefaultBackground">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.DefaultGlyph">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.View">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.ViewWidth">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.ViewHeight">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Area">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Width">
            <summary>
            The total width of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Height">
            <summary>
            The total height of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.IsScrollable">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.ViewPosition">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Cells">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Count">
            <summary>
            The count of glyphs this surface contains.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Item(SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Range)">
            <summary>
            Given a position, returns the "value" associated with that location.
            </summary>
            <param name="range">The cells to return from the array.</param>
            <returns>The cells associated with the specified range.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The visible width of the surface in cells.</param>
            <param name="viewHeight">The visible height of the surface in cells.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The width of the surface in cells.</param>
            <param name="viewHeight">The height of the surface in cells.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(SadRogue.Primitives.GridViews.IGridView{SadConsole.ColoredGlyphBase},System.Int32,System.Int32)">
            <summary>
            Creates a new surface from a grid view with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="surface">The surface to use as the source of cells.</param>
            <param name="visibleWidth">Optional view width. If <c>0</c>, the view width matches the width of the surface.</param>
            <param name="visibleHeight">Optional view height. If <c>0</c>, the view width matches the height of the surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Resize(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface(SadConsole.ColoredGlyphBase[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellSurface.SetIsDirtySafe">
            <summary>
            Sets <see cref="P:SadConsole.CellSurface.IsDirty"/> to <see langword="true"/> without triggering <see cref="M:SadConsole.CellSurface.OnIsDirtyChanged"/>.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.OnIsDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.OnCellsReset">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.Cells"/> property is reset.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="T:SadConsole.ColoredGlyph">
            <summary>
            Represents an individual piece of a <see cref="T:SadConsole.ICellSurface"/> containing a glyph, foreground color, background color, and a mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor">
            <summary>
            Creates a cell with a white foreground, black background, glyph 0, and no mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color)">
            <summary>
            Creates a cell with the specified foreground, black background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a cell with the specified foreground, specified background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates a cell with the specified foreground, background, and glyph, with no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, mirror, and visibility.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visibility of the glyph.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean,System.Collections.Generic.List{SadConsole.CellDecorator})">
            <summary>
            Creates a cell with the specified foreground, background, glyph, mirror effect, visibility and decorators.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visibility of the glyph.</param>
            <param name="decorators">Decorators for the cell.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clear">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Matches(SadConsole.ColoredGlyph)">
            <summary>
            Checks if this <see cref="T:SadConsole.ColoredGlyph"/> object's properties match another's.
            </summary>
            <param name="other">The other object to check.</param>
            <returns>Returns <see langword="true"/> when the object's properties match; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SadConsole.ColoredGlyphAndEffect">
            <summary>
            A <see cref="T:SadConsole.ColoredGlyphBase"/> with a <see cref="T:SadConsole.Effects.ICellEffect"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphAndEffect.Effect">
            <summary>
            The effect of this cell.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyphAndEffect.FromColoredGlyph(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)">
            <summary>
            Creates a new <see cref="T:SadConsole.ColoredGlyphAndEffect"/> from a <see cref="T:SadConsole.ColoredGlyphBase"/> with the specified effect.
            </summary>
            <param name="glyph">The glyph.</param>
            <param name="effect">When provided, sets the <see cref="P:SadConsole.ColoredGlyphAndEffect.Effect"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredGlyphAndEffect.CopyAppearanceTo(SadConsole.ColoredGlyphAndEffect,System.Boolean)">
            <summary>
            Copies the visual appearance to the specified cell. This includes foreground, background, glyph, mirror effect and decorators.
            </summary>
            <param name="cell">The target cell to copy to.</param>
            <param name="deepCopy">
            Whether to perform a deep copy.  Decorators are copied to a new array when true; when false, the old
            decorator array reference is moved directly.
            </param>
        </member>
        <member name="M:SadConsole.ColoredGlyphAndEffect.CopyAppearanceFrom(SadConsole.ColoredGlyphAndEffect,System.Boolean)">
            <summary>
            Sets the foreground, background, glyph, mirror effect and decorators to the same as the specified cell.
            </summary>
            <param name="cell">The target cell to copy from.</param>
            <param name="deepCopy">
            Whether to perform a deep copy.  Decorators are copied to a new array when true; when false, the old
            decorator array reference is moved directly.
            </param>
        </member>
        <member name="M:SadConsole.ColoredGlyphAndEffect.Clear">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ColoredGlyphAndEffect.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ColoredGlyphAndEffect.Matches(SadConsole.ColoredGlyphAndEffect)">
            <summary>
            Checks if this <see cref="T:SadConsole.ColoredGlyphAndEffect"/> object's properties match another's.
            </summary>
            <param name="other">The other object to check.</param>
            <returns>Returns <see langword="true"/> when the object's properties match; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SadConsole.ColoredGlyphBase">
            <summary>
            Represents an individual piece of a <see cref="T:SadConsole.ICellSurface"/> containing a glyph, foreground color, background color, and a mirror effect.
            </summary>
        </member>
        <member name="E:SadConsole.ColoredGlyphBase.IsDirtySet">
            <summary>
            An event that is raised when the <see cref="P:SadConsole.ColoredGlyphBase.IsDirty"/> property is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.Decorators">
            <summary>
            Modifies the look of a cell with additional character.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.Foreground">
            <summary>
            The foreground color of this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.Background">
            <summary>
            The background color of this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.Glyph">
            <summary>
            The glyph index from a font for this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.Mirror">
            <summary>
            The mirror effect for this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.GlyphCharacter">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.IsVisible">
            <summary>
            <see langword="true"/> when this cell should be drawn; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphBase.IsDirty">
            <summary>
            <see langword="true"/> when this cell needs to be redrawn; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.CopyAppearanceTo(SadConsole.ColoredGlyphBase,System.Boolean)">
            <summary>
            Copies the visual appearance to the specified cell. This includes foreground, background, glyph, mirror effect and decorators.
            </summary>
            <param name="cell">The target cell to copy to.</param>
            <param name="deepCopy">
            Whether to perform a deep copy.  Decorators are copied to a new array when true; when false, the old
            decorator array reference is moved directly.
            </param>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.CopyAppearanceFrom(SadConsole.ColoredGlyphBase,System.Boolean)">
            <summary>
            Sets the foreground, background, glyph, mirror effect and decorators to the same as the specified cell.
            </summary>
            <param name="cell">The target cell to copy from.</param>
            <param name="deepCopy">
            Whether to perform a deep copy.  Decorators are copied to a new array when true; when false, the old
            decorator array reference is moved directly.
            </param>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.Clear">
            <summary>
            Resets the foreground, background, glyph, mirror effect and decorators.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.Clone">
            <summary>
            Returns a new cell with the same properties as this one.
            </summary>
            <returns>The new cell.</returns>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.Matches(SadConsole.ColoredGlyphBase)">
            <summary>
            Checks if this <see cref="T:SadConsole.ColoredGlyph"/> object's properties match another's.
            </summary>
            <param name="other">The other object to check.</param>
            <returns>Returns <see langword="true"/> when the object's properties match; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.CreateArray(System.Int32)">
            <summary>
            Creates an array of colored glyphs.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredGlyphBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.ColoredGlyphState">
            <summary>
            A <see cref="T:SadConsole.ColoredGlyphBase"/> with state information.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Decorators">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Foreground">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyphBase.Foreground"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Background">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyphBase.Background"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Glyph">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyphBase.Glyph"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.Mirror">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyphBase.Mirror"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyphState.IsVisible">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyphBase.IsVisible"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyphState.#ctor(SadConsole.ColoredGlyphBase)">
            <summary>
            Creates a new state from a cell.
            </summary>
            <param name="cell">The colored glyph this state is a copy of.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyphState.#ctor(SadConsole.CellDecorator[],SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean)">
            <summary>
            Creates a new state.
            </summary>
            <param name="decorators">Decorators for the cell.</param>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visibility of the glyph.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyphState.RestoreState(SadConsole.ColoredGlyphBase@)">
            <summary>
            Restores this state to the specified cell.
            </summary>
        </member>
        <member name="T:SadConsole.ColoredString">
            <summary>
            Represents a string that has foreground and background colors for each character in the string.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:SadConsole.ColoredGlyphAndEffect"/> from the string.
            </summary>
            <param name="index">The index in the string of the <see cref="T:SadConsole.ColoredGlyphAndEffect"/>.</param>
            <returns>The colored glyph representing the character in the string.</returns>
        </member>
        <member name="P:SadConsole.ColoredString.String">
            <summary>
            Gets or sets the characters representing this string. When set, first processes the string through <see cref="M:SadConsole.StringParser.IParser.Parse(System.ReadOnlySpan{System.Char},System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)"/> method from <see cref="P:SadConsole.ColoredString.Parser"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.Length">
            <summary>
            The total number of <see cref="T:SadConsole.ColoredGlyphAndEffect"/> characters in the string.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreGlyph">
            <summary>
            When true, instructs a caller to not render the glyphs of the string.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreForeground">
            <summary>
            When true, instructs a caller to not render the foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreBackground">
            <summary>
            When true, instructs a caller to not render the background color.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreEffect">
            <summary>
            When true, instructs a caller to not render the effect.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreMirror">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.IgnoreDecorators">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ColoredString class with the specified blank characters.
            </summary>
            <param name="capacity">The number of blank characters.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of this class with the specified string value.
            </summary>
            <param name="value">The backing string.</param>
            <param name="treatAsString">When <see langword="true"/>, sets all of the Ignore properties to <see langword="false"/>, treating this instance as a normal string.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror,SadConsole.CellDecorator[])">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="foreground">The foreground color for each character.</param>
            <param name="background">The background color for each character.</param>
            <param name="mirror">The mirror for each character.</param>
            <param name="decorators">The decorators to apply to each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadConsole.ColoredGlyphAndEffect)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="appearance">The appearance to use for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredGlyphAndEffect[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredGlyphAndEffect"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredGlyphBase[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredGlyphBase"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.Clone">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object by cloning this instance.
            </summary>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance from the index to the end.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <param name="count">The count of <see cref="T:SadConsole.ColoredGlyphAndEffect"/> objects to copy.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SetEffect(SadConsole.Effects.ICellEffect)">
            <summary>
            Applies the referenced cell effect to every character in the colored string.
            </summary>
            <param name="effect">The effect to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetForeground(SadRogue.Primitives.Color)">
            <summary>
            Applies the referenced color to every character foreground in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetBackground(SadRogue.Primitives.Color)">
            <summary>
            Applies the referenced color to every character background in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetGlyph(System.Int32)">
            <summary>
            Applies the referenced glyph to every character in the colored string.
            </summary>
            <param name="glyph">The glyph to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetMirror(SadConsole.Mirror)">
            <summary>
            Applies the mirror value to each character in the colored string.
            </summary>
            <param name="mirror">The mirror mode.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetDecorators(System.Collections.Generic.IEnumerable{SadConsole.CellDecorator})">
            <summary>
            Applies the decorators to each character in the colored string.
            </summary>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetDecorators(SadConsole.CellDecorator[])">
            <summary>
            Applies the decorators to each character in the colored string.
            </summary>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.ColoredString.ToString">
            <summary>
            Returns a string representing the glyphs in this object.
            </summary>
            <returns>A string composed of each glyph in this object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredGlyphAndEffect"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredGlyphAndEffect"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.FromGradient(SadRogue.Primitives.Gradient,System.String)">
            <summary>
            Creates a new colored string from the specified gradient and text.
            </summary>
            <param name="colors">The gradient of colors to apply to the text.</param>
            <param name="text">The text the colored string contains.</param>
            <returns>A colored string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,SadConsole.ColoredString)">
            <summary>
            Combines two ColoredString objects into a single ColoredString object. Ignore* values are only copied when both strings Ignore* values match.
            </summary>
            <param name="string1">The left-side of the string.</param>
            <param name="string2">The right-side of the string.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,System.String)">
            <summary>
            Combines a colored string and string. The last colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The colored string.</param>
            <param name="string2">The string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(System.String,SadConsole.ColoredString)">
            <summary>
            Combines a string and a colored string. The first colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The string.</param>
            <param name="string2">The colored string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="P:SadConsole.ColoredString.Parser">
            <summary>
            The string parser to use for transforming strings into <see cref="T:SadConsole.ColoredString"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Components.CoroutineHandlerComponent">
            <summary>
            An implementation of <see cref="T:Coroutine.CoroutineHandlerInstance"/> that calls <see cref="M:Coroutine.CoroutineHandlerInstance.Tick(System.TimeSpan)"/> every time <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> is called.
            </summary>
        </member>
        <member name="P:SadConsole.Components.CoroutineHandlerComponent.SortOrder">
            <summary>
            The sort order for this component.
            </summary>
        </member>
        <member name="M:SadConsole.Components.CoroutineHandlerComponent.#ctor">
            <summary>
            Creates a new instance of the coroutine handler.
            </summary>
        </member>
        <member name="T:SadConsole.Components.Cursor">
            <summary>
            A cursor that is attached to a <see cref="T:SadConsole.Console"/> used for printing.
            </summary>
        </member>
        <member name="F:SadConsole.Components.Cursor.DefaultCursorGlyph">
            <summary>
            The default glyph used for a new cursor. Value 219.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Cursor.KeyboardPreview">
            <summary>
            Raised when the keyboard is processing keys. Each key is sent to this event and can be cancelled
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorRenderCell">
            <summary>
            Cell used to render the cursor on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorRenderCellActiveState">
            <summary>
            Used in rendering. The cell after the effect has been applied.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintAppearance">
            <summary>
            Appearance used when printing text. <see cref="P:SadConsole.Components.Cursor.PrintOnlyCharacterData"/> must be set to <see langword="false"/> for this to apply.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintAppearanceMatchesHost">
            <summary>
            When <see langword="true"/>, printing will use the host's <see cref="P:SadConsole.ICellSurface.DefaultForeground"/> and <see cref="P:SadConsole.ICellSurface.DefaultBackground"/> color properties.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintEffect">
            <summary>
            This effect is applied to each cell printed by the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorRenderEffect">
            <summary>
            This is the cursor visible effect, like blinking.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.CursorGlyph">
            <summary>
            Sets the glyph used in rendering. A shortcut to <see cref="P:SadConsole.Components.Cursor.CursorRenderCell"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.PrintOnlyCharacterData">
            <summary>
            When <see langword="true"/>, indicates that the cursor, when printing, should not use the <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/> property in determining the color/effect of the cell, but keep the cell the same as it was.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.MouseClickReposition">
            <summary>
            When <see langword="true"/>, left-clicking on the host surface will reposition the cursor to the clicked position.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.MouseClickRepositionHandlesMouse">
            <summary>
            When <see langword="true"/>, returns a handled status from the mouse processor when the <see cref="P:SadConsole.Components.Cursor.MouseClickReposition"/> is enabled. This prevents further left-mouse processing on the host.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.IsVisible">
            <summary>
            Shows or hides the cursor. This does not affect how the cursor operates.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.IsEnabled">
            <summary>
            When <see langword="false"/>, prevents the cursor from running on the host.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.ApplyCursorEffect">
            <summary>
            When <see langword="false"/>, prevents the <see cref="P:SadConsole.Components.Cursor.CursorRenderEffect"/> from being applied.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.UsePrintEffect">
            <summary>
            When <see langword="true"/>, applies the <see cref="P:SadConsole.Components.Cursor.PrintEffect"/> to the cursor when it prints.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.Position">
            <summary>
            Gets or sets the location of the cursor on the console.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.DisableWordBreak">
            <summary>
            When true, prevents any print method from breaking words up by spaces when wrapping lines.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.DisablePrintAutomaticLineFeed">
            <summary>
            When <see langword="true"/>, printing characters to the end of a line won't wrap to the next line. Defaults to <see langword="false"/>, which moves the cursor to the next line if printing goes past the end of the line.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.UseLinuxLineEndings">
            <summary>
            Enables linux-like string parsing where a \n behaves like a \r\n.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.UseStringParser">
            <summary>
            Indicates this cursor should process te string through the <see cref="M:SadConsole.StringParser.IParser.Parse(System.ReadOnlySpan{System.Char},System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)"/> method from <see cref="P:SadConsole.ColoredString.Parser"/> to create a colored string when using <see cref="M:SadConsole.Components.Cursor.Print(System.String)"/> or <see cref="M:SadConsole.Components.Cursor.Print(System.String,SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.Row">
            <summary>
            Gets or sets the row of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.Column">
            <summary>
            Gets or sets the column of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.AutomaticallyShiftRowsUp">
            <summary>
            Indicates that when the cursor goes past the last cell of the console, that the rows should be shifted up when the cursor is automatically reset to the next line.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Cursor.SortOrder">
            <summary>
            Sets the sort order of this component within the host.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Cursor.#ctor">
            <summary>
            Creates a new instance of the cursor as a component.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Cursor.#ctor(SadConsole.ICellSurface)">
            <summary>
            Creates a new instance of the cursor that works with the specified surface.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:SadConsole.Components.Cursor.ApplyDefaultCursorEffect">
            <summary>
            Resets the <see cref="P:SadConsole.Components.Cursor.CursorRenderEffect"/> back to the default.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Cursor.RestartCursorEffect">
            <summary>
            Clones and reassigns <see cref="P:SadConsole.Components.Cursor.CursorRenderEffect"/> to restart it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearanceToHost">
            <summary>
            Sets the cursor appearance to the console's default foreground and background.
            </summary>
            <returns>This cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when the cursor is not attached to any surface.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearance(SadConsole.ColoredGlyphBase)">
            <summary>
            Sets <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/>.
            </summary>
            <param name="appearance">The appearance to set.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearance(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Sets <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/>.
            </summary>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.SetPrintAppearance(SadRogue.Primitives.Color)">
            <summary>
            Sets <see cref="P:SadConsole.Components.Cursor.PrintAppearance"/>, only changing the foreground color.
            </summary>
            <param name="foreground">The foreground color.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Print(System.String)">
            <summary>
            Prints text to the console using the default print appearance.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Print(System.String,SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)">
            <summary>
            Prints text on the console.
            </summary>
            <param name="text">The text to print.</param>
            <param name="template">The way the text will look when it is printed.</param>
            <param name="templateEffect">Effect to apply to the text as its printed. Can be <see langword="null"/>.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.PrintCoroutine(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string, but with coroutine.
            </summary>
            <param name="text">The text to print.</param>
            <returns>An enumerator that returns at each character printed.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Print(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.CarriageReturn">
            <summary>
            Returns the cursor to the start of the current line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.LineFeed">
            <summary>
            Moves the cursor down a line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.NewLine">
            <summary>
            Calls the <see cref="M:SadConsole.Components.Cursor.CarriageReturn"/> and <see cref="M:SadConsole.Components.Cursor.LineFeed"/> methods in a single call.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Move(SadRogue.Primitives.Point)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="position">The destination of the cursor.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Move(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="x">The x (horizontal) of the position.</param>
            <param name="y">The x (vertical) of the position.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Up(System.Int32)">
            <summary>
            Moves the cusor up by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Down(System.Int32)">
            <summary>
            Moves the cusor down by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Left(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.LeftWrap(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Right(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.RightWrap(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Components.Cursor.Erase(System.Int32)">
            <summary>
            Clears the cell at the position of the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cell. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.EraseColumn(System.Int32)">
            <summary>
            Clears the cells in the same column as the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cells. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.EraseRow(System.Int32)">
            <summary>
            Clears the cells in the same row as the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cells. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.EraseUp(System.Int32)">
            <summary>
            Clears the cells above the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cells. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.EraseDown(System.Int32)">
            <summary>
            Clears the cells below the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cells. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.EraseLeft(System.Int32)">
            <summary>
            Clears the cells to the left of the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cells. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.EraseRight(System.Int32)">
            <summary>
            Clears the cells to the right of the cursor.
            </summary>
            <param name="glyph">The glyph to set on the erased cells. Defaults to glyph index 0.</param>
            <returns>The cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when a host isn't attached to the cursor.</exception>
        </member>
        <member name="M:SadConsole.Components.Cursor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Cursor.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Cursor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Components.IComponent">
            <summary>
            A component that can be added to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsUpdate">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsRender">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsMouse">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsKeyboard">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the render frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host console.</param>
            <param name="state">The mouse state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host that added this component.</param>
            <param name="keyboard">The keyboard state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnAdded(SadConsole.IScreenObject)">
            <summary>
            Called when the component is added to a host.
            </summary>
            <param name="host">The host that added the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnRemoved(SadConsole.IScreenObject)">
            <summary>
            Called when the component is removed from the host.
            </summary>
            <param name="host">The host that removed the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnHostUpdated(SadConsole.IScreenObject)">
            <summary>
            Called when various states in the host change.
            </summary>
            <param name="host">The host that uses this component.</param>
        </member>
        <member name="T:SadConsole.Components.IComponentHost">
            <summary>
            Provides a collection of <see cref="T:SadConsole.Components.IComponent"/> objects.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponentHost.SadComponents">
            <summary>
            A collection of components processed by this console.
            </summary>
        </member>
        <member name="M:SadConsole.Components.IComponentHost.GetSadComponent``1">
            <summary>
            Gets the first component of the specified type.
            </summary>
            <typeparam name="TComponent">The component to find.</typeparam>
            <returns>The component if found, otherwise null.</returns>
        </member>
        <member name="M:SadConsole.Components.IComponentHost.GetSadComponents``1">
            <summary>
            Gets components of the specified types.
            </summary>
            <typeparam name="TComponent">The component to find</typeparam>
            <returns>The components found.</returns>
        </member>
        <member name="M:SadConsole.Components.IComponentHost.HasSadComponent``1(``0@)">
            <summary>
            Indicates whether or not the component exists in the <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> collection.
            </summary>
            <typeparam name="TComponent">The component to find.</typeparam>
            <returns><see langword="true"/> when the component exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Components.IComponentHost.CompareComponent(SadConsole.Components.IComponent,SadConsole.Components.IComponent)">
            <summary>
            Uses the <see cref="P:SadConsole.Components.IComponent.SortOrder"/> to compare the <paramref name="left"/> component with the <paramref name="right"/> component.
            </summary>
            <param name="left">The first component to compare.</param>
            <param name="right">The second component to compare.</param>
            <returns><code>1</code> when the <paramref name="left"/> sort order is greater than <paramref name="right"/>; <code>-1</code> when <paramref name="left"/> is less than <paramref name="right"/>; <code>0</code> when they are equal.</returns>
        </member>
        <member name="T:SadConsole.Components.InputConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)"/> and <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.InputConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="keyboard">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.KeyboardConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.KeyboardConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="keyboard">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.LayeredSurface">
            <summary>
            Manages a set of surface layers.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LayeredSurface.IsAttached">
            <summary>
            Indicates that the entity renderer has been added to a parent object.
            </summary>
        </member>
        <member name="F:SadConsole.Components.LayeredSurface._screen">
            <summary>
            The parent screen hosting this component.
            </summary>
        </member>
        <member name="F:SadConsole.Components.LayeredSurface._screenCachedView">
            <summary>
            A cached copy of the <see cref="P:SadConsole.ICellSurface.View"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="F:SadConsole.Components.LayeredSurface._layers">
            <summary>
            The entities to process.
            </summary>
        </member>
        <member name="F:SadConsole.Components.LayeredSurface.RenderStep">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:SadConsole.Components.LayeredSurface.View">
            <summary>
            The visible portion of the surface layers.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LayeredSurface.DefaultBackground">
            <summary>
            The default color to clear the rendering surface. This is used instead of the individual layer's default background.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LayeredSurface.Count">
            <summary>
            The numbers of layers.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LayeredSurface.IsReadOnly">
            <summary>
            Always returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LayeredSurface.Item(System.Int32)">
            <summary>
            Gets or sets a layer by index.
            </summary>
            <param name="index">The index of the layer to get or set.</param>
            <returns>The layer.</returns>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Add(SadConsole.ICellSurface)">
            <summary>
            Adds a layer to this component.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.AddRange(System.Collections.Generic.IEnumerable{SadConsole.ICellSurface})">
            <summary>
            Adds a collection if layers to this component.
            </summary>
            <param name="layers">The layers to add.</param>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Replace(SadConsole.ICellSurface,SadConsole.ICellSurface)">
            <summary>
            Replaces a layer with a new instance.
            </summary>
            <param name="oldLayer">The layer to remove.</param>
            <param name="newLayer">The layer to add.</param>
            <exception cref="T:System.ArgumentException">
            <para>Thrown when the old layer doesn't exist in this collection.</para>
            <para>- or -</para>
            <para>Thrown when the new layer already exists in this collection.</para>
            <para>- or -</para>
            <para>Thrown when the new layer isn't the same size as the other layers.</para>
            </exception>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Remove(SadConsole.ICellSurface)">
            <summary>
            Removes a layer from this component.
            </summary>
            <param name="layer">The layer to remove.</param>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.IndexOf(SadConsole.ICellSurface)">
            <summary>
            Returns the index of the specified layer.
            </summary>
            <param name="layer">The layer to search for.</param>
            <returns>The index of the layer.</returns>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Insert(System.Int32,SadConsole.ICellSurface)">
            <summary>
            Inserts the layer at the specified index.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="layer">The layer to insert.</param>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.RemoveAt(System.Int32)">
            <summary>
            Removes a layer at the specified index.
            </summary>
            <param name="index">The index of the layer to remove.</param>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Clear">
            <summary>
            Removes all layers.
            </summary>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Clear(SadConsole.ICellSurface)">
            <summary>
            Removes all layers and adds the <paramref name="initialLayer"/> parameter as the first layer.
            </summary>
            <param name="initialLayer">The new first layer.</param>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Contains(SadConsole.ICellSurface)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.CopyTo(SadConsole.ICellSurface[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Create">
            <summary>
            Adds a new layer. The layer is based on the first layer's width and height.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.LayeredSurface.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Components.LogicComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> and <see cref="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LogicComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.Render(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.LogicComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.MouseConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.MouseConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.ProcessMouse(SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.ObjectComponentMove">
            <summary>
            Moves a <see cref="T:SadConsole.IScreenObject"/> with the arrow keys.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.Amount">
            <summary>
            The amount to move the object by.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.LeftKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Left"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.RightKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Right"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.UpKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Up"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ObjectComponentMove.DownKey">
            <summary>
            The key to move the object <see cref="F:SadRogue.Primitives.Direction.Down"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Components.ObjectComponentMove.#ctor">
            <summary>
            Creates a new instance of the object with an <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/> of 1.
            </summary>
        </member>
        <member name="M:SadConsole.Components.ObjectComponentMove.ProcessKeyboard(SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Moves the <paramref name="host"/> by <see cref="P:SadConsole.Components.ObjectComponentMove.Amount"/> when the appropriate key is pressed.
            </summary>
            <param name="host"></param>
            <param name="keyboard"></param>
            <param name="handled"></param>
        </member>
        <member name="T:SadConsole.Components.Overlay">
            <summary>
            A surface that's rendered on top of a host surface.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Overlay.Surface">
            <summary>
            A surface that's sized to match.
            </summary>
        </member>
        <member name="F:SadConsole.Components.Overlay.RenderStep">
            <summary>
            Internal use.
            </summary>
            <remarks>
            The render step used to draw the overlay. This render step is added to the host object and should draw the <see cref="P:SadConsole.Components.Overlay.Surface"/> of the Overlay component.
            </remarks>
        </member>
        <member name="P:SadConsole.Components.Overlay.ClearOnAdd">
            <summary>
            When true, clears the <see cref="P:SadConsole.Components.Overlay.Surface"/> property when this object is added to a <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Overlay.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Overlay.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Overlay.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Overlay.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Overlay.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.Overlay.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Components.RenderComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Render(SadConsole.IScreenObject,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.RenderComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.RenderComponent.Render(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed from the last call to this component.</param>
        </member>
        <member name="M:SadConsole.Components.RenderComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.RenderComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.RootComponent">
            <summary>
            A component used only with <see cref="P:SadConsole.GameHost.RootComponents"/>. Runs logic before the <see cref="P:SadConsole.GameHost.Screen"/> is processed.
            </summary>
        </member>
        <member name="M:SadConsole.Components.RootComponent.Run(System.TimeSpan)">
            <summary>
            Code to run during update.
            </summary>
            <param name="delta">The time that has elapsed since the last frame.</param>
        </member>
        <member name="T:SadConsole.Components.SurfaceComponentFollowTarget">
            <summary>
            Add to a <see cref="T:SadConsole.IScreenSurface"/> to have the <see cref="P:SadConsole.ICellSurface.ViewPosition"/> center on a specific object.
            </summary>
        </member>
        <member name="P:SadConsole.Components.SurfaceComponentFollowTarget.Target">
            <summary>
            Target to have the surface follow.
            </summary>
        </member>
        <member name="M:SadConsole.Components.SurfaceComponentFollowTarget.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Components.SurfaceComponentFollowTarget.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.Timer">
            <summary>
            A simple timer with callback.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Timer.TimerElapsed">
            <summary>
            Called when the timer elapses.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Timer.TimerRestart">
            <summary>
            Called when the timer restarts.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Timer.TimerStart">
            <summary>
            Called when the timer starts.
            </summary>
        </member>
        <member name="E:SadConsole.Components.Timer.TimerStop">
            <summary>
            Called when the timer stops.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Timer.Repeat">
            <summary>
            If true, the timer will restart when the time has elapsed.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Timer.TimerAmount">
            <summary>
            How many milliseconds to cause the timer to trigger.
            </summary>
        </member>
        <member name="P:SadConsole.Components.Timer.IsRunning">
            <summary>
            When <see langword="true"/>, indicates that the timer is running; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Timer.#ctor(System.TimeSpan)">
            <summary>
            Creates a new timer.
            </summary>
            <param name="triggerTime">Duration of the timer.</param>
        </member>
        <member name="M:SadConsole.Components.Timer.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Updates the timer with the time since the last call.
            </summary>
            <param name="console">The parent object.</param>
            <param name="delta">The time since the last frame update.</param>
        </member>
        <member name="M:SadConsole.Components.Timer.Restart">
            <summary>
            Restarts the timer; raises the <see cref="E:SadConsole.Components.Timer.TimerRestart"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Timer.Start">
            <summary>
            Starts the timer; raises the <see cref="E:SadConsole.Components.Timer.TimerStart"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.Components.Timer.Stop">
            <summary>
            Starts the timer; raises the <see cref="E:SadConsole.Components.Timer.TimerStop"/> event.
            </summary>
        </member>
        <member name="T:SadConsole.Components.UpdateComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.UpdateComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Configuration.Builder">
            <summary>
            Composes a game host object.
            </summary>
        </member>
        <member name="P:SadConsole.Configuration.Builder.Configs">
            <summary>
            A collection of <see cref="T:SadConsole.Configuration.IConfigurator"/> objects.
            </summary>
        </member>
        <member name="M:SadConsole.Configuration.Builder.GetOrCreateConfig``1">
            <summary>
            Adds or gets the specified config object from the <see cref="P:SadConsole.Configuration.Builder.Configs"/> collection.
            </summary>
            <typeparam name="TConfig">The type of config object.</typeparam>
            <returns>A new instance of <typeparamref name="TConfig"/> if it's not found in the <see cref="P:SadConsole.Configuration.Builder.Configs"/> collection. If found in the collection, that instance is returned.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Builder.Run(SadConsole.GameHost)">
            <summary>
            Runs each config object in the <see cref="P:SadConsole.Configuration.Builder.Configs"/> collection with the specified game instance.
            </summary>
            <param name="game">The game being created.</param>
        </member>
        <member name="T:SadConsole.Configuration.Extensions">
            <summary>
            Extensions to the <see cref="T:SadConsole.Configuration.Builder"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.OnStart(SadConsole.Configuration.Builder,System.EventHandler{SadConsole.GameHost})">
            <summary>
            Sets an event handler for the <see cref="E:SadConsole.GameHost.Started"/> event.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="instance_Started">The event handler</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.OnEnd(SadConsole.Configuration.Builder,System.EventHandler{SadConsole.GameHost})">
            <summary>
            Sets an event handler for the <see cref="E:SadConsole.GameHost.Ending"/> event.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="instance_Ending">The event handler</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.AddFrameUpdateEvent(SadConsole.Configuration.Builder,System.EventHandler{SadConsole.GameHost})">
            <summary>
            Sets an event handler for the <see cref="E:SadConsole.GameHost.FrameUpdate"/> event.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="instance_FrameUpdate">The event handler</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.AddFrameRenderEvent(SadConsole.Configuration.Builder,System.EventHandler{SadConsole.GameHost})">
            <summary>
            Sets an event handler for the <see cref="E:SadConsole.GameHost.FrameRender"/> event.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="instance_FrameRender">The event handler</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.UseDefaultConsole(SadConsole.Configuration.Builder)">
            <summary>
            Sets the <see cref="P:SadConsole.GameHost.StartingConsole"/> and <see cref="P:SadConsole.GameHost.Screen"/> properties to new console when the game starts.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.IsStartingScreenFocused(SadConsole.Configuration.Builder,System.Boolean)">
            <summary>
            Either focuses or unfocuses the starting screen.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="value">Indicates whether or not <see cref="P:SadConsole.GameHost.Screen"/> is focused.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.ConfigureFonts(SadConsole.Configuration.Builder,System.Action{SadConsole.Configuration.FontConfig,SadConsole.GameHost})">
            <summary>
            Configures which default font to use during game startup, as well as which other fonts to load for the game.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="fontLoader">A method that provides access to the <see cref="T:SadConsole.Configuration.FontConfig"/> object that loads fonts.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.ConfigureFonts(SadConsole.Configuration.Builder,System.String,System.String[])">
            <summary>
            Configures SadConsole to use the specified font file as the default font.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="customDefaultFont">Creates the font config for SadConsole using this font file as the default.</param>
            <param name="extraFonts">Extra fonts to load into SadConsole.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.ConfigureFonts(SadConsole.Configuration.Builder,System.Boolean)">
            <summary>
            Configures SadConsole to use the built in default fonts.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="useExtendedDefault">When <see langword="true"/>, SadConsole sets the default font to <see cref="P:SadConsole.GameHost.EmbeddedFontExtended"/>; otherwise <see cref="P:SadConsole.GameHost.EmbeddedFont"/> is used.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.FixOldFontName(SadConsole.Configuration.Builder)">
            <summary>
            Adds the embedded fonts to the font dictionary with the old incorrect name.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.SetSplashScreen``1(SadConsole.Configuration.Builder)">
            <summary>
            Sets the startup splash screen to the specified object.
            </summary>
            <typeparam name="TSplashScreen">A parameterless <see cref="T:SadConsole.IScreenSurface"/> object.</typeparam>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.SetSplashScreen(SadConsole.Configuration.Builder,System.Func{SadConsole.GameHost,SadConsole.ScreenSurface[]})">
            <summary>
            Sets the startup splash screens to the array returned by the <paramref name="creator"/> delegate.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="creator">A delegate that returns an array of surface objects.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.SetStartingScreen``1(SadConsole.Configuration.Builder)">
            <summary>
            Sets the <see cref="P:SadConsole.GameHost.Screen"/> property to the specified type.
            </summary>
            <typeparam name="TRootObject">A parameterless <see cref="T:SadConsole.IScreenObject"/> object.</typeparam>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.SetStartingScreen(SadConsole.Configuration.Builder,System.Func{SadConsole.GameHost,SadConsole.IScreenObject})">
            <summary>
            Sets the <see cref="P:SadConsole.GameHost.Screen"/> property to the return value of the <paramref name="creator"/> parameter.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="creator">A method that returns an object as the starting screen.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="M:SadConsole.Configuration.Extensions.SetScreenSize(SadConsole.Configuration.Builder,System.Int32,System.Int32)">
            <summary>
            Sets the initial screen size of the window, in cells.
            </summary>
            <param name="configBuilder">The builder object that composes the game startup.</param>
            <param name="width">The cell count along the x-axis.</param>
            <param name="height">The cell count along the y-axis.</param>
            <returns>The configuration builder.</returns>
        </member>
        <member name="T:SadConsole.Configuration.FontConfig">
            <summary>
            The config settings for loading the default fonts when the game starts.
            </summary>
        </member>
        <member name="M:SadConsole.Configuration.FontConfig.UseBuiltinFont">
            <summary>
            Sets the default font to the SadConsole standard font, an IBM 8x16 font.
            </summary>
        </member>
        <member name="M:SadConsole.Configuration.FontConfig.UseBuiltinFontExtended">
            <summary>
            Sets the default font to the SadConsole extended font, an IBM 8x16 font with SadConsole specific characters past index 255.
            </summary>
        </member>
        <member name="M:SadConsole.Configuration.FontConfig.UseCustomFont(System.String)">
            <summary>
            Sets the default font in SadConsole to the specified font file.
            </summary>
            <param name="fontFile"></param>
        </member>
        <member name="M:SadConsole.Configuration.FontConfig.AddExtraFonts(System.String[])">
            <summary>
            Loads the provided font files into SadConsole.
            </summary>
            <param name="fontFiles">An array of font files to load.</param>
        </member>
        <member name="M:SadConsole.Configuration.FontConfig.Run(SadConsole.Configuration.Builder,SadConsole.GameHost)">
            <summary>
            Invokes the <see cref="P:SadConsole.Configuration.FontConfig.FontLoader"/> delegate.
            </summary>
            <param name="config">The builder running this configurator.</param>
            <param name="game">The game being created.</param>
        </member>
        <member name="T:SadConsole.Configuration.IConfigurator">
            <summary>
            Configuration interface that's added to the <see cref="T:SadConsole.Configuration.Builder"/> object.
            </summary>
        </member>
        <member name="M:SadConsole.Configuration.IConfigurator.Run(SadConsole.Configuration.Builder,SadConsole.GameHost)">
            <summary>
            Called by the <see cref="T:SadConsole.Configuration.Builder"/>; Runs the specific config for this object.
            </summary>
            <param name="config">The builder configuration object.</param>
            <param name="game">The game object being created.</param>
        </member>
        <member name="T:SadConsole.Configuration.SplashScreenConfig">
            <summary>
            A config object that adds splash screen objects with the <see cref="M:SadConsole.GameHost.SetSplashScreens(SadConsole.IScreenSurface[])"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Configuration.SplashScreenConfig.GenerateSplashScreen">
            <summary>
            A delegate that returns a set of splash screens to use.
            </summary>
        </member>
        <member name="T:SadConsole.Console">
            <summary>
            A surface that has a cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Console.Cursor">
            <summary>
            The virtual cursor reference.
            </summary>
        </member>
        <member name="P:SadConsole.Console.AutoCursorOnFocus">
            <summary>
            Toggles the cursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the console in cells.</param>
            <param name="height">The visible height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the console in cells.</param>
            <param name="height">The height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
            <param name="initialCells">The cells to seed the console with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new console using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.Console.OnVisibleChanged">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Console.OnFocusLost">
            <summary>
            Called when this console's focus has been lost. Hides the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocused">
            <summary>
            Called when this console is focused. Shows the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.ToString">
            <summary>
            Returns the value "Console".
            </summary>
            <returns>The string "Console".</returns>
        </member>
        <member name="T:SadConsole.Debug.Screen">
            <summary>
            A debugging screen that takes the place of the active <see cref="P:SadConsole.GameHost.Screen"/> and displays information about SadConsole.
            </summary>
        </member>
        <member name="M:SadConsole.Debug.Screen.Show(SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Displays the debugger.
            </summary>
            <param name="font">The font to use the debugging screen.</param>
            <param name="fontSize">The size of the font.</param>
        </member>
        <member name="M:SadConsole.Debug.Screen.Show">
            <summary>
            Shows the debug screen with the default font and size.
            </summary>
        </member>
        <member name="T:SadConsole.DrawCalls.DrawCallCustom">
            <summary>
            A draw call that invokes an <see cref="T:System.Action"/> delegate.
            </summary>
        </member>
        <member name="P:SadConsole.DrawCalls.DrawCallCustom.DrawCallback">
            <summary>
            The delegate to call.
            </summary>
        </member>
        <member name="M:SadConsole.DrawCalls.DrawCallCustom.#ctor(System.Action)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="draw">The delegate to call when the draw call is drawn.</param>
        </member>
        <member name="M:SadConsole.DrawCalls.DrawCallCustom.Draw">
            <summary>
            Invokes <see cref="P:SadConsole.DrawCalls.DrawCallCustom.DrawCallback"/>.
            </summary>
        </member>
        <member name="T:SadConsole.DrawCalls.IDrawCall">
            <summary>
            A draw call used by final rendering.
            </summary>
        </member>
        <member name="M:SadConsole.DrawCalls.IDrawCall.Draw">
            <summary>
            Draws an object.
            </summary>
        </member>
        <member name="T:SadConsole.EasingFunctions.EasingBase">
            <summary>
            The base class for an easing function.
            </summary>
        </member>
        <member name="P:SadConsole.EasingFunctions.EasingBase.Mode">
            <summary>
            The easing mode.
            </summary>
        </member>
        <member name="M:SadConsole.EasingFunctions.EasingBase.#ctor">
            <summary>
            Creates a new instance of this type.
            </summary>
        </member>
        <member name="M:SadConsole.EasingFunctions.EasingBase.Ease(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called to apply an easing function to the value.
            </summary>
            <param name="elapsedTime">The total time applied to the function.</param>
            <param name="startingValue">The starting value.</param>
            <param name="endingValue">The ending value.</param>
            <param name="maxDuration">Total time applied to easing.</param>
            <returns>A calculated value.</returns>
        </member>
        <member name="T:SadConsole.EasingFunctions.EasingMode">
            <summary>
            The types of easing modes.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Blink">
            <summary>
            Switches between the normal foreground of a cell and a specified color for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkSpeed">
            <summary>
            How long it takes to transition from blinking in and out.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.UseCellBackgroundColor">
            <summary>
            When true, uses the current cells background color for fading instead of the value of <see cref="P:SadConsole.Effects.Blink.BlinkOutColor"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkOutColor">
            <summary>
            The color the foreground blinks to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.Duration">
            <summary>
            The total duraction this effect will run for, before being flagged as finished. <see cref="F:System.TimeSpan.MaxValue"/> represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.#ctor">
            <summary>
            Creates a new instance of the blink effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blink.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blink.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blink.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.BlinkGlyph">
            <summary>
            Switches between the glyph of a cell and a specified glyph for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.GlyphIndex">
            <summary>
            The glyph index to blink into.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.Duration">
            <summary>
            The total duraction this effect will run for, before being flagged as finished. <see cref="F:System.TimeSpan.MaxValue"/> represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.#ctor">
            <summary>
            Creates an instance of the blink glyph effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.Blinker">
            <summary>
            Blinks the foreground and background colors of a cell with the specified colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blinker.BlinkSpeed">
            <summary>
            How long it takes to transition from blinking in and out.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blinker.BlinkOutForegroundColor">
            <summary>
            The color the foreground blinks to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blinker.BlinkOutBackgroundColor">
            <summary>
            The color the background blinks to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blinker.SwapColorsFromCell">
            <summary>
            When <see langword="true"/>, ignores the <see cref="P:SadConsole.Effects.Blinker.BlinkOutBackgroundColor"/> and <see cref="P:SadConsole.Effects.Blinker.BlinkOutForegroundColor"/> colors and instead swaps the glyph's foreground and background colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blinker.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blinker.Duration">
            <summary>
            The total duraction this effect will run for, before being flagged as finished. <see cref="F:System.TimeSpan.MaxValue"/> represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blinker.#ctor">
            <summary>
            Creates a new instance of the blink effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blinker.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blinker.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blinker.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blinker.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Blinker.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.CellEffectBase">
            <summary>
            A base class for cell effects.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._delayFinished">
            <summary>
            A flag to indidcate that the delay timer has finished.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._timeElapsed">
            <summary>
            The total time elapsed while processing the effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.CloneOnAdd">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.StartDelay">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RemoveOnFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RestoreCellOnRemoved">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RunEffectOnApply">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.#ctor">
            <summary>
            Creates a new instance of the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.CodeEffect">
            <summary>
            Effect that runs code for the apply and update actions of an effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.Id">
            <summary>
            A user defined identifier of the effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.Tag">
            <summary>
            An object associated with this effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.UseDuration">
            <summary>
            When <see langword="true" />, uses the <see cref="P:SadConsole.Effects.CodeEffect.Duration"/> timer to stop this effect; otherwise <see langword="false" />.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CodeEffect.Duration">
            <summary>
            The amount of time this effect runs for in seconds.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.#ctor(System.String,System.Func{SadConsole.Effects.CodeEffect,SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase,System.Boolean},System.Action{SadConsole.Effects.CodeEffect,System.TimeSpan},System.Action{SadConsole.Effects.CodeEffect})">
            <summary>
            Creates a cell effect that runs custom code instead of hardcoded effect actions.
            </summary>
            <param name="id">A user-definable identifier.</param>
            <param name="apply">The code to run for <see cref="M:SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)"/>.</param>
            <param name="update">The code to run for <see cref="M:SadConsole.Effects.ICellEffect.Update(System.TimeSpan)"/>.</param>
            <param name="restart">The code to run for <see cref="M:SadConsole.Effects.ICellEffect.Restart"/>.</param>
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.Clone">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CodeEffect.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.Delay">
            <summary>
            An effect that doesn't do anything except run the <see cref="P:SadConsole.Effects.CellEffectBase.StartDelay"/> timer. Usually used with the <see cref="T:SadConsole.Effects.EffectSet"/> effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Delay.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Effects.EffectSet">
            <summary>
            Chains one effect after another.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectSet.Effects">
            <summary>
            The list of effects to process.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectSet.Repeat">
            <summary>
            When <see langword="true"/>, instead of ending when finished, it will repeat. Otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectSet.DelayBetweenEffects">
            <summary>
            An artificial delay between each effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectSet.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.ToString">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.EffectSet.GetEnumerator">
            <summary>
            Gets an enumerator of all the effects.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectSet.Add(SadConsole.Effects.ICellEffect)">
            <summary>
            Adds an effect to the end of the <see cref="P:SadConsole.Effects.EffectSet.Effects"/> collection.
            </summary>
            <param name="effect">The effect to add.</param>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager">
            <summary>
            Effects manager for a text surface.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager._effects">
            <summary>
            A dictionary of effect data keyed by the effect.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager._effectCells">
            <summary>
            A dictionary of effect data keyed by the cell index.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager._backingSurface">
            <summary>
            The surface hosting this effects manager.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.Count">
            <summary>
            Gets the number of effects.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.ICellSurface)">
            <summary>
            Creates a new effects manager associated with a text surface.
            </summary>
            <param name="surface">Text surface to manage.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)">
            <summary>
            Associates a cell effect with a cell.
            </summary>
            <param name="cell">Cell to set the effect for.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of the <paramref name="cells"/> provided.
            </summary>
            <param name="cells">A list of cell indicies to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyphBase)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffects">
            <summary>
            Gets a collection of effects associated with the manager.
            </summary>
            <returns>Null if there aren't any effects.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.DropInvalidCells">
            <summary>
            Checks all the cells in this manager and removes any that are no longer in the parent surface.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)">
            <summary>
            Removes an effect and associated cells from the manager.
            </summary>
            <param name="effect">Effect to remove.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.RemoveAll">
            <summary>
            Removes all effects and associated cells.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetKnownEffect(SadConsole.Effects.ICellEffect,SadConsole.Effects.EffectsManager.ColoredGlyphEffectData@)">
            <summary>
            Gets effect data from the dictionary if it exists.
            </summary>
            <param name="effect">The effect to get.</param>
            <param name="effectData">The effect data ssociated with the effect.</param>
            <returns><see langword="true"/> when the effect exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ClearCellEffect(SadConsole.ColoredGlyphBase)">
            <summary>
            Clears the effect for the cell specified by index.
            </summary>
            <param name="cell">The cell index.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.UpdateEffects(System.TimeSpan)">
            <summary>
            Updates all known effects and applies them to their associated cells.
            </summary>
            <param name="delta">The time elapased since the last update.</param>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData">
            <summary>
            Represents a mapping of a single effect and associated cells.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.Effect">
            <summary>
            The effect.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.CellsStates">
            <summary>
            The cells affected by the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.#ctor(SadConsole.Effects.ICellEffect)">
            <summary>
            Creates a new instance of the cell-effect mapping.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.RemoveCell(SadConsole.ColoredGlyphBase,System.Boolean)">
            <summary>
            Removes a cell by index from the effect data.
            </summary>
            <param name="cell">The cell.</param>
            <param name="restoreState">If <see langword="true"/> the cell will have its original state restored; otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData.ContainsCell(SadConsole.ColoredGlyphBase)">
            <summary>
            Returns <see langword="true"/> when the cell index is already associated with the effect; otherwise <see langword="false"/>.
            </summary>
            <param name="cell">The cell to check.</param>
            <returns><see langword="true"/> to indicate the cell is associated with the effect; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.ColoredGlyphWithState">
            <summary>
            A glyph with its original state.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.Cell">
            <summary>
            The cell.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.State">
            <summary>
            The original state of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphWithState.#ctor(SadConsole.ColoredGlyphBase)">
            <summary>
            Creates a new instance of this class with the specified cell and index.
            </summary>
            <param name="cell">The cell to generate a state from.</param>
        </member>
        <member name="T:SadConsole.Effects.Fade">
            <summary>
            Fades both the background and foreground to separate colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationBackground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationForeground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeDuration">
            <summary>
            Gets or sets how long the fade takes to complete in seconds.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.Repeat">
            <summary>
            Gets or sets a value to indicate that the fade effect should repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellForeground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationForeground"/> should replace its first color stop with the cell's foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellBackground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationBackground"/> should replace its first color stop with the cell's background color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeForeground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the foreground color on the cell's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeBackground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the background color on the cell's background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.AutoReverse">
            <summary>
            Gets or sets a value to indicate that the fade effect should automatically reverse itself when it finishes going up the color spectrum. By setting this to true, and setting the <see cref="P:SadConsole.Effects.Fade.Repeat"/> property to true, you can create a pulse effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellDestinationReverse">
            <summary>
            When <see cref="P:SadConsole.Effects.Fade.UseCellForeground"/> or <see cref="P:SadConsole.Effects.Fade.UseCellBackground"/> is set, and this is true, the last color in the fade will be set to the cell instead of the first.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.Fade._calculatedValue">
            <summary>
            A value used in lerping the fade.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.Fade._goingDown">
            <summary>
            Indicates the fade is currently in reverse.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.#ctor">
            <summary>
            Creates a new instance of the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.ICellEffect">
            <summary>
            The interface describing a cell effect
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.IsFinished">
            <summary>
            True when the effect is finished.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.CloneOnAdd">
            <summary>
            Flags this effect to be cloned when assigned to a cell instead of reused.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.StartDelay">
            <summary>
            A delay applied to the effect only when it first runs or is restarted.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RemoveOnFinished">
            <summary>
            When true, the effect should be disassociated with cells when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RestoreCellOnRemoved">
            <summary>
            When <see langword="true"/>, indicates the <see cref="T:SadConsole.Effects.EffectsManager"/> should restore the cell to its original state.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RunEffectOnApply">
            <summary>
            When <see langword="true"/>, indicates that the <see cref="T:SadConsole.Effects.EffectsManager"/> should run one update frame on this effect when it's first added to the manager.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <summary>
            Applies the state of the effect to a cell.
            </summary>
            <param name="cell">The surface cell using this effect.</param>
            <param name="originalState">The state of the cell prior to the effect being applied.</param>
            <returns><see langword="true"/> when this method modified the <paramref name="cell"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Update(System.TimeSpan)">
            <summary>
            Updates the state of the effect.
            </summary>
            <param name="delta">Time since the last call to this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Restart">
            <summary>
            Restarts the cell effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clone">
            <summary>
            Returns a duplicate of this effect.
            </summary>
            <returns>A new copy of this effect.</returns>
        </member>
        <member name="T:SadConsole.Effects.Recolor">
            <summary>
            Recors the foreground or the background of a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Foreground">
            <summary>
            The foreground color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Background">
            <summary>
            The background color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoForeground">
            <summary>
            When true, the <see cref="P:SadConsole.Effects.Recolor.Foreground"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoBackground">
            <summary>
            /// When true, the <see cref="P:SadConsole.Effects.Recolor.Background"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.#ctor">
            <summary>
            Creates a new instance of the effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.ApplyToCell(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Recolor.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Recolor.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Entities.AnimatedAppearanceComponent">
            <summary>
            A component for <see cref="T:SadConsole.Entities.Entity"/> that animates the <see cref="P:SadConsole.Entities.Entity.AppearanceSingle"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.AnimatedAppearanceComponent.Frames">
            <summary>
            The frames of animation.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.AnimatedAppearanceComponent.AnimationTime">
            <summary>
            The total time it takes to play all <see cref="P:SadConsole.Entities.AnimatedAppearanceComponent.Frames"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.AnimatedAppearanceComponent.IsRepeatable">
            <summary>
            When <see langword="true"/>, the animation will automatically restart after the last frame is applied. Otherwise, <see langword="false"/> and the animation stops when completed.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.AnimatedAppearanceComponent.OnAdded(SadConsole.IScreenObject)">
            <summary>
            Called by the component system when this component is added to an object. Must be of type <see cref="T:SadConsole.Entities.Entity"/>.
            </summary>
            <param name="host">The component host.</param>
            <exception cref="T:System.InvalidCastException">This component was added to a type other than <see cref="T:SadConsole.Entities.Entity"/>.</exception>
        </member>
        <member name="M:SadConsole.Entities.AnimatedAppearanceComponent.OnRemoved(SadConsole.IScreenObject)">
            <summary>
            Called by the component system when this component is removed from an object.
            </summary>
            <param name="host">The component host.</param>
        </member>
        <member name="M:SadConsole.Entities.AnimatedAppearanceComponent.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Updates the animation frame index and applies the animation to the entity.
            </summary>
            <param name="host">The component host.</param>
            <param name="delta">The time between calls to this method.</param>
        </member>
        <member name="M:SadConsole.Entities.AnimatedAppearanceComponent.Start">
            <summary>
            Starts the animation and immediately applies the current frame to the entity.
            </summary>
            <exception cref="T:System.InvalidOperationException">The animation was started but there aren't any frames to animate.</exception>
        </member>
        <member name="M:SadConsole.Entities.AnimatedAppearanceComponent.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.AnimatedAppearanceComponent.Restart">
            <summary>
            Restarts the animation at the first frame.
            </summary>
        </member>
        <member name="T:SadConsole.Entities.Entity">
            <summary>
            A positioned and animated game object.
            </summary>
        </member>
        <member name="T:SadConsole.Entities.Entity.Animated">
            <summary>
            An entity that is a an animated surface.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Animated.Animation">
            <summary>
            The animation associated with this animated entity.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Animated.DefaultCollisionRectangle">
            <summary>
            Represents the collision rectangle for this animated surface which is the size of the animation frame.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Animated.CustomCollisionRectangle">
            <summary>
            A relative collision rectangle that you can specify. Defaults to the size of the animation surface.
            </summary>
            <remarks>
            This rectangle should be declared without using the animation center. Only apply the center when you're testing for collision and reading this rectangle.
            </remarks>
        </member>
        <member name="P:SadConsole.Entities.Entity.Animated.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that this animation is dirty and needs to be redrawn.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.Animated.#ctor(SadConsole.AnimatedScreenObject)">
            <summary>
            Creates a new instance of this type from an animated screen surface.
            </summary>
            <param name="surface">The animation to use.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.Animated.Update(System.TimeSpan)">
            <summary>
            Updates the <see cref="P:SadConsole.Entities.Entity.Animated.Animation"/>.
            </summary>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="E:SadConsole.Entities.Entity.IsDirtyChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.Entities.Entity.IsDirty"/> property changes value.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.Name">
            <summary>
            A friendly name of the game object.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.ZIndex">
            <summary>
            The drawing layer this entity is drawn at
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.IsDirty">
            <summary>
            Indicates this entity's visual appearance has changed.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadRogue.Primitives.IPositionable.Position"/> of the entity as if it is pixels and not cells.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.AppearanceSingle">
            <summary>
            The appearance of the entity when <see cref="P:SadConsole.Entities.Entity.IsSingleCell"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.AppearanceSurface">
            <summary>
            The appearance of the entity when <see cref="P:SadConsole.Entities.Entity.IsSingleCell"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.IsSingleCell">
            <summary>
            When <see langword="true"/>, indicates that this entity is a single cell entity; otherwise <see langword="false"/> and it's an animated surface entity.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.Entities.Entity.Animated,System.Int32)">
            <summary>
            Creates a new entity as an animated surface.
            </summary>
            <param name="appearance">The surface appearance to use for the entity.</param>
            <param name="zIndex">The rendering order. Higher values are drawn on top of lower values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.AnimatedScreenObject,System.Int32)">
            <summary>
            Creates a new entity as an animated surface.
            </summary>
            <param name="appearance">The surface appearance to use for the entity.</param>
            <param name="zIndex">The rendering order. Higher values are drawn on top of lower values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.Entities.Entity.SingleCell,System.Int32)">
            <summary>
            Creates a new entity as a single cell.
            </summary>
            <param name="appearance">The single cell appearance to use for the entity.</param>
            <param name="zIndex">The rendering order. Higher values are drawn on top of lower values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadConsole.ColoredGlyphBase,System.Int32)">
            <summary>
            Creates a new entity, copying the provided appearance to this entity.
            </summary>
            <param name="appearance">The appearance of the entity.</param>
            <param name="zIndex">The rendering order. Lower values are under higher values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,System.Int32)">
            <summary>
            Creates a new entity, copying the provided appearance to this entity.
            </summary>
            <param name="foreground">The foreground color of the entity.</param>
            <param name="background">The background color of the entity.</param>
            <param name="glyph">The glyph color of the entity.</param>
            <param name="zIndex">The rendering order. Lower values are under higher values.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.OnPositionChanged(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Entity.OnIsDirtyChanged">
            <summary>
            Raises the <see cref="E:SadConsole.Entities.Entity.IsDirtyChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Entities.Entity.Update(System.TimeSpan)">
            <summary>
            If an effect is applied to the cell, updates the effect.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SadConsole.Entities.Entity.ToString">
            <summary>
            Returns the name of the entity prefixed with "Entity - ".
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SadConsole.Entities.Entity.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.Entities.Entity"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.Entities.Entity"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns>The entity.</returns>
        </member>
        <member name="T:SadConsole.Entities.Entity.EntityMovedEventArgs">
            <summary>
            Arguments for the entity moved event.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.EntityMovedEventArgs.Entity">
            <summary>
            The entity associated with the event.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.Entity.EntityMovedEventArgs.FromPosition">
            <summary>
            The position the <see cref="F:SadConsole.Entities.Entity.EntityMovedEventArgs.Entity"/> moved from.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.EntityMovedEventArgs.#ctor(SadConsole.Entities.Entity,SadRogue.Primitives.Point)">
            <summary>
            Creates a new event args for the entity movement.
            </summary>
            <param name="entity">The entity associated with the event.</param>
            <param name="oldPosition">The position the entity moved from.</param>
        </member>
        <member name="T:SadConsole.Entities.Entity.SingleCell">
            <summary>
            An entity that is a single cell.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.SingleCell.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that this cell is dirty and needs to be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.SingleCell.Appearance">
            <summary>
            Represents what the entity looks like.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.Entity.SingleCell.Effect">
            <summary>
            An effect that can be applied to the <see cref="P:SadConsole.Entities.Entity.SingleCell.Appearance"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.Entity.SingleCell.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates a new entity with the specified foreground, background, and glyph.
            </summary>
            <param name="foreground">The foreground color of the entity.</param>
            <param name="background">The background color of the entity.</param>
            <param name="glyph">The glyph color of the entity.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.SingleCell.#ctor(SadConsole.ColoredGlyphBase)">
            <summary>
            Creates a new entity, references the provided glyph as the appearance.
            </summary>
            <param name="appearance">The appearance of the entity.</param>
        </member>
        <member name="M:SadConsole.Entities.Entity.SingleCell.Update(System.TimeSpan)">
            <summary>
            If an effect is applied to the cell, updates the effect.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="T:SadConsole.Entities.EntityManager">
            <summary>
            Manages a set of entities. Adds a render step and only renders the entities that are in the parent <see cref="T:SadConsole.IScreenSurface"/> visible area.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager.IsAttached">
            <summary>
            Indicates that the entity renderer has been added to a parent object.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._entities">
            <summary>
            The entities to process.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._entitiesVisible">
            <summary>
            The entities currently visible.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._screen">
            <summary>
            The parent screen hosting this component.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._offsetAreaPixels">
            <summary>
            Cached rectangle for rendering.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._screenCachedView">
            <summary>
            A cached copy of the <see cref="P:SadConsole.ICellSurface.View"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._screenCachedFont">
            <summary>
            A cached copy of the <see cref="P:SadConsole.IScreenSurface.Font"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="F:SadConsole.Entities.EntityManager._screenCachedFontSize">
            <summary>
            A cached copy of the <see cref="P:SadConsole.IScreenSurface.FontSize"/> of the hosting screen surface.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.Entities">
            <summary>
            The entities associated with this manager.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.EntitiesVisible">
            <summary>
            The entities within the visible portion of the parent surface.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that this object needs to be redrawn; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.DoEntityUpdate">
            <summary>
            When <see langword="true"/>, indicates this manager should call <see cref="M:SadConsole.IScreenObject.Update(System.TimeSpan)"/> on each entity; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.SkipExistsChecks">
            <summary>
            When <see langword="true"/>, the <see cref="M:SadConsole.Entities.EntityManager.Add(SadConsole.Entities.Entity)"/> and <see cref="M:SadConsole.Entities.EntityManager.Remove(SadConsole.Entities.Entity)"/> won't check if the entity exists before doing its operation.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.AlternativeFont">
            <summary>
            An alternative font to use when drawing the entities. If <see langword="null"/>, the hosting surface's font is used.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.Count">
            <summary>
            The number of entities in the renderer.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:SadConsole.Entities.EntityManager.Item(System.Int32)">
            <summary>
            Gets an entity by index.
            </summary>
            <param name="index"></param>
            <returns>The entity.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:SadConsole.Entities.EntityManager.RenderStep">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Add(SadConsole.Entities.Entity)">
            <summary>
            Adds an entity to this manager.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.AddRange(System.Collections.Generic.IEnumerable{SadConsole.Entities.Entity})">
            <summary>
            Adds a collection of entities to this manager.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.AddEntity(SadConsole.Entities.Entity,System.Boolean)">
            <summary>
            Adds an entity to the collection, subscribes to events, and calls <see cref="M:SadConsole.Entities.EntityManager.OnEntityAdded(SadConsole.Entities.Entity)"/> and <see cref="M:SadConsole.Entities.EntityManager.OnEntityChangedPosition(SadConsole.Entities.Entity,SadRogue.Primitives.ValueChangedEventArgs{SadRogue.Primitives.Point})"/>.
            </summary>
            <param name="entity">The entity to remove.</param>
            <param name="skipSort">When true, skips sorting when <see cref="M:SadConsole.Entities.EntityManager.CalculateEntityVisibilityProtected(SadConsole.Entities.Entity,System.Boolean)"/> is called inside this method.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.RemoveEntity(SadConsole.Entities.Entity)">
            <summary>
            Adds an entity to the collection, unsubscribes to events, and calls <see cref="M:SadConsole.Entities.EntityManager.OnEntityRemoved(SadConsole.Entities.Entity)"/>.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Remove(SadConsole.Entities.Entity)">
            <summary>
            Removes an entity from this manager.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Clear">
            <summary>
            Removes all entities from this renderer.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.OnAdded(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.OnRemoved(SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.GetRenderRectangle(SadRogue.Primitives.Point,System.Boolean)">
            <summary>
            Gets a render rectangle for a position.
            </summary>
            <param name="position">The position of the entity.</param>
            <param name="isPixel">Indicates the entity is pixel positioned.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.SortVisibleEntities">
            <summary>
            Sorts the <see cref="P:SadConsole.Entities.EntityManager.EntitiesVisible"/> collection according to the <see cref="P:SadConsole.Entities.Entity.ZIndex"/> value.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.OnEntityChangedPosition(SadConsole.Entities.Entity,SadRogue.Primitives.ValueChangedEventArgs{SadRogue.Primitives.Point})">
            <summary>
            Called when an entity changes position.
            </summary>
            <param name="entity">The entity that moved.</param>
            <param name="e">The previous and new values of the position.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.OnEntityAdded(SadConsole.Entities.Entity)">
            <summary>
            Called when an entity is added.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.OnEntityRemoved(SadConsole.Entities.Entity)">
            <summary>
            Called when an entity is removed.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.CalculateEntityVisibility(SadConsole.Entities.Entity)">
            <summary>
            Updates the visibility state of an entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>Returns <see langword="true"/> when this entity is considered visible; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.CalculateEntityVisibilityProtected(SadConsole.Entities.Entity,System.Boolean)">
            <summary>
            Detects a visibility state change of an entity and changes its internal list position.
            </summary>
            <param name="entity">The entity to check.</param>
            <param name="skipSort">If <see langword="true"/>, skips sorting the visible.</param>
            <returns><see langword="true"/> when the entity is visible; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.UpdateCachedVisibilityArea">
            <summary>
            Updates the cached view area based on the parent surface.
            </summary>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.IndexOf(SadConsole.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Contains(SadConsole.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.CopyTo(SadConsole.Entities.Entity[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Entities.EntityManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.PointExtensions">
            <summary>
            Extensions for the <see cref="T:SadRogue.Primitives.Point"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.PointExtensions.SurfaceLocationToPixel(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Translates a surface cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.SurfaceLocationToPixel(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates a surface cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="fontSize">The font to use in calculating the position.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.PixelLocationToSurface(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Translates a pixel to where it appears on a surface cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.PixelLocationToSurface(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates a pixel to where it appears on a surface cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="fontSize">The font to use in calculating the position.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.TranslateFont(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates the coordinates of a cell from the source font size to a target font size.
            </summary>
            <param name="point">The position of the cell in the <paramref name="sourceFontSize"/>.</param>
            <param name="sourceFontSize">The source font translating from.</param>
            <param name="targetFontSize">The target font translating to.</param>
            <returns>The position of the cell in the <paramref name="targetFontSize"/>.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.GetValidDirections(SadRogue.Primitives.Point,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets a list of indexed boolean values to indicate if the direction from the <paramref name="position"/> falls in the <paramref name="area"/>.
            </summary>
            <param name="position">The position to test from.</param>
            <param name="area">The area to test.</param>
            <returns>An array of bool values indicating if the direction is valid or not; indexed by a <see cref="T:SadRogue.Primitives.Direction.Types"/> enumeration. Index 0 in the array represents the <paramref name="position"/>.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.GetDirectionPoints(SadRogue.Primitives.Point)">
            <summary>
            Gets an indexed array of direction positions based on the <paramref name="position"/>.
            </summary>
            <param name="position">The source position.</param>
            <returns>An array of positions indexed by a <see cref="T:SadRogue.Primitives.Direction.Types"/> enumeration. Index 0 in the array represents the <paramref name="position"/>.</returns>
        </member>
        <member name="M:SadConsole.PointExtensions.GetDirectionIndexes(SadRogue.Primitives.Point,SadRogue.Primitives.Rectangle,System.Int32)">
            <summary>
            Gets an array of indexes of a surface based on a position and then a relative <see cref="F:SadRogue.Primitives.Direction.Type"/> direction enumeration..
            </summary>
            <param name="position">The position center.</param>
            <param name="area">The area containing the position.</param>
            <param name="width">The width to use in converting each index to a point.</param>
            <returns>Returns the an array of values indidcating the index in the area surface of each direction where -1 represents a position outside the bounds of the area. Indexed by a <see cref="T:SadRogue.Primitives.Direction.Types"/> enumeration.</returns>
        </member>
        <member name="T:SadConsole.Extensions.ReadOnlySpan">
            <summary>
            Extensions for the <see cref="T:System.ReadOnlySpan`1"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.Extensions.ReadOnlySpan.Next(System.ReadOnlySpan{System.Char},System.Char,System.Int32@)">
            <summary>
            Gets the next instnace of the specified character in a <see cref="T:System.Char"/> span.
            </summary>
            <param name="span">The span.</param>
            <param name="value">The character to find.</param>
            <param name="index">The index of the character.</param>
            <returns>True when the character is found.</returns>
        </member>
        <member name="T:SadConsole.RectangleExtensions">
            <summary>
            Extensions for the <see cref="T:SadRogue.Primitives.Rectangle"/> type.
            </summary>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToPixels(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Point)">
            <summary>
            Converts a rectangle from cells to pixels.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="fontSize">The font size used for translation.</param>
            <returns>A new rectangle in pixels.</returns>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToPixels(SadRogue.Primitives.Rectangle,System.Int32,System.Int32)">
            <summary>
            Converts a rectangle from cells to pixels.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="cellWidth">The width of a cell used in converting.</param>
            <param name="cellHeight">The height of a cell used in converting.</param>
            <returns>A new rectangle in pixels.</returns>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToConsole(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Point)">
            <summary>
            Converts a rectangle from pixels to cells.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="fontSize">The font size used for translation.</param>
            <returns>A new rectangle in cell coordinates.</returns>
        </member>
        <member name="M:SadConsole.RectangleExtensions.ToConsole(SadRogue.Primitives.Rectangle,System.Int32,System.Int32)">
            <summary>
            Converts a rectangle from pixels to cells.
            </summary>
            <param name="rect">The rectangle to work with.</param>
            <param name="cellWidth">The width of a cell used in converting.</param>
            <param name="cellHeight">The height of a cell used in converting.</param>
            <returns>A new rectangle in cell coordinates.</returns>
        </member>
        <member name="T:SadConsole.StringExtensions">
            <summary>
            Helpers for strings.
            </summary>
        </member>
        <member name="M:SadConsole.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32)">
            <summary>
            Aligns a string given a total character width and alignment style. Fills in the extra space with the space character.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32,System.Char)">
            <summary>
            Aligns a string given a total character width and alignment style.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <param name="fillCharacter">The character to use to fill in the extra spaces after alignment.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.CreateColored(System.String,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadConsole.Mirror},SadConsole.CellDecorator[])">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground and background, setting the ignore properties if needed.
            </summary>
            <param name="value">The current string.</param>
            <param name="foreground">The foreground color. If null, <see cref="P:SadConsole.ColoredString.IgnoreForeground"/> will be set.</param>
            <param name="background">The background color. If null, <see cref="P:SadConsole.ColoredString.IgnoreBackground"/> will be set.</param>
            <param name="mirror">The mirror setting. If null, <see cref="P:SadConsole.ColoredString.IgnoreMirror"/> will be set.</param>
            <param name="decorators">The decorators setting. If null, <see cref="P:SadConsole.ColoredString.IgnoreDecorators"/> will be set.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.CreateGradient(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.CreateGradient(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient, background gradient, and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <param name="startingBackground">The starting background color to blend.</param>
            <param name="endingBackground">The ending background color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.WordWrap(System.String,System.Int32)">
            <summary>
            Wraps text into lines by words, long words are also properly wrapped into multiple lines.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="maxCharsPerLine">The maximum number of characters per line of text returned.</param>
            <returns>Each line in the string.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.ToBool(System.String)">
            <summary>
            Converts a string to a boolean when it is "0", "1", "true", or "false".
            </summary>
            <param name="item">The string to convert</param>
            <returns>The converted boolean value, otherwise false.</returns>
        </member>
        <member name="M:SadConsole.StringExtensions.Masked(System.String,System.Char)">
            <summary>
            Returns a string of mask characters the same length as the input string.
            </summary>
            <param name="toMask">The string to mask.</param>
            <param name="mask">The mask to use.</param>
            <returns>A string of masks.</returns>
        </member>
        <member name="T:SadConsole.HorizontalAlignment">
            <summary>
            Horizontal alignment modes.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:SadConsole.HorizontalAlignment.Stretch">
            <summary>
            Stretch.
            </summary>
        </member>
        <member name="T:SadConsole.VerticalAlignment">
            <summary>
            Vertical alignment modes.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Bottom">
            <summary>
            Bottom allignment.
            </summary>
        </member>
        <member name="F:SadConsole.VerticalAlignment.Stretch">
            <summary>
            Stretch.
            </summary>
        </member>
        <member name="T:SadConsole.Orientation">
            <summary>
            Orientation modes.
            </summary>
        </member>
        <member name="F:SadConsole.Orientation.Vertical">
            <summary>
            Orient along the vertical axis.
            </summary>
        </member>
        <member name="F:SadConsole.Orientation.Horizontal">
            <summary>
            Orient along the horizontal axis.
            </summary>
        </member>
        <member name="T:SadConsole.FocusBehavior">
            <summary>
            How the console handles becoming focused and added to the <see cref="P:SadConsole.GameHost.FocusedScreenObjects"/> collection.
            </summary>
        </member>
        <member name="F:SadConsole.FocusBehavior.Set">
            <summary>
            Becomes the only active input object when focused.
            </summary>
        </member>
        <member name="F:SadConsole.FocusBehavior.Push">
            <summary>
            Pushes to the top of the stack when it becomes the active input object.
            </summary>
        </member>
        <member name="F:SadConsole.FocusBehavior.None">
            <summary>
            Don't use the global focus manager.
            </summary>
        </member>
        <member name="T:SadConsole.FocusedScreenObjectStack">
            <summary>
            A stack of screen objects. The top-most of the stack is considered active and represented by the <see cref="T:SadConsole.IScreenObject"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.FocusedScreenObjectStack.ScreenObject">
            <summary>
            Gets the current active screen object.
            </summary>
        </member>
        <member name="F:SadConsole.FocusedScreenObjectStack._screenObjects">
            <summary>
            The stack of screen objects for input processing.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.#ctor">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Clear">
            <summary>
            Clears all screen objects from the active stack along with the current active screen object.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Push(SadConsole.IScreenObject)">
            <summary>
            Adds another screen object to active stack, setting it as the active (top most in the stack) screen object.
            </summary>
            <param name="screenObject"></param>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Set(SadConsole.IScreenObject)">
            <summary>
            Replaces the top screen object (active screen object) with the provided instance. Sets <see cref="T:SadConsole.IScreenObject"/> to this instance.
            </summary>
            <param name="screenObject">The screen object to make active.</param>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Pop(SadConsole.IScreenObject)">
            <summary>
            Removes the screen object from the active stack. If the instance is the current active screen object, the active screen object is set to the last screen object in the previous screen object.
            </summary>
            <param name="screenObject">The screen object to remove.</param>
        </member>
        <member name="M:SadConsole.FocusedScreenObjectStack.Pop">
            <summary>
            Removes the top screen object from the stack.
            </summary>
        </member>
        <member name="T:SadConsole.FontExtensions">
            <summary>
            Extensions for <see cref="T:SadConsole.IFont"/>.
            </summary>
        </member>
        <member name="M:SadConsole.FontExtensions.GetRenderRect(SadConsole.IFont,System.Int32,System.Int32,SadRogue.Primitives.Point)">
            <summary>
            Returns a rectangle that is positioned and sized based on the font and the cell position specified.
            </summary>
            <param name="font">Unused.</param>
            <param name="x">The x-axis of the cell position.</param>
            <param name="y">The y-axis of the cell position.</param>
            <param name="fontSize">The size of the output cell.</param>
            <returns>A rectangle to representing a specific cell.</returns>
        </member>
        <member name="M:SadConsole.FontExtensions.GetWorldPosition(SadConsole.IFont,SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Gets the pixel position of a cell position based on the font size.
            </summary>
            <param name="font">Unused.</param>
            <param name="position">The cell position to convert.</param>
            <param name="fontSize">The size of the font used to calculate the pixel position.</param>
            <returns>A new pixel-positioned point.</returns>
        </member>
        <member name="M:SadConsole.FontExtensions.GetGlyphRatio(SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Returns the ratio in size difference between the font's glyph width and height.
            </summary>
            <param name="font">Unused.</param>
            <param name="fontSize">The glyph size of the font used.</param>
            <returns>A tuple with the names (X, Y) where X is the difference of width to height and Y is the difference of height to width.</returns>
        </member>
        <member name="T:SadConsole.GameHost">
             <summary>
             Represents the SadConsole game engine.
             </summary>
             <remarks>
             When a new host is created, the host should do the following:
            
             - Run `LoadDefaultFonts`.
             - Run `SetRenderer` for `window`, `controls`, `layered`, and `default` renderers.
             - Run `LoadMappedColors`.
             - Configure the `Screen` to a new console with `ScreenCellsX` and `ScreenCellsY`.
             - Prior to running the game, run `SplashScreens.SplashScreenManager.CheckRun()`.
             </remarks>
        </member>
        <member name="F:SadConsole.GameHost._renderers">
            <summary>
            Holds all of the <see cref="T:SadConsole.Renderers.IRenderer"/> types.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost._rendererSteps">
            <summary>
            Holds all of the <see cref="T:SadConsole.Renderers.IRenderStep"/> types.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost._splashScreens">
            <summary>
            The splash screens to show on game startup.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Instance">
            <summary>
            Instance of the game host.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.SerializerPathHint">
            <summary>
            Contains the path to a file being serialized or deserialized.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.FrameRender">
            <summary>
            Raised when the game draws a frame to the screen.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.FrameUpdate">
            <summary>
            Raised when the game updates prior to drawing a frame.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.Started">
            <summary>
            A callback to run before the <see cref="M:SadConsole.GameHost.Run"/> method is called;
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.Ending">
            <summary>
            A callback to run after the <see cref="M:SadConsole.GameHost.Run"/> method is called;
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DrawCalls">
            <summary>
            Draw calls registered for the next drawing frame.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.ScreenCellsX">
            <summary>
            How many cells fit in the render area width used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.ScreenCellsY">
            <summary>
            How many cells fit in the render area width used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.FrameNumber">
            <summary>
            A frame number counter, incremented every game frame.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost._gameStartedAt">
            <summary>
            The date and time the game was started.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Fonts">
            <summary>
            Collection of fonts. Used mainly by the deserialization system.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.EmbeddedFont">
            <summary>
            The font automatically loaded by SadConsole. Standard IBM style font.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.EmbeddedFontExtended">
            <summary>
            The font automatically loaded by SadConsole. Standard IBM style font. Extended with extra SadConsole characters.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DefaultFont">
            <summary>
            The default font for any type that does not provide a font.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DefaultFontSize">
            <summary>
            The default font size to use with the <see cref="P:SadConsole.GameHost.DefaultFont"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Keyboard">
            <summary>
            Global keyboard object used by SadConsole during the update frame.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Mouse">
            <summary>
            Global mouse object used by SadConsole during the update frame.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.UpdateFrameDelta">
            <summary>
            The elapsed time between now and the last update call.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DrawFrameDelta">
            <summary>
            The elapsed time between now and the last draw call.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.GameRunningTotalTime">
            <summary>
            The total time the game has been running.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.StartingConsole">
            <summary>
            The console created by the game and automatically assigned to <see cref="P:SadConsole.GameHost.Screen"/>.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Screen">
            <summary>
            The active screen processed by the game.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.RootComponents">
            <summary>
            Update components that run before the <see cref="P:SadConsole.GameHost.Screen"/> is processed.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.FocusedScreenObjects">
            <summary>
            The stack of focused consoles used by the mouse and keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Random">
            <summary>
            A global random number generator.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnGameStarted">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.Started"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnGameEnding">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.Ending"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnFrameRender">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.FrameRender"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnFrameUpdate">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.FrameUpdate"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Run">
            <summary>
            Runs the game.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.GetTexture(System.String)">
            <summary>
            Gets a texture from the implemented host.
            </summary>
            <param name="resourcePath">The path to the texture to load.</param>
            <returns>The texture from the game host.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetTexture(System.IO.Stream)">
            <summary>
            Gets a texture from the implemented host.
            </summary>
            <param name="textureStream">A stream containing the texture.</param>
            <returns>The texture from the game host.</returns>
        </member>
        <member name="M:SadConsole.GameHost.CreateTexture(System.Int32,System.Int32)">
            <summary>
            Creates a texture.
            </summary>
            <param name="width">The width of the texture in pixels.</param>
            <param name="height">The height of the texture in pixels.</param>
            <returns>The texture from the game host.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetRenderer(System.String)">
            <summary>
            Creates and returns an <see cref="T:SadConsole.Renderers.IRenderer"/> by name.
            </summary>
            <param name="name">The name of the renderer.</param>
            <returns>A new renderer.</returns>
        </member>
        <member name="M:SadConsole.GameHost.SetRenderer(System.String,System.Type)">
            <summary>
            Sets the default <see cref="T:SadConsole.Renderers.IRenderer"/> for a type.
            </summary>
            <param name="name">The name to register the renderer as.</param>
            <param name="rendererType">The renderer type.</param>
        </member>
        <member name="M:SadConsole.GameHost.SetRendererStep(System.String,System.Type)">
            <summary>
            Sets the default <see cref="T:SadConsole.Renderers.IRenderStep"/> for a type.
            </summary>
            <param name="name">The name to register the render step as.</param>
            <param name="rendererStepType">The render step type.</param>
        </member>
        <member name="M:SadConsole.GameHost.GetRendererStep(System.String)">
            <summary>
            Creates and returns a <see cref="T:SadConsole.Renderers.IRenderStep"/> by name.
            </summary>
            <param name="name">The name of the renderer.</param>
            <returns>A new renderer.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetKeyboardState">
            <summary>
            Gets the state of the keyboard from the implemented host.
            </summary>
            <returns>The state of the keyboard.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetMouseState">
            <summary>
            Gets the state of the mouse from the implemented host.
            </summary>
            <returns>The state of the mouse.</returns>
        </member>
        <member name="M:SadConsole.GameHost.SetSplashScreens(SadConsole.IScreenSurface[])">
            <summary>
            The splash screens the game should sequentially show on startup.
            </summary>
            <param name="surfaces">The splash screens to show.</param>
        </member>
        <member name="M:SadConsole.GameHost.LoadFont(System.String)">
            <summary>
            Loads a font from a file and adds it to the <see cref="P:SadConsole.GameHost.Fonts"/> collection.
            </summary>
            <param name="font">The font file to load.</param>
            <returns>A master font that you can generate a usable font from.</returns>
        </member>
        <member name="M:SadConsole.GameHost.DestroyDefaultStartingConsole">
            <summary>
            Destroys the <see cref="P:SadConsole.GameHost.StartingConsole"/> instance.
            </summary>
            <remarks>
            Prior to calling this method, you must set <see cref="P:SadConsole.GameHost.Screen"/> to an object other than <see cref="P:SadConsole.GameHost.StartingConsole"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.GameHost.OpenStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file stream with the specified mode and access.
            </summary>
            <param name="file">The file to open.</param>
            <param name="mode">The mode for opening. Defaults to <see cref="F:System.IO.FileMode.Open"/>.</param>
            <param name="access">The type of access for the stream. Defaults to <see cref="F:System.IO.FileAccess.Read"/>.</param>
            <returns>The stream object.</returns>
        </member>
        <member name="M:SadConsole.GameHost.FileExists(System.String)">
            <summary>
            Checks if a file exists.
            </summary>
            <param name="file">The file to check.</param>
            <returns><see langword="true"/> if the file exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHost.FileDelete(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="file">The file to delete.</param>
            <returns><see langword="true"/> if the file was deleted; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.GameHost.LoadDefaultFonts(System.String)">
            <summary>
            Loads the embedded <c>IBM.font</c> files. Sets the <see cref="P:SadConsole.GameHost.DefaultFont"/> property.
            </summary>
            <param name="defaultFont">An optional font to load and set as the default.</param>
            <remarks>
            If <paramref name="defaultFont"/> is <see langword="null"/>, the <see cref="P:SadConsole.GameHost.EmbeddedFont"/> or <see cref="P:SadConsole.GameHost.EmbeddedFontExtended"/> font is set based on the value of <see cref="P:SadConsole.Settings.UseDefaultExtendedFont"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.GameHost.LoadMappedColors">
            <summary>
            Uses reflection to examine the <see cref="T:SadRogue.Primitives.Color"/> type and add any predefined colors into <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/>.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.ResizeWindow(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the window to the specified dimensions.
            </summary>
            <param name="width">The width of the window in pixels.</param>
            <param name="height">The height of the window in pixels.</param>
            <param name="resizeOutputSurface">When <see langword="true"/> resizes the screen output surface along with the window. Defaults to <see langword="false"/></param>
        </member>
        <member name="M:SadConsole.GameHost.ResizeWindow(System.Int32,System.Int32,SadRogue.Primitives.Point,System.Boolean)">
            <summary>
            Resizes the window to the specified cell count along the X-axis and Y-axis.
            </summary>
            <param name="cellsX">The number of cells to fit horizontally.</param>
            <param name="cellsY">The number of cells to fit vertically.</param>
            <param name="cellSize">The size of the cells in pixels.</param>
            <param name="resizeOutputSurface">When <see langword="true"/> resizes the screen output surface along with the window. Defaults to <see langword="false"/></param>
        </member>
        <member name="M:SadConsole.GameHost.SaveGlobalState">
            <summary>
            Saves the global state, mainly the <see cref="P:SadConsole.GameHost.FocusedScreenObjects"/> and <see cref="P:SadConsole.GameHost.Screen"/> objects.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.RestoreGlobalState">
            <summary>
            Restores the global state that was saved with <see cref="M:SadConsole.GameHost.SaveGlobalState"/>.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Dispose(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:SadConsole.GameHost.Finalize">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:SadConsole.GlyphDefinition">
            <summary>
            Represents a decorator (glyph and mirror) defined by a font.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Empty">
            <summary>
            Gets a glyph definition that has -1 for the glyph.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Glyph">
            <summary>
            The glyph of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Mirror">
            <summary>
            The mirror effect of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.GlyphDefinition.#ctor(System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a new cell decorator instance.
            </summary>
            <param name="glyph"></param>
            <param name="mirror"></param>
        </member>
        <member name="M:SadConsole.GlyphDefinition.CreateCellDecorator(SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.CellDecorator"/> from this definition.
            </summary>
            <param name="foreground">The color of the decorator.</param>
            <returns>A new decorator instance.</returns>
        </member>
        <member name="M:SadConsole.GlyphDefinition.CreateCell(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredGlyphBase"/> from this definition.
            </summary>
            <param name="foreground">The foreground color of the cell.</param>
            <param name="background">The background color of the cell.</param>
            <returns>A new cell instance.</returns>
        </member>
        <member name="T:SadConsole.Mirror">
            <summary>
            The mirroring mode
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.None">
            <summary>
            No mirroring set.
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.Vertical">
            <summary>
            Mirror vertically.
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.Horizontal">
            <summary>
            Mirror horizontally.
            </summary>
        </member>
        <member name="T:SadConsole.HandledEventArgs">
            <summary>
            Event args that allow a handled flag to be set.
            </summary>
        </member>
        <member name="P:SadConsole.HandledEventArgs.IsHandled">
            <summary>
            When <see langword="true"/> indicates that the event has been handled and no more processing should continue.
            </summary>
        </member>
        <member name="T:SadConsole.Helpers">
            <summary>
            General code helpers.
            </summary>
        </member>
        <member name="M:SadConsole.Helpers.HasFlag(System.Int32@,System.Int32@)">
            <summary>
            Checks for the presense of a flag in a value.
            </summary>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns><see langword="true"/> when the flag exists in the value; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Helpers.SetFlag(System.Int32,System.Int32)">
            <summary>
            Sets a flag in a value.
            </summary>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>A new value with the flag added.</returns>
        </member>
        <member name="M:SadConsole.Helpers.UnsetFlag(System.Int32,System.Int32)">
            <summary>
            Removes a flag from a value.
            </summary>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>A new value with the flag removed.</returns>
        </member>
        <member name="T:SadConsole.ICellSurface">
            <summary>
            An array of <see cref="T:SadConsole.ColoredGlyphBase"/> objects used to represent a 2D surface.
            </summary>
        </member>
        <member name="E:SadConsole.ICellSurface.IsDirtyChanged">
            <summary>
            An event that is raised when <see cref="P:SadConsole.ICellSurface.IsDirty"/> changes.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedDown">
            <summary>
            A variable that tracks how many times this editor shifted the surface down.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedRight">
            <summary>
            A variable that tracks how many times this editor shifted the surface right.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedLeft">
            <summary>
            A variable that tracks how many times this editor shifted the surface left.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.TimesShiftedUp">
            <summary>
            A variable that tracks how many times this editor shifted the surface up.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.UsePrintProcessor">
            <summary>
            When true, the <see cref="P:SadConsole.ColoredString.Parser"/> is used to generate a <see cref="T:SadConsole.ColoredString"/> before printing.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.Effects">
            <summary>
            Processes the effects added to cells with <see cref="M:CellSurfaceEditor.SetEffect*"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.Area">
            <summary>
            Returns a rectangle that represents the entire size of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.DefaultBackground">
            <summary>
            The default background for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.DefaultForeground">
            <summary>
            The default foreground for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.DefaultGlyph">
            <summary>
            The default glyph used in clearing and erasing.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.IsScrollable">
            <summary>
            Returns <see langword="true"/> when the <see cref="P:SadConsole.ICellSurface.View"/> width or height is different from <see cref="P:SadConsole.ICellSurface.Area"/>; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.View">
            <summary>
            The visible portion of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ViewHeight">
            <summary>
            Gets or sets the visible height of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ViewPosition">
            <summary>
            The position of the view within the buffer.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ViewWidth">
            <summary>
            Gets or sets the visible width of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineThin">
            <summary>
            Glyph indexes for a thin line.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineThick">
            <summary>
            Glyph indexes for a thick line.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.Connected3dBox">
            <summary>
            Glyph indexes for a block box that looks 3d.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineThinExtended">
            <summary>
            Glyph indexes for a thin line using a SadConsole extended font.
            </summary>
        </member>
        <member name="P:SadConsole.ICellSurface.ConnectedLineEmpty">
            <summary>
            Glyph indexes for an empty line 0. 
            </summary>
        </member>
        <member name="M:SadConsole.ICellSurface.CreateLine(System.Int32)">
            <summary>
            Creates an array of glyphs that can be used as a connected line.
            </summary>
            <param name="singleGlyph">The glyph to use for the connected line array.</param>
            <returns>An array of glyphs.</returns>
        </member>
        <member name="M:SadConsole.ICellSurface.ValidateLineStyle``1(``0[]@)">
            <summary>
            Returns a value that indicates a line style array is not null and contains the required number of elements.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="connectedLineStyle">The array to check based on the <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/> enum.</param>
            <returns>True when the line style is correct.</returns>
        </member>
        <member name="T:SadConsole.ICellSurface.ConnectedLineIndex">
            <summary>
            Array index enum for line glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyphAppearance.ShallowCopyTo(SadConsole.ColoredGlyphBase)">
            <summary>
            Copies the ColoredGlyphAppearance to the appearance fields of the given ColoredGlyphs.
            The Decorators array is copied using a shallow-copy.
            </summary>
            <remarks>
            This is more performant than a deep copy if you don't need to preserve the state of the ColoredGlyphBase object.
            </remarks>
            <param name="cell">Cell to copy to.</param>
        </member>
        <member name="T:SadConsole.CellSurfaceEditor">
            <summary>
            Methods to interact with a <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetPixels(SadConsole.ISurface,SadRogue.Primitives.Color[])">
            <summary>
            Sets each background of a cell to the array of colors. <paramref name="pixels"/> must be the same length as the amount of cells in the surface.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="pixels">The colors to place.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetPixels(SadConsole.ISurface,SadRogue.Primitives.Rectangle,SadRogue.Primitives.Color[])">
            <summary>
            Sets each background of a cell to the array of colors.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">An area to fill with pixels.</param>
            <param name="pixels">Colors for each cell of the obj.Surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.IsValidCell(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell obj.Surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.IsValidCell(SadConsole.ISurface,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell obj.Surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.IsValidCell(SadConsole.ISurface,System.Int32)">
            <summary>
            Tests if a cell is valid based on its index.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index to test.</param>
            <returns>A true value indicating the cell index is in this cell obj.Surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ISurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the glyph of a specified cell to a new value.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the glyph and foreground of a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Changes the glyph, foreground, background, and mirror of a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetGlyph(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror,System.Collections.Generic.IEnumerable{SadConsole.CellDecorator})">
            <summary>
            Changes the glyph, foreground, background, and mirror of a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
            <param name="decorators">Decorators to set on the cell. Will clear existing decorators first.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetGlyph(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the glyph of a specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The glyph index.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetForeground(SadConsole.ISurface,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the foreground of a specified cell to a new color.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetForeground(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the foreground of a specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetBackground(SadConsole.ISurface,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the background of a cell to the specified color.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetBackground(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the background of a specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ISurface,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">Index of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ISurface,System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ISurface,System.Collections.Generic.IEnumerable{System.Int32},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ISurface,SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="cell">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetEffect(SadConsole.ISurface,System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetEffect(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetEffect(SadConsole.ISurface,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetCellAppearance(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.ColoredGlyphBase)">
            <summary>
            Changes the appearance of the cell. The appearance represents the look of a cell and will first be cloned, then applied to the cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="appearance">The desired appearance of the cell. A null value cannot be passed.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetCellAppearance(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the appearance of a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The appearance.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetCells(SadConsole.ISurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Gets an enumerable of cells over a specific area.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">The area to get cells from.</param>
            <returns>A new array with references to each cell in the area.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetSubSurface(SadConsole.ISurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Returns a new surface with reference to each cell inside of the <paramref name="view"/>.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="view">An area of the surface to create a view of.</param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetSubSurface(SadConsole.ISurface)">
            <summary>
            Returns a new surface using the cells from the current surface.
            </summary>
            <param name="obj">The surface.</param>
            <returns>A new surface instance.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetMirror(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Gets the mirror of a specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The <see cref="T:SadConsole.Mirror"/> of the cell.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetMirror(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.Mirror)">
            <summary>
            Sets the mirror of a specified cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="mirror">The mirror of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetDecorator(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more cells.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetDecorator(SadConsole.ISurface,SadRogue.Primitives.Point,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorators of a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="position">The coordinate of the cell.</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetDecorator(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more cells.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.SetDecorator(SadConsole.ISurface,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorators of a single cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.AddDecorator(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.AddDecorator(SadConsole.ISurface,SadRogue.Primitives.Point,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="position">The x,y coordinate of the cell.</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.AddDecorator(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.AddDecorator(SadConsole.ISurface,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.RemoveDecorator(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Removes the decorators from one or more cells.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.RemoveDecorator(SadConsole.ISurface,SadRogue.Primitives.Point,SadConsole.CellDecorator[])">
            <summary>
            Removes the decorators from a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="position">The x,y coordinate of the cell.</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.RemoveDecorator(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Removes the decorators from one or more cells.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.RemoveDecorator(SadConsole.ISurface,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Removes the decorators from a cell.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="decorators">The decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ClearDecorators(SadConsole.ISurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified cells.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ClearDecorators(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified cells
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color)">
            <summary>
            Draws the string on the console at the specified location and color, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Draws the string on the console at the specified location with the specified foreground and background color, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Draws the string on the console at the specified location with the specified settings.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror,SadConsole.CellDecorator[])">
            <summary>
            Draws the string on the console at the specified location with the specified settings.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
            <param name="decorators">An array of cell decorators to use on each glyph. A <see langword="null"/> value will clear the decorators.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String,SadConsole.Mirror)">
            <summary>
            Draws the string on the console at the specified location with the specified settings.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.String,SadConsole.ColoredGlyphBase,SadConsole.Effects.ICellEffect)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="appearance">The appearance of the cell</param>
            <param name="effect">An optional effect to apply to the printed obj.Surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.ColoredString)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="glyphs">An array of glyphs to print at the specified position.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Print(SadConsole.ISurface,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyphBase})">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="glyphs">An enumeration of glyphs to print at the specified position.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetString(SadConsole.ISurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetString(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Builds a string from the cells.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetStringColored(SadConsole.ISurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.GetStringColored(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ClearShiftValues(SadConsole.ISurface)">
            <summary>
            Resets the shifted amounts to 0, as if the surface has never shifted.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRow(SadConsole.ISurface,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the entire row by the specified amount.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="row">The row to shift.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRow(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the specified row from an X position, by the specified amount.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="row">The row to shift.</param>
            <param name="startingX">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingX"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the parameters is outside of the surface width.</exception>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRowRight(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the specified row from an X position, by the specified amount, to the right.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="row">The row to shift.</param>
            <param name="startingX">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingX"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the parameters is outside of the surface width.</exception>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRowLeft(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the specified row from an X position, by the specified amount, to the left.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="row">The row to shift.</param>
            <param name="startingX">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingX"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the parameters is outside of the surface width.</exception>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRowRightUnchecked(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use. Doesn't do any checks on valid values. Shifts the specified row from an X position, by the specified amount, to the right.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="row">The row to shift.</param>
            <param name="startingX">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingX"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRowLeftUnchecked(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use. Doesn't do any checks on valid values. Shifts the specified row from an X position, by the specified amount, to the left.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="row">The row to shift.</param>
            <param name="startingX">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingX"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftColumn(SadConsole.ISurface,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the entire column by the specified amount.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="col">The column to shift.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftColumn(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the specified row from an X position, by the specified amount.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="col">The column to shift.</param>
            <param name="startingY">The starting row to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingY"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the parameters is outside of the surface height.</exception>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftColumnDown(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the specified row from n Y position, by the specified amount, down.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="col">The column to shift.</param>
            <param name="startingY">The starting row to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingY"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the parameters is outside of the surface height.</exception>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftColumnUp(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the specified row from n Y position, by the specified amount, up.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="col">The column to shift.</param>
            <param name="startingY">The starting row to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingY"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the parameters is outside of the surface height.</exception>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftColumnDownUnchecked(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use. Doesn't do any checks on valid values. Shifts the specified row from a Y position, by the specified amount, down.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="col">The column to shift.</param>
            <param name="startingY">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingY"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftColumnUpUnchecked(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use. Doesn't do any checks on valid values. Shifts the specified row from a Y position, by the specified amount, up.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="col">The column to shift.</param>
            <param name="startingY">The starting column to shift from.</param>
            <param name="count">The number of cells to shift starting from <paramref name="startingY"/>.</param>
            <param name="amount">The amount to shift by. A negative value shifts left and a positive value shifts right.</param>
            <param name="wrap">When <see langword="true" />, wraps the glyph data from one side to another, otherwise clears the glyphs left behind.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftUp(SadConsole.ISurface)">
            <summary>
            Scrolls all the console data up by one.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftUp(SadConsole.ISurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data up by the specified amount of rows.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the bottom. When true, the top line appears at the bottom.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftDown(SadConsole.ISurface)">
            <summary>
            Scrolls all the console data down by one.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftDown(SadConsole.ISurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data down by the specified amount of rows.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the top. When true, the bottom line appears at the top.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRight(SadConsole.ISurface)">
            <summary>
            Scrolls all the console data right by one.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftRight(SadConsole.ISurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data right by the specified amount.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the left. When true, the right line appears at the left.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftLeft(SadConsole.ISurface)">
            <summary>
            Scrolls all the console data left by one.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ShiftLeft(SadConsole.ISurface,System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data left by the specified amount.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the right. When true, the left line appears at the right.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Erase(SadConsole.ISurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starting at the specified coordinate, clears the glyph, mirror, and decorators, for the specified count of obj.Surface. Doesn't clear the effect, foreground, or background.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="count">The count of glyphs to erase.</param>
            <returns>The cells processed by this method.</returns>
            <remarks>
            Cells altered by this method has the <see cref="P:SadConsole.ColoredGlyphBase.Glyph"/> set to <see cref="P:SadConsole.ICellSurface.DefaultGlyph"/>, the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyphBase.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Erase(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Clears the glyph, mirror, and decorators, for the specified cell. Doesn't clear the effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <remarks>
            The cell altered by this method has the <see cref="P:SadConsole.ColoredGlyphBase.Glyph"/> set to <see cref="P:SadConsole.ICellSurface.DefaultGlyph"/>, the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyphBase.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Erase(SadConsole.ISurface)">
            <summary>
            Erases all cells which clears the glyph, mirror, and decorators. Doesn't clear the effect.
            </summary>
            <param name="obj">The surface being edited.</param>
            <remarks>
            All cells have <see cref="P:SadConsole.ColoredGlyphBase.Glyph"/> set to <see cref="P:SadConsole.ICellSurface.DefaultGlyph"/>, the <see cref="P:SadConsole.ColoredGlyphBase.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyphBase.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ISurface)">
            <summary>
            Clears the console data. Characters are reset to 0, the foreground and background are set to default, and mirror set to none. Clears cell decorators.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ISurface,System.Int32,System.Int32)">
            <summary>
            Clears a cell. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ISurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears a segment of cells, starting from the left, extending to the right, and wrapping if needed. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x position of the left end of the segment.</param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <remarks>This works similarly to printing a string of whitespace</remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ISurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Clears an area of obj.Surface. Each cell is reset to its default state. Then, Glyph, foreground, and background, are reset to the surface's default values.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">The area to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Clear(SadConsole.ISurface,System.Collections.Generic.IEnumerable{SadRogue.Primitives.Point})">
            <summary>
            Clears an area of obj.Surface. Each cell is reset to its default state. Then, Glyph, foreground, and background, are reset to the surface's default values.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="cellPositions">The cells to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ISurface,SadConsole.ColoredGlyphBase)">
            <summary>
            Fills the console. Clears cell decorators and effects.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="iconAppearance">The appearance that is copied to every cell.</param>
            <returns>The array of all cells in this console, starting from the top left corner.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ISurface,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills the console. Clears cell decorators and effects.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Foreground to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>The array of all cells in this console, starting from the top left corner.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills a segment of cells, starting from the left, extending to the right, and wrapping if needed. Clears cell decorators.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x position of the left end of the segment. </param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If x or y are out of bounds, nothing happens and an empty array is returned</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Fill(SadConsole.ISurface,SadRogue.Primitives.Rectangle,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills the specified area. Clears cell decorators.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">The area to fill.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If the area is out of bounds, nothing happens and an empty array is returned.</returns>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawLine(SadConsole.ISurface,SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Nullable{System.Int32},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadConsole.Mirror})">
            <summary>
            Draws a line from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="start">Starting point of the line.</param>
            <param name="end">Ending point of the line.</param>
            <param name="foreground">Foreground to set. If null, skipped.</param>
            <param name="background">Background to set. If null, skipped.</param>
            <param name="glyph">Glyph to set. If null, skipped.</param>
            <param name="mirror">Mirror to set. If null, skipped.</param>
            <returns>A list of cells the line touched; ordered from first to last.</returns>
            <remarks>To simply return the list of cells that would be drawn to, use <see langword="null"/> for <paramref name="glyph"/>, <paramref name="foreground"/>, <paramref name="background"/>, and <paramref name="mirror"/>.</remarks>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawBox(SadConsole.ISurface,SadRogue.Primitives.Rectangle,SadConsole.ShapeParameters)">
            <summary>
            Draws a box.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">The area of the box.</param>
            <param name="parameters">Provides the options for drawing a border and filling the box.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.DrawCircle(SadConsole.ISurface,SadRogue.Primitives.Rectangle,SadConsole.ShapeParameters)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">The area the ellipse </param>
            <param name="parameters">Provides the options for drawing a border and filling the circle.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ConnectLines(SadConsole.ISurface)">
            <summary>
            Connects all lines in a surface for both <see cref="P:SadConsole.ICellSurface.ConnectedLineThin"/> and <see cref="P:SadConsole.ICellSurface.ConnectedLineThick"/> styles.
            </summary>
            <param name="obj">The surface being edited.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ConnectLines(SadConsole.ISurface,System.Int32[])">
            <summary>
            Connects all lines in this based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/>.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.ConnectLines(SadConsole.ISurface,System.Int32[],SadRogue.Primitives.Rectangle)">
            <summary>
            Connects all lines in this based on the <paramref name="lineStyle"/> style provided.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="lineStyle">The array of line styles indexed by <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/>.</param>
            <param name="area">The area to process.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ISurface,SadConsole.ICellSurface)">
            <summary>
            Copies the contents of the cell surface to the destination.
            </summary>
            <param name="obj">The surface being edited.</param>
            <remarks>If the sizes to not match, it will always start at 0,0 and work with what it can and move on to the next row when either surface runs out of columns being processed</remarks>
            <param name="destination">The destination obj.Surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ISurface,SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the cell surface to the destination at the specified x,y.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate of the destination.</param>
            <param name="y">The y coordinate of the destination.</param>
            <param name="destination">The destination obj.Surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ISurface,SadRogue.Primitives.Rectangle,SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Copies an area of this cell surface to the destination surface.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="area">The area to copy.</param>
            <param name="destination">The destination obj.Surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.Copy(SadConsole.ISurface,System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ICellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of this cell surface at the specified x,y coordinates to the destination, only with the specified obj.Surface.BufferWidth and obj.Surface.BufferHeight, and copies it to the specified <paramref name="destinationX"/> and <paramref name="destinationY"/> position.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="x">The x coordinate to start from.</param>
            <param name="y">The y coordinate to start from.</param>
            <param name="width">The BufferWidth to copy from.</param>
            <param name="height">The BufferHeight to copy from.</param>
            <param name="destination">The destination obj.Surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.FillWithRandomGarbage(SadConsole.ISurface,SadConsole.IFont)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="associatedFont">The font used in assigning glyphs randomly.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.FillWithRandomGarbage(SadConsole.ISurface,System.Int32)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="maxGlyphValue">The maximum glyph value to use on the obj.Surface.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.FillWithRandomGarbage(SadConsole.ISurface,System.Int32,SadRogue.Primitives.Rectangle)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
            <param name="obj">The surface being edited.</param>
            <param name="maxGlyphValue">The maximum glyph value to use on the obj.Surface.</param>
            <param name="area">The area to fill with random garbage.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.PrintTheDraw(SadConsole.ICellSurface,System.Int32,System.String,SadConsole.Readers.TheDrawFont,SadConsole.HorizontalAlignment,System.Int32)">
            <summary>
            Prints text using <see cref="T:SadConsole.Readers.TheDrawFont"/> and horizontal alignment specified. Calculates x coordinate. Truncates string to fit it in one line.
            </summary>
            <param name="cellSurface">Class implementing <see cref="T:SadConsole.ICellSurface"/>.</param>
            <param name="y">Y coordinate of the obj.Surface.</param>
            <param name="text">Text to print.</param>
            <param name="drawFont">Instance of the <see cref="T:SadConsole.Readers.TheDrawFont"/> to use.</param>
            <param name="alignment"><see cref="T:SadConsole.HorizontalAlignment"/> to use.</param>
            <param name="padding">Amount of regular font characters used as horizontal padding on both sides of the output.</param>
        </member>
        <member name="M:SadConsole.CellSurfaceEditor.PrintTheDraw(SadConsole.ICellSurface,System.Int32,System.Int32,System.String,SadConsole.Readers.TheDrawFont)">
            <summary>
            Prints text using <see cref="T:SadConsole.Readers.TheDrawFont"/>.
            </summary>
            <param name="cellSurface">Class implementing <see cref="T:SadConsole.ICellSurface"/>.</param>
            <param name="x">X coordinate of the obj.Surface.</param>
            <param name="y">Y coordinate of the obj.Surface.</param>
            <param name="text">Text to print.</param>
            <param name="drawFont">Instance of the <see cref="T:SadConsole.Readers.TheDrawFont"/> to use.</param>
        </member>
        <member name="T:SadConsole.ICellSurfaceResize">
            <summary>
            Adds a method to support resizing a surface.
            </summary>
        </member>
        <member name="M:SadConsole.ICellSurfaceResize.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="viewWidth">The viewable width of the surface.</param>
            <param name="viewHeight">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
            <param name="clear">When <see langword="true"/>, indicates each cell should be reset to the default values.</param>
        </member>
        <member name="M:SadConsole.ICellSurfaceResize.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface and view to the specified width and height.
            </summary>
            <param name="width">The width of the surface and view.</param>
            <param name="height">The height of the surface and view.</param>
            <param name="clear">When <see langword="true"/>, indicates each cell should be reset to the default values.</param>
        </member>
        <member name="T:SadConsole.ICellSurfaceSettable">
            <summary>
            Adds a method to change the backing cells of a surface.
            </summary>
        </member>
        <member name="M:SadConsole.ICellSurfaceSettable.SetSurface(SadConsole.ICellSurface,SadRogue.Primitives.Rectangle)">
            <summary>
            Remaps the cells of this surface to a view of the <paramref name="surface"/>.
            </summary>
            <param name="surface">The target surface to map cells from.</param>
            <param name="view">A view rectangle of the target surface.</param>
        </member>
        <member name="M:SadConsole.ICellSurfaceSettable.SetSurface(SadConsole.ColoredGlyphBase[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the cells of the surface to the provided array.
            </summary>
            <param name="cells">The cells to replace in this surface.</param>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
        </member>
        <member name="T:SadConsole.IFont">
            <summary>
            Represents a font used by the rendering engine.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.Name">
            <summary>
            The name of the font used when it is registered with the <see cref="P:SadConsole.GameHost.Fonts"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.GlyphHeight">
            <summary>
            The height of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.GlyphWidth">
            <summary>
            The width of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.TotalGlyphs">
            <summary>
            Gets how many glyphs this font has.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.SolidGlyphRectangle">
            <summary>
            The rectangle to draw the solid glyph used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.UnsupportedGlyphIndex">
            <summary>
            The glyph index to use when an unsupported glyph is used during rendering.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.UnsupportedGlyphRectangle">
            <summary>
            The rectangle to draw when a glyph that isn't supported is used by a surface.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.IsSadExtended">
            <summary>
            True when the font supports SadConsole extended decorators; otherwise false.
            </summary>
        </member>
        <member name="P:SadConsole.IFont.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="M:SadConsole.IFont.GetGlyphSourceRectangle(System.Int32)">
            <summary>
            Gets the registered rendering rectangle for a glyph.
            </summary>
            <param name="glyph">The index of the glyph to get.</param>
            <returns>The rectangle for the glyph.</returns>
        </member>
        <member name="M:SadConsole.IFont.GenerateGlyphSourceRectangle(System.Int32)">
            <summary>
            Generates a rectangle for the specified glyph. For the actual font rectangle, use <see cref="M:SadConsole.IFont.GetGlyphSourceRectangle(System.Int32)"/>.
            </summary>
            <param name="glyph">The glyph.</param>
            <returns>A rectangle based on where the font thinks the rectangle should be.</returns>
        </member>
        <member name="M:SadConsole.IFont.GetFontSize(SadConsole.IFont.Sizes)">
            <summary>
            Gets the pixel size of a font based on a <see cref="T:SadConsole.IFont.Sizes"/>.
            </summary>
            <param name="size">The desired size.</param>
            <returns>The width and height of a font cell.</returns>
        </member>
        <member name="M:SadConsole.IFont.GetDecorator(System.String,SadRogue.Primitives.Color)">
            <summary>
            Gets a <see cref="T:SadConsole.CellDecorator"/> by the <see cref="T:SadConsole.GlyphDefinition"/> defined by the font file.
            </summary>
            <param name="name">The name of the decorator to get.</param>
            <param name="color">The color to apply to the decorator.</param>
            <returns>The decorator instance.</returns>
            <remarks>If the decorator does not exist, <see cref="P:SadConsole.CellDecorator.Empty"/> is returned.</remarks>
        </member>
        <member name="P:SadConsole.IFont.GlyphDefinitions">
            <summary>
            A collection of named glyph definitions.
            </summary>
        </member>
        <member name="M:SadConsole.IFont.HasGlyphDefinition(System.String)">
            <summary>
            Returns <see langword="true"/> when the glyph has been defined by name.
            </summary>
            <param name="name">The name of the glyph</param>
            <returns><see langword="true"/> when the glyph name exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.IFont.GetGlyphDefinition(System.String)">
            <summary>
            Gets a <see cref="T:SadConsole.GlyphDefinition"/> by name that is defined by the font file.
            </summary>
            <param name="name">The name of the glyph definition.</param>
            <returns>The glyph definition.</returns>
            <remarks>If the glyph definition doesn't exist, return s<see cref="P:SadConsole.GlyphDefinition.Empty"/>.</remarks>
        </member>
        <member name="T:SadConsole.IFont.Sizes">
            <summary>
            The size options of a font.
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Quarter">
            <summary>
            One quater the size of the font. (Original Width and Height * 0.25)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Half">
            <summary>
            Half the size of the font. (Original Width and Height * 0.50)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.One">
            <summary>
            Exact size of the font. (Original Width and Height * 1.0)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Two">
            <summary>
            Two times the size of the font. (Original Width and Height * 2.0)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Three">
            <summary>
            Three times the size of the font. (Original Width and Height * 3.0)
            </summary>
        </member>
        <member name="F:SadConsole.IFont.Sizes.Four">
            <summary>
            Four times the size of the font. (Original Width and Height * 4.0)
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey">
            <summary>
            Represents the state of a single key.
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey.ShiftedCharacterMapping">
            <summary>
            A link between two characters, one unshifted and the other shifted.
            </summary>
            <param name="Unshifted">The character when unshifted.</param>
            <param name="Shifted">The character when shifted.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.ShiftedCharacterMapping.#ctor(System.Char,System.Char)">
            <summary>
            A link between two characters, one unshifted and the other shifted.
            </summary>
            <param name="Unshifted">The character when unshifted.</param>
            <param name="Shifted">The character when shifted.</param>
        </member>
        <member name="P:SadConsole.Input.AsciiKey.ShiftedCharacterMapping.Unshifted">
            <summary>The character when unshifted.</summary>
        </member>
        <member name="P:SadConsole.Input.AsciiKey.ShiftedCharacterMapping.Shifted">
            <summary>The character when shifted.</summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey.CharacterKeyMapping">
            <summary>
            Associates a character glyph and a <see cref="T:SadConsole.Input.Keys"/> value.
            </summary>
            <param name="CharacterGlyph">The number pad character.</param>
            <param name="Key">The key the character maps to.</param>
            <remarks>Used when the <see cref="F:SadConsole.Input.Keys.NumLock"/> is active.</remarks>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.CharacterKeyMapping.#ctor(System.Char,SadConsole.Input.Keys)">
            <summary>
            Associates a character glyph and a <see cref="T:SadConsole.Input.Keys"/> value.
            </summary>
            <param name="CharacterGlyph">The number pad character.</param>
            <param name="Key">The key the character maps to.</param>
            <remarks>Used when the <see cref="F:SadConsole.Input.Keys.NumLock"/> is active.</remarks>
        </member>
        <member name="P:SadConsole.Input.AsciiKey.CharacterKeyMapping.CharacterGlyph">
            <summary>The number pad character.</summary>
        </member>
        <member name="P:SadConsole.Input.AsciiKey.CharacterKeyMapping.Key">
            <summary>The key the character maps to.</summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.CapsLockedKeys">
            <summary>
            List of <see cref="T:SadConsole.Input.Keys"/> to consider as shifted when capslock is on.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.ShiftKeyMappings">
            <summary>
            A dictionary that is keyed off of a <see cref="T:SadConsole.Input.Keys"/> and associates that key with a character in a shifted and unshifted state.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.NumberKeyMappings">
            <summary>
            Dictionary that maps <see cref="T:SadConsole.Input.Keys"/> usually triggered by the numberpad with a character and non-numpad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.KeyRemapping">
            <summary>
            Remaps any incoming key to a combination of character and key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Key">
            <summary>
            The key from MonoGame or XNA.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Character">
            <summary>
            The keyboard character of the key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.TimeHeld">
            <summary>
            Total time the key has been held.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.PostInitialDelay">
            <summary>
            Tracks if the key was previously held when calculating the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Fill(SadConsole.Input.Keys,System.Boolean,SadConsole.Input.IKeyboardState)">
            <summary>
            Fills out the fields based on the key.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">Helps identify which <see cref="F:SadConsole.Input.AsciiKey.Character"/> to use while the key is pressed.</param>
            <param name="state">Keyboard state to read from.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(SadConsole.Input.Keys,SadConsole.Input.IKeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:SadConsole.Input.Keys"/> type. Shift is considered not pressed.
            </summary>
            <param name="key">The key.</param>
            <param name="state">Keyboar state to read from.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:SadConsole.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(SadConsole.Input.Keys,System.Boolean,SadConsole.Input.IKeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:SadConsole.Input.Keys"/> type.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">If shift should be considered pressed or not.</param>
            <param name="state">Keyboar state to read from.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:SadConsole.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the two <see cref="T:SadConsole.Input.AsciiKey"/> types use the same <see cref="F:SadConsole.Input.AsciiKey.Key"/> if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is 0. If the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is not 0, the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is compared.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.GetHashCode">
            <summary>
            Gets a hashcode based on the key and character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Compares if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field of two <see cref="T:SadConsole.Input.AsciiKey"/> instances are the same.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Equals(System.Object)">
            <summary>
            Compares references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Input.IKeyboardState">
            <summary>
            Holds the state of keystrokes by a keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IKeyboardState.CapsLock">
            <summary>
            Gets the current state of the Caps Lock key.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IKeyboardState.NumLock">
            <summary>
            Gets the current state of the Num Lock key.
            </summary>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.IsKeyDown(SadConsole.Input.Keys)">
            <summary>
            Gets whether given key is currently being pressed.
            </summary>
            <param name="key">The key to query.</param>
            <returns>true if the key is pressed; false otherwise.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.IsKeyUp(SadConsole.Input.Keys)">
            <summary>
            Gets whether given key is currently being not pressed.
            </summary>
            <param name="key">The key to query.</param>
            <returns>true if the key is not pressed; false otherwise.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.GetPressedKeys">
            <summary>
            Returns an array of values holding keys that are currently being pressed.
            </summary>
            <returns>The keys that are currently being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.Refresh">
            <summary>
            If applicable to the host implementation, refreshes the keyboard state.
            </summary>
        </member>
        <member name="T:SadConsole.Input.IMouseState">
            <summary>
            Reports the state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsLeftButtonDown">
            <summary>
            <see langword="true"/>  when the left mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsRightButtonDown">
            <summary>
            <see langword="true"/>  when the right mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsMiddleButtonDown">
            <summary>
            <see langword="true"/>  when the middle mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen relative to the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.MouseWheel">
            <summary>
            The value of the mouse wheel.
            </summary>
        </member>
        <member name="M:SadConsole.Input.IMouseState.Refresh">
            <summary>
            If applicable to the host implementation, refreshes the mouse state.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keyboard">
            <summary>
            Represents the state of the keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysPressed">
            <summary>
            A collection of keys registered as pressed which behaves like a command prompt when holding down keys. 
            Uses the <see cref="F:SadConsole.Input.Keyboard.RepeatDelay"/> and <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> settings.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysDown">
            <summary>
            A collection of keys currently held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysReleased">
            <summary>
            A collection of keys that were just released this frame.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.HasKeysDown">
            <summary>
            <see langword="true"/> when the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection has at least one key; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.HasKeysPressed">
            <summary>
            <see langword="true"/> when the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection has at least one key; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.RepeatDelay">
            <summary>
            How often a key is included in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection after the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> time has passed.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.InitialRepeatDelay">
            <summary>
            The initial delay after a key is first pressed before it is included a second time (while held down) in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.#ctor">
            <summary>
            Creates a new instance of the keyboard manager.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Clear">
            <summary>
            Clears the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/>, <see cref="P:SadConsole.Input.Keyboard.KeysDown"/>, <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collections.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.Keys)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.Keys)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Update(System.TimeSpan)">
            <summary>
            Reads the keyboard state from <see cref="M:SadConsole.GameHost.GetKeyboardState"/>.
            </summary>
            <param name="elapsedSeconds">Fractional seconds passed since Update was called.</param>
        </member>
        <member name="T:SadConsole.Input.KeyboardHandledKeyEventArgs">
            <summary>
            Event handler to preview key presses and cancel them.
            </summary>
        </member>
        <member name="P:SadConsole.Input.KeyboardHandledKeyEventArgs.Key">
            <summary>
            The key being pressed.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keys">
            <summary>
            Defines the keys on a keyboard.
            </summary>	
        </member>
        <member name="F:SadConsole.Input.Keys.None">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Back">
            <summary>
            BACKSPACE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Tab">
            <summary>
            TAB key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Enter">
            <summary>
            ENTER key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.CapsLock">
            <summary>
            CAPS LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Escape">
            <summary>
            ESC key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Space">
            <summary>
            SPACEBAR key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PageUp">
            <summary>
            PAGE UP key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PageDown">
            <summary>
            PAGE DOWN key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.End">
            <summary>
            END key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Home">
            <summary>
            HOME key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Left">
            <summary>
            LEFT ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Up">
            <summary>
            UP ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Right">
            <summary>
            RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Down">
            <summary>
            DOWN ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Select">
            <summary>
            SELECT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Print">
            <summary>
            PRINT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Execute">
            <summary>
            EXECUTE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PrintScreen">
            <summary>
            PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Insert">
            <summary>
            INS key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Delete">
            <summary>
            DEL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Help">
            <summary>
            HELP key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D0">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D9">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftWindows">
            <summary>
            Left Windows key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightWindows">
            <summary>
            Right Windows key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Apps">
            <summary>
            Applications key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Sleep">
            <summary>
            Computer Sleep key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad0">
            <summary>
            Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad1">
            <summary>
            Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad2">
            <summary>
            Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad3">
            <summary>
            Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad4">
            <summary>
            Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad5">
            <summary>
            Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad6">
            <summary>
            Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad7">
            <summary>
            Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad8">
            <summary>
            Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad9">
            <summary>
            Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Multiply">
            <summary>
            Multiply key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Add">
            <summary>
            Add key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Separator">
            <summary>
            Separator key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Subtract">
            <summary>
            Subtract key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Decimal">
            <summary>
            Decimal key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Divide">
            <summary>
            Divide key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F13">
            <summary>
            F13 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F14">
            <summary>
            F14 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F15">
            <summary>
            F15 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F16">
            <summary>
            F16 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F17">
            <summary>
            F17 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F18">
            <summary>
            F18 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F19">
            <summary>
            F19 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F20">
            <summary>
            F20 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F21">
            <summary>
            F21 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F22">
            <summary>
            F22 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F23">
            <summary>
            F23 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F24">
            <summary>
            F24 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumLock">
            <summary>
            NUM LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Scroll">
            <summary>
            SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftShift">
            <summary>
            Left SHIFT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightShift">
            <summary>
            Right SHIFT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftControl">
            <summary>
            Left CONTROL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightControl">
            <summary>
            Right CONTROL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftAlt">
            <summary>
            Left ALT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightAlt">
            <summary>
            Right ALT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserBack">
            <summary>
            Browser Back key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserForward">
            <summary>
            Browser Forward key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserRefresh">
            <summary>
            Browser Refresh key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserStop">
            <summary>
            Browser Stop key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserSearch">
            <summary>
            Browser Search key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserFavorites">
            <summary>
            Browser Favorites key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserHome">
            <summary>
            Browser Start and Home key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeMute">
            <summary>
            Volume Mute key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeDown">
            <summary>
            Volume Down key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeUp">
            <summary>
            Volume Up key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaNextTrack">
            <summary>
            Next Track key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaPreviousTrack">
            <summary>
            Previous Track key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaStop">
            <summary>
            Stop Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaPlayPause">
            <summary>
            Play/Pause Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchMail">
            <summary>
            Start Mail key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.SelectMedia">
            <summary>
            Select Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchApplication1">
            <summary>
            Start Application 1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchApplication2">
            <summary>
            Start Application 2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPlus">
            <summary>
            For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemComma">
            <summary>
            For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemMinus">
            <summary>
            For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPeriod">
            <summary>
            For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemTilde">
            <summary>
            The OEM tilde key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ProcessKey">
            <summary>
            IME PROCESS key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Attn">
            <summary>
            Attn key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Crsel">
            <summary>
            CrSel key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Exsel">
            <summary>
            ExSel key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.EraseEof">
            <summary>
            Erase EOF key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Play">
            <summary>
            Play key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Zoom">
            <summary>
            Zoom key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Pa1">
            <summary>
            PA1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemClear">
            <summary>
            CLEAR key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ChatPadGreen">
            <summary>
            Green ChatPad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ChatPadOrange">
            <summary>
            Orange ChatPad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Pause">
            <summary>
            PAUSE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ImeConvert">
            <summary>
            IME Convert key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ImeNoConvert">
            <summary>
            IME NoConvert key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Kana">
            <summary>
            Kana key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Kanji">
            <summary>
            Kanji key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemAuto">
            <summary>
            OEM Auto key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemCopy">
            <summary>
            OEM Copy key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemEnlW">
            <summary>
            OEM Enlarge Window key.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Mouse">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleButtonDown">
            <summary>
            Indicates the middle mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleButtonDownDuration">
            <summary>
            The amount of time the middle button has been held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleClicked">
            <summary>
            Indicates the middle mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleDoubleClicked">
            <summary>
            Indicates the middle mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftButtonDown">
            <summary>
            Indicates the left mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftButtonDownDuration">
            <summary>
            The amount of time the left button has been held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftClicked">
            <summary>
            Indicates the left mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftDoubleClicked">
            <summary>
            Indicates the left mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightButtonDown">
            <summary>
            Indicates the right mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightButtonDownDuration">
            <summary>
            The amount of time the right button has been held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightClicked">
            <summary>
            Indicates the right mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightDoubleClicked">
            <summary>
            Indicates the right mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValue">
            <summary>
            The cumulative value of the scroll wheel. 
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValueChange">
            <summary>
            The scroll wheel value change between frames.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.IsOnScreen">
            <summary>
            Indicates that the mouse is currently within the bounds of the rendering area.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Update(System.TimeSpan)">
            <summary>
            Reads the mouse state from <see cref="M:SadConsole.GameHost.GetMouseState"/>.
            </summary>
            <param name="elapsedSeconds">Fractional seconds passed since Update was called.</param>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clear">
            <summary>
            Clears the buttons, position, wheel information.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Process">
            <summary>
            Builds information about the mouse state based on the <see cref="P:SadConsole.GameHost.FocusedScreenObjects"/> or <see cref="P:SadConsole.GameHost.Screen"/>. Should be called each frame.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.ClearLastMouseScreenObject">
            <summary>
            Unlocks the last screen object the mouse was locked to. Allows another console to become locked to the mouse.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.IsMouseOverScreenObjectSurface(SadConsole.IScreenSurface)">
            <summary>
            Returns true when the mouse is currently over the provided screen object.
            </summary>
            <param name="screenObject">The screen object to check.</param>
            <returns>True or false indicating if the mouse is over the screen object.</returns>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clone">
            <summary>
            Clones this mouse into a new object.
            </summary>
            <returns>A clone.</returns>
        </member>
        <member name="T:SadConsole.Input.MouseScreenObjectState">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.ScreenObject">
            <summary>
            The screen object used to create the mouse state.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.Mouse">
            <summary>
            The mouse data.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.Cell">
            <summary>
            The cell the mouse is over, from <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.CellPosition">
            <summary>
            The position of the <see cref="P:SadConsole.Input.MouseScreenObjectState.Cell"/>.  
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.SurfaceCellPosition">
            <summary>
            The position of the mouse on the <see cref="T:SadConsole.IScreenObject"/>, based on the <see cref="P:SadConsole.Input.MouseScreenObjectState.WorldCellPosition"/> and the position of the <see cref="P:SadConsole.Input.MouseScreenObjectState.ScreenObject"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.WorldCellPosition">
            <summary>
            A cell-based location of the mouse based on the screen, not the screen object.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.SurfacePixelPosition">
            <summary>
            The mouse position in pixels on the screen object.
            </summary>
        </member>
        <member name="P:SadConsole.Input.MouseScreenObjectState.IsOnScreenObject">
            <summary>
            Indicates that the mouse is within the bounds of <see cref="P:SadConsole.Input.MouseScreenObjectState.ScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.MouseScreenObjectState.#ctor(SadConsole.IScreenObject,SadConsole.Input.Mouse)">
            <summary>
            Calculates a new <see cref="T:SadConsole.Input.MouseScreenObjectState"/> based on an <see cref="T:SadConsole.IScreenObject"/> and <see cref="T:SadConsole.Input.Mouse"/> state.
            </summary>
            <param name="screenObject">The screen object to process with the mouse state.</param>
            <param name="mouseData">The current mouse state.</param>
        </member>
        <member name="T:SadConsole.Instructions.AnimatedValue">
            <summary>
            An function that applies an <see cref="T:SadConsole.EasingFunctions.EasingBase"/> function between two values.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.AnimatedValue.ValueChanged">
            <summary>
            Raised when the instruction is running and the value changes during <see cref="M:SadConsole.Instructions.AnimatedValue.Update(SadConsole.IScreenObject,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Instructions.AnimatedValue.EasingFunction">
            <summary>
            The easing function assigned to animate the value.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.AnimatedValue.Value">
            <summary>
            The current or last value of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.AnimatedValue.StartingValue">
            <summary>
            The stating value of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.AnimatedValue.EndingValue">
            <summary>
            The ending value of the animation.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.#ctor(System.TimeSpan,System.Double,System.Double,SadConsole.EasingFunctions.EasingBase)">
            <summary>
            Creates a new value animated over time.
            </summary>
            <param name="duration">The total time this animation should run.</param>
            <param name="startingValue">The starting value of the animation.</param>
            <param name="endingValue">The ending value of the animation.</param>
            <param name="easingFunction">The easing function used during animation. Defaults to <see cref="T:SadConsole.EasingFunctions.Linear"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.Reset(System.TimeSpan,System.Double,System.Double,SadConsole.EasingFunctions.EasingBase)">
            <summary>
            Resets this object to new values.
            </summary>
            <param name="duration">The total time this animation should run.</param>
            <param name="startingValue">The starting value of the animation.</param>
            <param name="endingValue">The ending value of the animation.</param>
            <param name="easingFunction">The easing function used during animation. Defaults to <see cref="T:SadConsole.EasingFunctions.Linear"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Instructions.AnimatedValue.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Updates the timer with the time since the last call.
            </summary>
            <param name="console">The parent object.</param>
            <param name="delta">The time since the last frame update.</param>
        </member>
        <member name="T:SadConsole.Instructions.CodeInstruction">
            <summary>
            An instruction with a code callback.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.#ctor(System.Func{SadConsole.IScreenObject,System.TimeSpan,System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.SetCallback(System.Func{SadConsole.IScreenObject,System.TimeSpan,System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.ConcurrentInstructions">
            <summary>
            Runs one or more instructions at the same time. This instruction completes when all added instructions have finished.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.ConcurrentInstructions.Instructions">
            <summary>
            The instructions to run concurrently.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.#ctor(System.Collections.Generic.IEnumerable{SadConsole.Instructions.InstructionBase})">
            <summary>
            Creates a new instruction that runs the provided instructions concurrently.
            </summary>
            <param name="instructions">The instructions</param>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Repeat">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.DrawString">
            <summary>
            Draws a string to a console as if someone was typing.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.TotalTimeToPrint">
            <summary>
            Gets or sets the total time to take to write the string. Use <see cref="F:System.TimeSpan.Zero"/> for no duration.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Position">
            <summary>
            Gets or sets the position on the console to write the text.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Cursor">
            <summary>
            Represents the cursor used in printing. Use this for styling and printing behavior.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.ColoredString,System.TimeSpan)">
            <summary>
            Creates a new instance of the object with the specified text.
            </summary>
            <param name="text">The text to print.</param>
            <param name="duration">The time to print the entire text.</param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.ColoredString)">
            <summary>
            Creates a new instance of the object with the specified text. Prints the text in one second.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor">
            <summary>
            Creates a new instance of the object. <see cref="P:SadConsole.Instructions.DrawString.Text"/> must be set manually.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Reset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.DrawString.OnAdded(SadConsole.IScreenObject)">
            <summary>
            Creates an invisible cursor that prints on the target surface.
            </summary>
            <param name="host">The host this instruction is added to.</param>
        </member>
        <member name="T:SadConsole.Instructions.FadeTextSurfaceTint">
            <summary>
            Animates a color change to <see cref="P:SadConsole.ScreenSurface.Tint"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors">
            <summary>
            The color to fade the tint to.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadConsole.IScreenSurface,SadRogue.Primitives.Gradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that targets the specified console.
            </summary>
            <param name="objectSurface">The <see cref="P:SadConsole.IScreenSurface.Tint"/> to fade.</param>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadRogue.Primitives.Gradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that uses the console passed to <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/>.
            </summary>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor">
            <summary>
            Creates a new tint fade instruction with default settings that uses the console passed to <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.IScreenObject,System.TimeSpan)"/>.
            </summary>
            <remarks>
            The default settings are:
            
              - <see cref="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors"/>: <see cref="F:SadRogue.Primitives.Color.White"/> to <see cref="F:SadRogue.Primitives.Color.Black"/>
              - Duration: 1 second
            </remarks>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase">
            <summary>
            Base class for all instructions.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Started">
            <summary>
            Raised when the instruction starts.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Finished">
            <summary>
            Raised when the instruction completes.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Repeating">
            <summary>
            Raised when the instruction completes but is going to repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RemoveOnFinished">
            <summary>
            When true, this instruction will automatically remove itself from the parent's <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.IsFinished">
            <summary>
            Flags the instruction as completed or not. If completed, the <see cref="E:SadConsole.Instructions.InstructionBase.Finished"/> event will be raised.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RepeatCount">
            <summary>
            Indicates how many times this set will repeat. Use 0 to not repeat and -1 to repeat forever.
            </summary>
            <remarks>This property counts down each time the instruction finishes. If set to -1 it will repeat forever. As this represents how many times to repeat, setting this value to 1 would allow the instruction to execute twice, once for the original time, and again for the repeat counter of 1.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Reset">
            <summary>
            Resets the Done flag.
            </summary>
            <remarks>On the base class, resets the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> to false. Override this method to reset the derived class' counters and status flags for the instruction.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Repeat">
            <summary>
            Repeats the current instruction. Decrements the <see cref="P:SadConsole.Instructions.InstructionBase.RepeatCount"/> value (if applicable), and raises the <see cref="E:SadConsole.Instructions.InstructionBase.Repeating"/> event. This method should be overridden in derived classes to customize how the object is reset for a repeat.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Executes the instruction. This base class method should be called from derived classes. If the IsFinished property is set to true, will try to repeat if needed and will raise all appropriate events.
            </summary>
            <param name="componentHost">The object that hosts this instruction.</param>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnFinished(SadConsole.IScreenObject)">
            <summary>
            Called when the instruction finishes.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnRepeating">
            <summary>
            Called when the instruction repeats.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnStarted">
            <summary>
            Called when the instruction first runs.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionSet">
            <summary>
            A set of instructions to be executed sequentially.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Instructions">
            <summary>
            All instructions in this set.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Name">
            <summary>
            The name of this instruction to identify it apart from other instruction sets.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.CurrentInstruction">
            <summary>
            Represents the current instruction if this set is currently executing.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Reset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <summary>
            Runs the instruction set. Once all instructions are finished, this set will set the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> property will be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Wait(System.TimeSpan)">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.Wait"/> instruction with the specified duration to the end of this set.
            </summary>
            <param name="duration">The time to wait.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Instruct(SadConsole.Instructions.InstructionBase)">
            <summary>
            Adds an instruction to the end of this set.
            </summary>
            <param name="instruction"></param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Code(System.Func{SadConsole.IScreenObject,System.TimeSpan,System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.CodeInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Code(System.Action)">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.CodeInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.WaitTrue(System.Func{System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.PredicateInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.InstructConcurrent(SadConsole.Instructions.InstructionBase[])">
            <summary>
            Adds a <see cref="T:SadConsole.Instructions.ConcurrentInstructions"/> to the end of this set.
            </summary>
            <param name="instructions">Instructions to add. Must be two or more instructions.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="T:SadConsole.Instructions.PredicateInstruction">
            <summary>
            Instruction that waits until the code callback returns <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.PredicateInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.#ctor(System.Func{System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.SetCallback(System.Func{System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.Wait">
            <summary>
            Represents an instruction to pause for a specified duration.
            </summary>
        </member>
        <member name="F:SadConsole.Instructions.Wait.CountedTime">
            <summary>
            How much time has passed.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Wait.Duration">
            <summary>
            The duration of the wait.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor(System.TimeSpan)">
            <summary>
            Creates a new wait timer with the specified duration.
            </summary>
            <param name="duration">How long this instruction waits until it signals <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor">
            <summary>
            Creates a new wait timer with a 1-second delay.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.Update(SadConsole.IScreenObject,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.Wait.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.IScreenObject">
            <summary>
            A generic object processed by SadConsole. Provides parent/child, components, position, and input callbacks.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.IsEnabledChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsEnabled"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.ParentChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.Parent"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.IsVisibleChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsVisible"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.FocusLost">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsFocused"/> property is <see langword="false"/>.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenObject.Focused">
            <summary>
            Raised when the <see cref="P:SadConsole.IScreenObject.IsFocused"/> property is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.SortOrder">
            <summary>
            Indicates the sorting order this object should use when parented. Sorting is a manual operation on the <see cref="P:SadConsole.IScreenObject.Children"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.FocusedMode">
            <summary>
            How the object should handle becoming active.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.AbsolutePosition">
            <summary>
            A position that's based on the current <see cref="P:SadRogue.Primitives.IPositionable.Position"/>, as interpreted by the implementing class, in pixels.
            </summary>
            <remarks>
            Most objects will implement this property based on <see cref="P:SadRogue.Primitives.IPositionable.Position"/> which usually depends on the <see cref="P:SadConsole.IScreenObject.Parent"/> object's position.
            </remarks>
        </member>
        <member name="P:SadConsole.IScreenObject.IgnoreParentPosition">
            <summary>
            When <see langword="true"/>, this object should ignore it's parent position when calculating <see cref="P:SadConsole.IScreenObject.AbsolutePosition"/>; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.Children">
            <summary>
            The child objects of this instance.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsEnabled">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsExclusiveMouse">
            <summary>
            Gets or sets whether or not this object has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsFocused">
            <summary>
            Gets or sets this console as the focused object for input.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.IsVisible">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.Parent">
            <summary>
            The parent object that this instance is a child of.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.UseKeyboard">
            <summary>
            When <see langword="true"/>, this object will use the keyboard; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenObject.UseMouse">
            <summary>
            When <see langword="true"/>, this object will use the mouse; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.IScreenObject.Render(System.TimeSpan)">
            <summary>
            Draws all <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> and <see cref="P:SadConsole.IScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.IScreenObject.IsVisible"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.IScreenObject.OnFocused">
            <summary>
            Called when this object is focused.
            </summary>
        </member>
        <member name="M:SadConsole.IScreenObject.OnFocusLost">
            <summary>
            Called when this object's focus has been lost.
            </summary>
        </member>
        <member name="M:SadConsole.IScreenObject.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called by the engine to process the keyboard.
            </summary>
            <param name="keyboard">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Processes the mouse.
            </summary>
            <param name="state">The mouse state related to this object.</param>
            <returns>True when this object should halt further mouse processing..</returns>
        </member>
        <member name="M:SadConsole.IScreenObject.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Called when the mouse is being used by something else.
            </summary>
            <param name="state">The current state of the mouse based on this object.</param>
        </member>
        <member name="M:SadConsole.IScreenObject.Update(System.TimeSpan)">
            <summary>
            Updates all <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> and <see cref="P:SadConsole.IScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
            <remarks>Only processes if <see cref="P:SadConsole.IScreenObject.IsEnabled"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.IScreenObject.UpdateAbsolutePosition">
            <summary>
            Sets a value for <see cref="P:SadConsole.IScreenObject.AbsolutePosition"/> based on the <see cref="P:SadRogue.Primitives.IPositionable.Position"/> of this instance and the <see cref="P:SadConsole.IScreenObject.Parent"/> instance.
            </summary>
        </member>
        <member name="T:SadConsole.IScreenSurface">
            <summary>
            A screen object that has mouse input, surface, and render information.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseButtonClicked">
            <summary>
            Raised when the a mouse button is clicked on this object.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseEnter">
            <summary>
            Raised when the mouse enters this object.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseExit">
            <summary>
            Raised when the mouse exits this object.
            </summary>
        </member>
        <member name="E:SadConsole.IScreenSurface.MouseMove">
            <summary>
            Raised when the mouse moves around the this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.DefaultRendererName">
            <summary>
            The name of the default renderer for this object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.FocusOnMouseClick">
            <summary>
            When true, this object will set <see cref="P:SadConsole.IScreenObject.IsFocused"/> to true when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.HeightPixels">
            <summary>
            The height of the surface in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.MoveToFrontOnMouseClick">
            <summary>
            When true, this object will move to the front of its parent object when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Renderer">
            <summary>
            The renderer used to draw this surface.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Surface">
            <summary>
            The surface.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadRogue.Primitives.IPositionable.Position"/> of the object as if it is pixels and not cells.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.WidthPixels">
            <summary>
            The width of the surface in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.AbsoluteArea">
            <summary>
            The pixel area on the screen this surface occupies.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Font">
            <summary>
            Font used with rendering.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.FontSize">
            <summary>
            The size of the <see cref="P:SadConsole.IScreenSurface.Font"/> cells applied to the object when rendering.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.ForceRendererRefresh">
            <summary>
            When <see langword="true"/>, forces the <see cref="P:SadConsole.IScreenSurface.Renderer"/> to refresh the backing texture with the latest state of the object.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.IScreenSurface.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="T:SadConsole.IScreenSurfaceEditable">
            <summary>
            The same as a <see cref="T:SadConsole.IScreenSurface"/> interface, except that it also implements <see cref="T:SadConsole.ISurface"/> for convenience.
            </summary>
        </member>
        <member name="T:SadConsole.ISurface">
            <summary>
            An interface that provides a Surface property that allows the editor extensions to work.
            </summary>
        </member>
        <member name="P:SadConsole.ISurface.Surface">
            <summary>
            The surface.
            </summary>
        </member>
        <member name="T:SadConsole.ISurfaceSettable">
            <summary>
            An interface that provides a Surface property which can be set.
            </summary>
        </member>
        <member name="P:SadConsole.ISurfaceSettable.Surface">
            <summary>
            Sets the surface.
            </summary>
        </member>
        <member name="T:SadConsole.ITexture">
            <summary>
            Represents a texture provided by a game host.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.ResourcePath">
            <summary>
            The file path to the texture.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.Height">
            <summary>
            The height of the texture.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.Width">
            <summary>
            The width of the texture.
            </summary>
        </member>
        <member name="P:SadConsole.ITexture.Size">
            <summary>
            Size of the texture. Generally, the count of pixels.
            </summary>
        </member>
        <member name="M:SadConsole.ITexture.GetPixels">
            <summary>
            Gets an array of colors.
            </summary>
        </member>
        <member name="M:SadConsole.ITexture.SetPixels(SadRogue.Primitives.Color[])">
            <summary>
            Sets colors in the texture.
            </summary>
            <param name="colors">The individual pixel colors to set.</param>
        </member>
        <member name="M:SadConsole.ITexture.SetPixels(System.ReadOnlySpan{SadRogue.Primitives.Color})">
            <summary>
            Sets colors in the texture.
            </summary>
            <param name="colors">The individual pixel colors to set.</param>
        </member>
        <member name="M:SadConsole.ITexture.SetPixel(SadRogue.Primitives.Point,SadRogue.Primitives.Color)">
            <summary>
            Sets a specific pixel in the texture to a color by x,y coordinate.
            </summary>
            <param name="position">The position of the pixel to set.</param>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:SadConsole.ITexture.SetPixel(System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Sets a specific pixel in the texture to a color by index. Row-major ordered.
            </summary>
            <param name="index"></param>
            <param name="color"></param>
        </member>
        <member name="M:SadConsole.ITexture.GetPixel(SadRogue.Primitives.Point)">
            <summary>
            Gets a pixel in the texture by x,y coordinate.
            </summary>
            <param name="position">The x,y coordinate of the pixel.</param>
            <returns>The color of the pixel.</returns>
        </member>
        <member name="M:SadConsole.ITexture.GetPixel(System.Int32)">
            <summary>
            Gets a pixel in the texture by index.
            </summary>
            <param name="index">The index of the pixel.</param>
            <returns>The color of the pixel.</returns>
        </member>
        <member name="M:SadConsole.ITexture.ToSurface(SadConsole.TextureConvertMode,System.Int32,System.Int32,SadConsole.TextureConvertBackgroundStyle,SadConsole.TextureConvertForegroundStyle,SadRogue.Primitives.Color[],SadConsole.ICellSurface)">
            <summary>
            Converts the texture into a cell surface based on the specified mode.
            </summary>
            <param name="mode">The mode used when converting the texture to a surface.</param>
            <param name="surfaceWidth">How many cells wide the returned surface is.</param>
            <param name="surfaceHeight">How many cells high the returned surface is.</param>
            <param name="backgroundStyle">The style to use when <paramref name="mode"/> is <see cref="F:SadConsole.TextureConvertMode.Background"/>.</param>
            <param name="foregroundStyle">The style to use when <paramref name="mode"/> is <see cref="F:SadConsole.TextureConvertMode.Foreground"/>.</param>
            <param name="cachedColorArray">When provided, this array is used for color data. It must match the texture's expected <see cref="M:SadConsole.ITexture.GetPixels"/> bounds. Used with <paramref name="cachedColorArray"/>.</param>
            <param name="cachedSurface">The cell surface to use instead of creating a new one. Used with <paramref name="cachedColorArray"/>.</param>
            <returns>A new surface.</returns>
            <remarks></remarks>
        </member>
        <member name="T:SadConsole.TextureConvertMode">
            <summary>
            The conversion mode from <see cref="T:SadConsole.ITexture"/> to <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertMode.Background">
            <summary>
            Fills the background of each cell with the pixel color.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertMode.Foreground">
            <summary>
            Fills the foreground of each cell with the pixel color.
            </summary>
        </member>
        <member name="T:SadConsole.TextureConvertForegroundStyle">
            <summary>
            The style applied when <see cref="F:SadConsole.TextureConvertMode.Foreground"/> is set.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertForegroundStyle.Block">
            <summary>
            Fills the surface with block ascii that represents the brightness of the pixel. Foreground is set to the pixel color.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertForegroundStyle.AsciiSymbol">
            <summary>
            Fills the surface with ascii symbols that represents the brightness of the pixel. Foreground is set to the pixel color.
            </summary>
        </member>
        <member name="T:SadConsole.TextureConvertBackgroundStyle">
            <summary>
            The style applied when <see cref="F:SadConsole.TextureConvertMode.Background"/> is set.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertBackgroundStyle.Pixel">
            <summary>
            Simply resizes the image and maps the cell to the pixel without any other color conversion.
            </summary>
        </member>
        <member name="F:SadConsole.TextureConvertBackgroundStyle.Smooth">
            <summary>
            Calculates the cell color based on the surrounding colors of the image.
            </summary>
        </member>
        <member name="T:SadConsole.LayeredScreenSurface">
            <summary>
            A basic console that can contain controls.
            </summary>
        </member>
        <member name="P:SadConsole.LayeredScreenSurface.Layers">
            <summary>
            The controls host holding all the controls.
            </summary>
        </member>
        <member name="M:SadConsole.LayeredScreenSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.LayeredScreenSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.LayeredScreenSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the console in cells.</param>
            <param name="height">The visible height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
        </member>
        <member name="M:SadConsole.LayeredScreenSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the console in cells.</param>
            <param name="height">The height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
            <param name="initialCells">The cells to seed the console with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.LayeredScreenSurface.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new console using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.LayeredScreenSurface.ToString">
            <summary>
            Returns the value "Console (Controls)".
            </summary>
            <returns>The string "Console (Controls)".</returns>
        </member>
        <member name="T:SadConsole.Quick.Keyboard">
            <summary>
            Adds keyboard-related extension methods for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Quick.Keyboard.WithKeyboard(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})">
            <summary>
            Adds a keyboard handler to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="M:SadConsole.Quick.Keyboard.RemoveKeyboardHooks(SadConsole.IScreenObject)">
            <summary>
            Removes all of the keyboard hooks added with <see cref="M:SadConsole.Quick.Keyboard.WithKeyboard(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
        </member>
        <member name="M:SadConsole.Quick.Keyboard.RemoveKeyboardHook(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})">
            <summary>
            Removes the specified handler that was added with <see cref="M:SadConsole.Quick.Keyboard.WithKeyboard(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.Keyboard,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="T:SadConsole.Quick.Mouse">
            <summary>
            Adds mouse-related extension methods for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Quick.Mouse.WithMouse(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})">
            <summary>
            Adds a mouse handler to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="M:SadConsole.Quick.Mouse.RemoveMouseHooks(SadConsole.IScreenObject)">
            <summary>
            Removes all of the mouse hooks added with <see cref="M:SadConsole.Quick.Mouse.WithMouse(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
        </member>
        <member name="M:SadConsole.Quick.Mouse.RemoveMouseHook(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})">
            <summary>
            Removes the specified handler that was added with <see cref="M:SadConsole.Quick.Mouse.WithMouse(SadConsole.IScreenObject,System.Func{SadConsole.IScreenObject,SadConsole.Input.MouseScreenObjectState,System.Boolean})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="T:SadConsole.Quick.Update">
            <summary>
            Adds logic extension methods for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Quick.Update.WithUpdate(SadConsole.IScreenObject,System.Action{SadConsole.IScreenObject,System.TimeSpan})">
            <summary>
            Adds a keyboard handler to a <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="M:SadConsole.Quick.Update.RemoveUpdateHooks(SadConsole.IScreenObject)">
            <summary>
            Removes all of the keyboard hooks added with <see cref="M:SadConsole.Quick.Update.WithUpdate(SadConsole.IScreenObject,System.Action{SadConsole.IScreenObject,System.TimeSpan})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
        </member>
        <member name="M:SadConsole.Quick.Update.RemoveUpdateHook(SadConsole.IScreenObject,System.Action{SadConsole.IScreenObject,System.TimeSpan})">
            <summary>
            Removes the specified handler that was added with <see cref="M:SadConsole.Quick.Update.WithUpdate(SadConsole.IScreenObject,System.Action{SadConsole.IScreenObject,System.TimeSpan})"/>.
            </summary>
            <param name="screenObject">The object to use.</param>
            <param name="handler">The handler callback.</param>
        </member>
        <member name="T:SadConsole.Readers.Playscii">
            <summary>
            Playscii converter. Check this excellent ascii editor out at http://vectorpoem.com/playscii/
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.s_palettes">
            <summary>
            Cashed palletes.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.s_paletteExtensions">
            <summary>
            Palette file extensions supported by the Playscii format.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.MaxColors">
            <summary>
            Maximum amount of colors supported by the Playscii format.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.charset">
            <summary>
            Name of the font file.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.frames">
            <summary>
            Hold all the animation frames.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.height">
            <summary>
            Surface height.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.palette">
            <summary>
            Name of the palette file.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.width">
            <summary>
            Surface width.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.Playscii.Frame">
            <summary>
            Json frame object in the <see cref="T:SadConsole.Readers.Playscii"/> file.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Frame.delay">
            <summary>
            Duration for this frame.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Frame.layers">
            <summary>
            <see cref="T:SadConsole.Readers.Playscii"/> frame layers that will be converted to <see cref="T:SadConsole.ScreenSurface"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.Playscii.Frame.ToScreenSurface(System.Int32,System.Int32,SadConsole.IFont,SadRogue.Primitives.Palette)">
            <summary>
            Converts the <see cref="T:SadConsole.Readers.Playscii"/> frame to SadConsole <see cref="T:SadConsole.ScreenSurface"/>.
            </summary>
            <param name="width">Width of the <see cref="T:SadConsole.ScreenSurface"/>.</param>
            <param name="height">Height of the <see cref="T:SadConsole.ScreenSurface"/>.</param>
            <param name="font"><see cref="T:SadConsole.IFont"/> to be used when creating the <see cref="T:SadConsole.ScreenSurface"/>.</param>
            <param name="colors"><see cref="T:SadRogue.Primitives.Palette"/> of colors converted from the <see cref="T:SadConsole.Readers.Playscii"/> format.</param>
            <returns><see cref="T:SadConsole.ScreenSurface"/> containing the image from the first animation frame.</returns>
        </member>
        <member name="T:SadConsole.Readers.Playscii.Layer">
            <summary>
            Json layer in the <see cref="T:SadConsole.Readers.Playscii"/> file.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Layer.name">
            <summary>
            Layer name.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Layer.tiles">
            <summary>
            <see cref="T:SadConsole.Readers.Playscii"/> tiles that will be converted to <see cref="T:SadConsole.ColoredGlyphBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Layer.visible">
            <summary>
            Visibility of this layer.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.Playscii.Layer.ToSurface(SadConsole.ScreenSurface,SadRogue.Primitives.Palette)">
            <summary>
            Converts the <see cref="T:SadConsole.Readers.Playscii"/> layer to a SadConsole <see cref="T:SadConsole.ScreenSurface"/>.
            </summary>
            <param name="parent"><see cref="T:SadConsole.ScreenSurface"/> that represents Playscii frame holding this layer.</param>
            <param name="colors"><see cref="T:SadRogue.Primitives.Palette"/> of colors converted from the <see cref="T:SadConsole.Readers.Playscii"/> format.</param>
            <returns><see cref="T:SadConsole.ScreenSurface"/> containg the given <see cref="T:SadConsole.Readers.Playscii"/> layer.</returns>
        </member>
        <member name="T:SadConsole.Readers.Playscii.Tile">
            <summary>
            Json tile in the <see cref="T:SadConsole.Readers.Playscii"/> file.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Tile.bg">
            <summary>
            Tile background color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Tile.glyph">
            <summary>
            Tile character index.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Tile.fg">
            <summary>
            Tile foreground color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.Playscii.Tile.xform">
            <summary>
            Tile rotation and mirror.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.Playscii.Tile.ToColoredGlyph(SadConsole.IFont,SadRogue.Primitives.Palette)">
            <summary>
            Converts the <see cref="T:SadConsole.Readers.Playscii"/> tile to a SadConsole <see cref="T:SadConsole.ColoredGlyphBase"/>.
            </summary>
            <param name="font"><see cref="T:SadConsole.IFont"/> to be used when creating the <see cref="T:SadConsole.ScreenSurface"/>.</param>
            <param name="colors"><see cref="T:SadRogue.Primitives.Palette"/> of colors converted from the <see cref="T:SadConsole.Readers.Playscii"/> format.</param>
            <returns><see cref="T:SadConsole.ColoredGlyphBase"/> equivalent of the <see cref="T:SadConsole.Readers.Playscii"/> tile.</returns>
        </member>
        <member name="M:SadConsole.Readers.Playscii.GetPalette(System.String)">
            <summary>
            Converts <see cref="T:SadConsole.Readers.Playscii"/> palette file to a SadConsole <see cref="T:SadRogue.Primitives.Palette"/>.
            </summary>
            <param name="fileName">Name and path of the palette file.</param>
            <returns><see cref="T:SadRogue.Primitives.Palette"/> of <see cref="T:SadConsole.Readers.Playscii"/> colors.</returns>
            <remarks>Place the palette file in the same folder as the playscii file.</remarks>
        </member>
        <member name="M:SadConsole.Readers.Playscii.ReadFile(System.String,System.String)">
            <summary>
            Reads the <see cref="T:SadConsole.Readers.Playscii"/> Json file.
            </summary>
            <param name="playsciiFileName">Playscii file.</param>
            <param name="zipArchiveName">Zip archive containing playscii file.</param>
            <returns>Deserialised object containing <see cref="T:SadConsole.Readers.Playscii"/> save file data.</returns>
        </member>
        <member name="M:SadConsole.Readers.Playscii.ToScreenSurface(System.String,SadConsole.IFont,System.String,System.String)">
            <summary>
            Converts a <see cref="T:SadConsole.Readers.Playscii"/> file to a SadConsole <see cref="T:SadConsole.ScreenSurface"/>.
            </summary>
            <param name="fileName">Name and path of the <see cref="T:SadConsole.Readers.Playscii"/> file (give only file name if <paramref name="zipArchiveName"/> is used).</param>
            <param name="font"><see cref="T:SadConsole.IFont"/> to be used when converting the <see cref="T:SadConsole.Readers.Playscii"/> file.</param>
            <param name="paletteFileName">Path to an alternative palette file rather than the one specified in the playscii records.</param>
            <param name="zipArchiveName">If specified, the playscii file will be read from this zip archive.</param>
            
            <remarks>SadConsole does not support all the Playscii features at the moment, so the conversion will not be perfect.<br></br>
            Do not use tile rotation and set Z-Depth to 0 on all Playscii layers.<br></br>
            Transparent glyph foreground is fine, but it will not cut through the <see cref="T:SadConsole.ColoredGlyphBase"/> background like it does in Playscii.</remarks>
            
            <returns><see cref="T:SadConsole.ScreenSurface"/> containing the first frame from the <see cref="T:SadConsole.Readers.Playscii"/> file.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage">
            <summary>
            A RexPaint image.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Cell">
            <summary>
            A RexPaint layer cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Character">
            <summary>
            The character for the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Foreground">
            <summary>
            The foreground color of the cell.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Cell.Background">
            <summary>
            The background color of the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Cell.#ctor(System.Int32,SadConsole.Readers.REXPaintImage.Color,SadConsole.Readers.REXPaintImage.Color)">
            <summary>
            Creates a new REXPaint cell.
            </summary>
            <param name="character">The glyph.</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Cell.IsTransparent">
            <summary>
            Returns true when the current color is considered transparent.
            </summary>
            <returns>True when transparent.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Color">
            <summary>
            A RexPaint color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.R">
            <summary>
            The red channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.G">
            <summary>
            The green channel of the color.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.REXPaintImage.Color.B">
            <summary>
            The blue channel of the color.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new RexPaint color with the specified RGB channels.
            </summary>
            <param name="r">The red channel of the color.</param>
            <param name="g">The green channel of the color.</param>
            <param name="b">The blue channel of the color.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.op_Equality(SadConsole.Readers.REXPaintImage.Color,SadConsole.Readers.REXPaintImage.Color)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Color.op_Inequality(SadConsole.Readers.REXPaintImage.Color,SadConsole.Readers.REXPaintImage.Color)">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Color.Transparent">
            <summary>
            Returns the transparent color used by RexPaint: rgb(255, 0, 255).
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Version">
            <summary>
            The version of RexPaint that created this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Width">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Height">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.LayerCount">
            <summary>
            The total number of layers for this image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layers">
            <summary>
            A read-only collection of layers.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RexPaint image.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create">
            <summary>
            Creates a new layer for the image adding it to the end of the layer stack.
            </summary>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Create(System.Int32)">
            <summary>
            Creates a new layer for the image and inserts it at the specified position (0-based).
            </summary>
            <param name="index">The position to create the new layer at.</param>
            <returns>A new layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Add(SadConsole.Readers.REXPaintImage.Layer,System.Int32)">
            <summary>
            Adds an existing layer (must be the same width/height) to the image and inserts it at the specified position (0-based).
            </summary>
            <param name="layer">The layer to add.</param>
            <param name="index">The position to add the layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Remove(SadConsole.Readers.REXPaintImage.Layer)">
            <summary>
            Removes the specified layer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.ToCellSurface">
            <summary>
            Converts each layer in this REXPaint image to <see cref="T:SadConsole.CellSurface"/>.
            </summary>
            <returns>An array of each converted layer.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Load(System.IO.Stream)">
            <summary>
            Loads a .xp RexPaint image from a GZip compressed stream.
            </summary>
            <param name="stream">The GZip stream to load.</param>
            <returns>The RexPaint image.</returns>
        </member>
        <member name="T:SadConsole.Readers.REXPaintImage.Layer">
            <summary>
            A layer of a RexPaint image.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Width">
            <summary>
            The width of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Height">
            <summary>
            The height of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Cells">
            <summary>
            Represents all cells of the layer.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell by coordinates.
            </summary>
            <param name="x">The x (0-based) position of the cell.</param>
            <param name="y">The y (0-based) position of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="P:SadConsole.Readers.REXPaintImage.Layer.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The cell.</returns>
        </member>
        <member name="M:SadConsole.Readers.REXPaintImage.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new layer with the specified width and height.
            </summary>
            <param name="width">The width of the layer.</param>
            <param name="height">The height of the layer.</param>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont">
            <summary>
            Represents a TheDraw ascii font. http://www.roysac.com/thedrawfonts-tdf.html
            </summary>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont.FontType">
            <summary>
            The type of font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.FontType.Outline">
            <summary>
            An outline font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.FontType.Block">
            <summary>
            A block-based font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.FontType.Color">
            <summary>
            A font supporting color.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.Title">
            <summary>
            The title of the font.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.Type">
            <summary>
            The type of font.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.LetterSpacing">
            <summary>
            The empty characters between letters when drawing.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.CharactersSupported">
            <summary>
            An array indexed by character code, indicating if a glyph character is supported by the font. Characters 33 to 126 are supported, starting at index 0.
            </summary>
        </member>
        <member name="P:SadConsole.Readers.TheDrawFont.Characters">
            <summary>
            A dictionary keyed by character code representing each character in the font. Characters 33 to 126 are supported but indexed starting at 0.
            </summary>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.IsCharacterSupported(System.Int32)">
            <summary>
            Returns <see langword="true"/> when the specified character glyph is supported by this font; otherwise <see langword="false"/>.
            </summary>
            <param name="glyph"></param>
            <returns>A boolean value indicating whether or not the specified glyph is supported.</returns>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.GetCharacter(System.Int32)">
            <summary>
            Gets a character from this font by character code.
            </summary>
            <param name="glyph">The character to get.</param>
            <returns>The specified character.</returns>
            <exception cref="T:System.InvalidOperationException">The character glyph index is valid but isn't included in this font.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The character glyph index isn't in range. It must be between 33 and 126.</exception>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.GetSurface(System.Int32)">
            <summary>
            Generates a surface from the specified glyph using a white foreground and black background for the individual glyphs of the character.
            </summary>
            <param name="glyph">The glyph index.</param>
            <returns>A surface of just the glyph. Width and height of the surface is based on the TheDraw's font.</returns>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.GetSurface(System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Generates a surface from the specified glyph using the specified foreground and background for the individual glyphs of the character.
            </summary>
            <param name="glyph">The glyph index.</param>
            <param name="alternateForeground">Foreground color used to draw the glyph.</param>
            <param name="alternateBackground">Background color used to draw the glyph.</param>
            <returns>A surface of just the glyph. Width and height of the surface is based on the TheDraw's font.</returns>
        </member>
        <member name="M:SadConsole.Readers.TheDrawFont.ReadFonts(System.String)">
            <summary>
            Returns a collection of fonts from a TheDraw font file.
            </summary>
            <param name="file">The file to read.</param>
            <returns>A collection of TheDraw fonts.</returns>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont.CharacterSpot">
            <summary>
            A individual glyph character.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.CharacterSpot.Character">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.CharacterSpot.Foreground">
            <summary>
            The foreground color of the character.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.CharacterSpot.Background">
            <summary>
            The background color of the character.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont.CharacterRow">
            <summary>
            A set of glyph characters.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.CharacterRow.Characters">
            <summary>
            An array of characters.
            </summary>
        </member>
        <member name="T:SadConsole.Readers.TheDrawFont.Character">
            <summary>
            A character defined by the font.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.Character.GlyphIndex">
            <summary>
            The glyph this character represents.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.Character.Width">
            <summary>
            How wide the font character.
            </summary>
        </member>
        <member name="F:SadConsole.Readers.TheDrawFont.Character.Rows">
            <summary>
            Each row of the font character.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.Constants.RendererNames">
            <summary>
            Renderer names used by hosts and types.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RendererNames.Default">
            <summary>
            The default renderer for a screen surface.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RendererNames.ScreenSurface">
            <summary>
            The renderer for a <see cref="F:SadConsole.Renderers.Constants.RendererNames.ScreenSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RendererNames.LayeredScreenSurface">
            <summary>
            The renderer for a <see cref="F:SadConsole.Renderers.Constants.RendererNames.LayeredScreenSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RendererNames.Window">
            <summary>
            The renderer for a <see cref="T:SadConsole.UI.Window"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RendererNames.None">
            <summary>
            An absent renderer.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.Constants.RenderStepNames">
            <summary>
            Renderer names used by hosts and types.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Surface">
            <summary>
            The render step for a <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.SurfaceDirtyCells">
            <summary>
            The render step for a <see cref="T:SadConsole.IScreenSurface"/> where individual cells are only rendered if they're dirty.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.SurfaceLayered">
            <summary>
            The render step for a <see cref="T:SadConsole.IScreenSurface"/> where multiple layers are exposed through a property.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.ControlHost">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.ControlHost"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Window">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.Window"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Cursor">
            <summary>
            The render step for a <see cref="T:SadConsole.Components.Cursor"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.EntityManager">
            <summary>
            The render step for a <see cref="T:SadConsole.Entities.EntityManager"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Output">
            <summary>
            The render to draw the output texture of an <see cref="T:SadConsole.Renderers.IRenderer"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepNames.Tint">
            <summary>
            The render to draw the tint texture of an <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.Constants.RenderStepSortValues">
            <summary>
            Renderer names used by hosts and types.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Surface">
            <summary>
            The render step for a <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.ControlHost">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.ControlHost"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Window">
            <summary>
            The render step for a <see cref="T:SadConsole.UI.Window"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Cursor">
            <summary>
            The render step for a <see cref="T:SadConsole.Components.Cursor"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.EntityRenderer">
            <summary>
            The render step for a <see cref="T:SadConsole.Entities.EntityManager"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Output">
            <summary>
            The render to draw the output texture of an <see cref="T:SadConsole.Renderers.IRenderer"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Renderers.Constants.RenderStepSortValues.Tint">
            <summary>
            The render to draw the tint texture of an <see cref="T:SadConsole.IScreenSurface"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.ILayeredData">
            <summary>
            Provides the methods and properties used by the LayeredSurface renderer.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.ILayeredData.Layers">
            <summary>
            Access to the layers.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.IRenderer">
            <summary>
            Draws a surface.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.Name">
            <summary>
            The name used to create the renderer from the host.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.Output">
            <summary>
            The output texture created by the renderer.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.Opacity">
            <summary>
            A 0 to 255 value represening how transparent the surface is when drawn to the screen. 255 represents full visibility.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.IsForced">
            <summary>
            <see langword="true"/> when the renderer is being forced to be redrawn this frame; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderer.Steps">
            <summary>
            The render steps for the renderer.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Refresh(SadConsole.IScreenSurface,System.Boolean)">
            <summary>
            Refreshes a cached drawing state.
            </summary>
            <param name="surface">Target surface.</param>
            <param name="force">When <see langword="true"/>, indicates the refresh should happen even if a surface isn't dirty.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Render(SadConsole.IScreenSurface)">
            <summary>
            Creates a drawcall in the drawing pipeline.
            </summary>
            <param name="surface">Target surface.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.OnHostUpdated(SadConsole.IScreenObject)">
            <summary>
            Called when various states in the host change.
            </summary>
            <param name="host">The host that uses this component.</param>
        </member>
        <member name="T:SadConsole.Renderers.IRenderStep">
            <summary>
            A rendering step processed by an <see cref="T:SadConsole.Renderers.IRenderer"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderStep.Name">
            <summary>
            The name of the render step.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderStep.SortOrder">
            <summary>
            Indicates priority related to other steps. Lowest runs first.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.SetData(System.Object)">
            <summary>
            Adds supplemental data to the render step. 
            </summary>
            <param name="data">The data to add to the step.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Reset">
            <summary>
            Called when the step should reset any state or texture information.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Refresh(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface,System.Boolean,System.Boolean)">
            <summary>
            Called to redraw the render step if needed.
            </summary>
            <param name="renderer">The renderer the render step is using.</param>
            <param name="screenObject">The surface associated with the renderer. This may be null.</param>
            <param name="backingTextureChanged"><see langword="true"/> to indicate the <see cref="P:SadConsole.Renderers.IRenderer.Output"/> changed; otherwise <see langword="false"/>.</param>
            <param name="isForced"><see langword="true"/> when refresh is being forced; otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> when the step is going to draw something new and is requesting a <see cref="M:SadConsole.Renderers.IRenderStep.Composing(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface)"/> step; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Composing(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface)">
            <summary>
            Called when the renderer needs to redraw the <see cref="P:SadConsole.Renderers.IRenderer.Output"/> texture.
            </summary>
            <param name="renderer">The renderer the render step is using.</param>
            <param name="screenObject">The surface associated with the renderer. This may be null.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.Render(SadConsole.Renderers.IRenderer,SadConsole.IScreenSurface)">
            <summary>
            Called when building draw calls for the render pipeline.
            </summary>
            <param name="renderer">The renderer the render step is using.</param>
            <param name="screenObject">The surface associated with the renderer. This may be null.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderStep.OnHostUpdated(SadConsole.IScreenObject)">
            <summary>
            Called when various states in the host change.
            </summary>
            <param name="host">The host that uses this component.</param>
        </member>
        <member name="T:SadConsole.Renderers.IRenderStepTexture">
            <summary>
            Indicates the render step has an associated texture.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IRenderStepTexture.CachedTexture">
            <summary>
            The texture created by the render step.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.IWindowData">
            <summary>
            Provides the methods and properties used by the Window renderer.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IWindowData.IsModal">
            <summary>
            The status of whether or not the window is being shown in modal mode.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.IWindowData.Controls">
            <summary>
            Access to the controls used by the window.
            </summary>
        </member>
        <member name="T:SadConsole.Renderers.RenderStepComparer">
            <summary>
            Compares <see cref="T:SadConsole.Renderers.IRenderStep"/> with the <see cref="P:SadConsole.Renderers.IRenderStep.SortOrder"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Renderers.RenderStepComparer.Instance">
            <summary>
            Shared instance of the <see cref="T:SadConsole.Renderers.RenderStepComparer"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.RenderStepComparer.Compare(SadConsole.Renderers.IRenderStep,SadConsole.Renderers.IRenderStep)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.SadFont">
            <summary>
            Represents a graphical font used by SadConsole.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.SolidGlyphIndex">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.SolidGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.SadFont.SolidGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.Columns">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.Rows">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.TotalGlyphs">
            <summary>
            Gets the total glyphs in this font, which represents the last index. Calculated from <see cref="P:SadConsole.SadFont.Columns"/> times <see cref="P:SadConsole.SadFont.Rows"/>.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.Name">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.FilePath">
            <summary>
            The name of the image file as defined in the .font file.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.GlyphHeight">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.GlyphWidth">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.UnsupportedGlyphIndex">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.SadFont.UnsupportedGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.SadFont.UnsupportedGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.GlyphRectangles">
            <summary>
            A dictionary that stores the source rectangles of the font by glyph id.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.IsSadExtended">
            <summary>
            True when the font supports SadConsole extended decorators; otherwise false.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="P:SadConsole.SadFont.GlyphDefinitions">
            <summary>
            A collection of named glyph definitions.
            </summary>
        </member>
        <member name="M:SadConsole.SadFont.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ITexture,System.String,System.Collections.Generic.Dictionary{System.Int32,SadRogue.Primitives.Rectangle})">
            <summary>
            Creates a new font with the specified settings.
            </summary>
            <param name="glyphWidth">The pixel width of each glyph.</param>
            <param name="glyphHeight">The pixel height of each glyph.</param>
            <param name="glyphPadding">The pixel padding between each glyph.</param>
            <param name="rows">Number of glyph rows in the <paramref name="image"/>.</param>
            <param name="columns">Number of glyph columns in the <paramref name="image"/>.</param>
            <param name="solidGlyphIndex">The index of the glyph that is a solid white box.</param>
            <param name="image">The <see cref="T:SadConsole.ITexture"/> of the font.</param>
            <param name="name">A font identifier used for serialization of resources using this font.</param>
            <param name="glyphRectangles">Glyph mapping dictionary.</param>
        </member>
        <member name="M:SadConsole.SadFont.GetGlyphSourceRectangle(System.Int32)">
            <summary>
            Gets the rendering rectangle for a glyph.
            </summary>
            <param name="glyph">The index of the glyph to get.</param>
            <returns>The rectangle for the glyph if it exists, otherwise returns <see cref="P:SadConsole.SadFont.UnsupportedGlyphRectangle"/>.</returns>
        </member>
        <member name="M:SadConsole.SadFont.GenerateGlyphSourceRectangle(System.Int32)">
            <summary>
            Generates a rectangle for the specified glyph based on the glyph index, <see cref="P:SadConsole.SadFont.Rows"/>, <see cref="P:SadConsole.SadFont.Columns"/>, and <see cref="P:SadConsole.SadFont.GlyphPadding"/> values. For the actual font rectangle, use <see cref="M:SadConsole.SadFont.GetGlyphSourceRectangle(System.Int32)"/>.
            </summary>
            <param name="glyph">The glyph.</param>
            <returns>A rectangle based on where the font thinks the rectangle should be.</returns>
        </member>
        <member name="M:SadConsole.SadFont.GetDecorator(System.String,SadRogue.Primitives.Color)">
            <summary>
            Gets a <see cref="T:SadConsole.CellDecorator"/> by the <see cref="T:SadConsole.GlyphDefinition"/> defined by the font file.
            </summary>
            <param name="name">The name of the decorator to get.</param>
            <param name="color">The color to apply to the decorator.</param>
            <returns>The decorator instance.</returns>
            <remarks>If the decorator does not exist, <see cref="P:SadConsole.CellDecorator.Empty"/> is returned.</remarks>
        </member>
        <member name="M:SadConsole.SadFont.GetGlyphDefinition(System.String)">
            <summary>
            A safe way to get a <see cref="T:SadConsole.GlyphDefinition"/> by name that is defined by the font file.
            </summary>
            <param name="name">The name of the glyph definition.</param>
            <returns>The glyph definition.</returns>
            <remarks>If the glyph definition doesn't exist, return s<see cref="P:SadConsole.GlyphDefinition.Empty"/>.</remarks>
        </member>
        <member name="M:SadConsole.SadFont.HasGlyphDefinition(System.String)">
            <summary>
            Returns <see langword="true"/> when the glyph has been defined by name.
            </summary>
            <param name="name">The name of the glyph</param>
            <returns><see langword="true"/> when the glyph name exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.SadFont.GetFontSize(SadConsole.IFont.Sizes)">
            <summary>
            Gets the pixel size of a font based on a <see cref="T:SadConsole.IFont.Sizes"/>.
            </summary>
            <param name="size">The desired size.</param>
            <returns>The width and height of a font cell.</returns>
        </member>
        <member name="M:SadConsole.SadFont.ConfigureRects">
            <summary>
            Builds the <see cref="P:SadConsole.SadFont.GlyphRectangles"/> array based on the current font settings, if the <see cref="P:SadConsole.SadFont.GlyphRectangles"/> dictionary is empty.
            </summary>
        </member>
        <member name="M:SadConsole.SadFont.ForceConfigureRects">
            <summary>
            Builds the <see cref="P:SadConsole.SadFont.GlyphRectangles"/> array based on the current font settings.
            </summary>
        </member>
        <member name="M:SadConsole.SadFont.Clone(System.String)">
            <summary>
            Clones this font.
            </summary>
            <param name="newName">The name to apply when creating the cloned font.</param>
            <returns>Returns the cloned font.</returns>
        </member>
        <member name="M:SadConsole.SadFont.Dispose">
            <summary>
            Disposes the <see cref="P:SadConsole.SadFont.Image"/> property.
            </summary>
        </member>
        <member name="T:SadConsole.ScreenObject">
            <summary>
            A generic object processed by SadConsole. Provides parent/child, components, and position.
            </summary>
            <summary>
            A generic object processed by SadConsole. Provides parent/child, components, and position.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObject.ParentChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.PositionChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.PositionChanging">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.IsVisibleChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.IsEnabledChanged">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.FocusLost">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenObject.Focused">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.SortOrder">
            <summary>
            Indicates the sorting order this object should use when parented. Sorting is a manual operation on the <see cref="P:SadConsole.ScreenObject.Children"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.Children">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.Parent">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.Position">
            <summary>
            A position that is based on the current <see cref="P:SadConsole.ScreenObject.Position"/> and <see cref="P:SadConsole.ScreenObject.Parent"/> position, in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.AbsolutePosition">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IgnoreParentPosition">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsVisible">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsFocused">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.FocusedMode">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.IsExclusiveMouse">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.UseKeyboard">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenObject.UseMouse">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.Render(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.Update(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnFocusLost">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnFocused">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnParentChanged(SadConsole.IScreenObject,SadConsole.IScreenObject)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.ParentChanged"/> event.
            </summary>
            <param name="oldParent">The previous parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnPositionChanging(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.PositionChanging"/> event.
            </summary>
            <param name="oldPosition">The previous position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnPositionChanged(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.PositionChanged"/> event.
            </summary>
            <param name="oldPosition">The previous position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnVisibleChanged">
            <summary>
            Called when the visibility of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.OnEnabledChanged">
            <summary>
            Called when the paused status of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.UpdateAbsolutePosition">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.ToString">
            <summary>
            Returns the value "ScreenObject".
            </summary>
            <returns>The string "ScreenObject".</returns>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsUpdate">
            <summary>
            A filtered list from <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsUpdate"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsRender">
            <summary>
            A filtered list from <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsRender"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsMouse">
            <summary>
            A filtered list from <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsMouse"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsKeyboard">
            <summary>
            A filtered list from <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> where <see cref="P:SadConsole.Components.IComponent.IsKeyboard"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsEmpty">
            <summary>
            A filtered list from <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> that is not set for update, render, mouse, or keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.SadComponents">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.GetSadComponents``1">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.GetSadComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.HasSadComponent``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObject.OnSadComponentAdded(SadConsole.Components.IComponent)">
            <summary>
            Called when a component is added to the <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> collection.
            </summary>
            <param name="component">The component added.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnSadComponentRemoved(SadConsole.Components.IComponent)">
            <summary>
            Called when a component is removed from the <see cref="P:SadConsole.Components.IComponentHost.SadComponents"/> collection.
            </summary>
            <param name="component">The component removed.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.SortComponents">
            <summary>
            Sorts the components based on the <see cref="P:SadConsole.Components.IComponent.SortOrder"/> value.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.Components_FilterAddItem(SadConsole.Components.IComponent,System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent})">
            <summary>
            Adds a component to the provided collections, based on its configuration.
            </summary>
            <param name="component">The component.</param>
            <param name="componentsRender">The render collection.</param>
            <param name="componentsUpdate">The update collection.</param>
            <param name="componentsKeyboard">The keyboard collection.</param>
            <param name="componentsMouse">The mouse collection.</param>
            <param name="componentsEmpty">The empty collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.Components_FilterRemoveItem(SadConsole.Components.IComponent,System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent})">
            <summary>
            Removes a component to the provided collections, based on its configuration.
            </summary>
            <param name="component">The component.</param>
            <param name="componentsRender">The render collection.</param>
            <param name="componentsUpdate">The update collection.</param>
            <param name="componentsKeyboard">The keyboard collection.</param>
            <param name="componentsMouse">The mouse collection.</param>
            <param name="componentsEmpty">The empty collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.Components_Sort(System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent},System.Collections.Generic.List{SadConsole.Components.IComponent})">
            <summary>
            Helper to sort the components in the split collections.
            </summary>
            <param name="componentsRender">The render collection.</param>
            <param name="componentsUpdate">The update collection.</param>
            <param name="componentsKeyboard">The keyboard collection.</param>
            <param name="componentsMouse">The mouse collection.</param>
            <param name="componentsEmpty">The empty collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Nothing.
            </summary>
            <param name="context">Nothing.</param>
        </member>
        <member name="T:SadConsole.ScreenObjectCollection">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.#ctor(SadConsole.IScreenObject)">
            <summary>
            Creates a new object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="T:SadConsole.ScreenObjectCollection`1">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.IScreenObject"/>.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObjectCollection`1.CollectionChanged">
            <summary>
            Raised when the items in this collection are added, removed, or repositioned.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObjectCollection`1._objects">
            <summary>
            Internal list of objects.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObjectCollection`1._owningObject">
            <summary>
            The parent object.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection`1.Count">
            <summary>
            Returns the total number of objects in this collection.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection`1.IsLocked">
            <summary>
            When true, the collection cannot be modified.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets a child object for this collection.
            </summary>
            <param name="index">The index of the child object.</param>
            <returns>The wanted object.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.#ctor(SadConsole.IScreenObject)">
            <summary>
            Creates a new object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Contains(`0)">
            <summary>
            Returns true if this console list contains the specified <paramref name="obj"/>.
            </summary>
            <param name="obj">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.IsTop(`0)">
            <summary>
            When true, indicates that the <paramref name="obj"/> is at the top of the collection stack.
            </summary>
            <param name="obj">The obj object to check.</param>
            <returns>True when the object is on the top.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.IsBottom(`0)">
            <summary>
            When true, indicates that the <paramref name="obj"/> is at the bottom of the collection stack.
            </summary>
            <param name="obj">The obj object to check.</param>
            <returns>True when the object is on the bottom.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Add(`0)">
            <summary>
            Adds a new child object to this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a child object at the specified <paramref name="index"/>.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
            <param name="index">The 0-based index to insert the object at.</param>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Remove(`0)">
            <summary>
            Removes a new child object from this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.Sort(System.Collections.Generic.IComparer{SadConsole.IScreenObject})">
            <summary>
            Sorts the collection based on <see cref="P:SadConsole.IScreenObject.SortOrder"/>.
            </summary>
            <param name="comparer">The comparer to use</param>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection`1.IsLocked"/> property is set to true.</exception>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.ToArray">
            <summary>
            Copies the collections item to an array.
            </summary>
            <returns>A new array consisting of all of the objects in this collection.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.MoveToTop(`0)">
            <summary>
            Moves the specified <paramref name="obj"/>  to the top of the collection.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.MoveToBottom(`0)">
            <summary>
            Moves the specified <paramref name="obj"/>  to the bottom of the collection.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.IndexOf(`0)">
            <summary>
            Gets the 0-based index of the <paramref name="obj"/>.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.ScreenObjectComparer">
            <summary>
            Compares <see cref="T:SadConsole.IScreenObject"/> with the <see cref="P:SadConsole.IScreenObject.SortOrder"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectComparer.Instance">
            <summary>
            Shared instance of the <see cref="T:SadConsole.ScreenObjectComparer"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectComparer.Compare(SadConsole.IScreenObject,SadConsole.IScreenObject)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.ScreenSurface">
            <summary>
            An object that renders a <see cref="T:SadConsole.ICellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.ForceRendererRefresh">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.DefaultRendererName">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.Renderer">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.QuietSurfaceHandling">
            <summary>
            When <see langword="true"/>, prevents the <see cref="P:SadConsole.ScreenSurface.Surface"/> property from raising events and virtual methods when the surface changes.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.Surface">
            <summary>
            The surface this screen object represents.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.IsDirty">
            <summary>
            When <see langword="true"/>, indicates that the <see cref="P:SadConsole.ScreenSurface.Surface"/> needs to be redrawn; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.Font">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.FontSize">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.Tint">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.AbsoluteArea">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.UsePixelPositioning">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.WidthPixels">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.HeightPixels">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.Width">
            <summary>
            The total width of the console.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.Height">
            <summary>
            The total height of the console.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.ViewWidth">
            <summary>
            Gets or sets the visible width of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.ViewHeight">
            <summary>
            Gets or sets the visible height of the surface in cells.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.ViewPosition">
            <summary>
            The position of the view within the console.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new screen object that can render a surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The visible width of the surface in cells.</param>
            <param name="viewHeight">The visible height of the surface in cells.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(SadRogue.Primitives.GridViews.IGridView{SadConsole.ColoredGlyphBase},System.Int32,System.Int32)">
            <summary>
            Creates a new surface from a grid view. The cells between this object and the grid view are shared.
            </summary>
            <param name="surface">The surface to use as the source of cells.</param>
            <param name="visibleWidth">Optional view width. If <c>0</c>, the view width matches the width of the surface.</param>
            <param name="visibleHeight">Optional view height. If <c>0</c>, the view width matches the height of the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="viewWidth">The width of the surface in cells to show.</param>
            <param name="viewHeight">The height of the surface in cells to show.</param>
            <param name="totalWidth">The total width of the surface in cells.</param>
            <param name="totalHeight">The total height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new screen object wrapping an existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
            <param name="clear">When <see langword="true"/>, resets every cell to the <see cref="P:SadConsole.ICellSurface.DefaultForeground"/>, <see cref="P:SadConsole.ICellSurface.DefaultBackground"/> and glyph 0.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface and view to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="clear">When <see langword="true"/>, resets every cell to the <see cref="P:SadConsole.ICellSurface.DefaultForeground"/>, <see cref="P:SadConsole.ICellSurface.DefaultBackground"/> and glyph 0.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ScreenSurface.Render(System.TimeSpan)">
            <summary>
            Draws the <see cref="P:SadConsole.ScreenSurface.Surface"/> and all <see cref="P:SadConsole.ScreenObject.SadComponents"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since the last call.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.Update(System.TimeSpan)">
            <summary>
            Updates the <see cref="P:SadConsole.ScreenSurface.Surface"/> effects and all <see cref="P:SadConsole.ScreenObject.SadComponents"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <param name="delta">The time that has elapsed since this method was last called.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnIsDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnFontChanged(SadConsole.IFont,SadRogue.Primitives.Point)">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.Font"/> or <see cref="P:SadConsole.ScreenSurface.FontSize"/> property changes.
            </summary>
            <param name="oldFont">The font prior to the change.</param>
            <param name="oldFontSize">The font size prior to the change.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnSurfaceChanged(SadConsole.ICellSurface)">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.Surface"/> property is changed.
            </summary>
            <param name="oldSurface">The previous surface.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnRendererChanged">
            <summary>
            Called when the <see cref="P:SadConsole.ScreenSurface.Renderer"/> property is changed.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.ToString">
            <summary>
            Returns the value "ScreenSurface".
            </summary>
            <returns>The string "ScreenSurface".</returns>
        </member>
        <member name="M:SadConsole.ScreenSurface.CallOnHostUpdated">
            <summary>
            Calls the OnHostUpdated method on components, renderer, and rendersteps.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.ScreenSurface.Renderer"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenSurface.Dispose">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseButtonClicked">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseMove">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseExit">
            <inheritdoc/>
        </member>
        <member name="E:SadConsole.ScreenSurface.MouseEnter">
            <inheritdoc/>
        </member>
        <member name="F:SadConsole.ScreenSurface.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenSurface.MoveToFrontOnMouseClick">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.ScreenSurface.FocusOnMouseClick">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseEnter(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseEnter"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseExit(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseExit"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseMove(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseMove"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnMouseLeftClicked(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseButtonClicked"/> event. Possibly moves the console to the top of it's parent's children collection.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.OnRightMouseClicked(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenSurface.MouseButtonClicked"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.ScreenSurface.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenSurface.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.SerializedTypes.RendererJsonConverter">
            <summary>
            Converts a <see cref="T:SadConsole.Renderers.IRenderer"/> to its <see cref="P:SadConsole.Renderers.IRenderer.Name"/> value and back.
            </summary>
        </member>
        <member name="M:SadConsole.SerializedTypes.RendererJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,SadConsole.Renderers.IRenderer,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.SerializedTypes.RendererJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,SadConsole.Renderers.IRenderer,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="T:SadConsole.Serializer.Contracts">
            <summary>
            Registers the default converters for SadConsole objects, when needed.
            </summary>
        </member>
        <member name="P:SadConsole.Serializer.Settings">
            <summary>
            The settings to use during <see cref="M:SadConsole.Serializer.Save``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)"/> and <see cref="M:SadConsole.Serializer.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.Serialize``1(``0)">
            <summary>
            A shortcut for serialization that uses <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/> with the <see cref="P:SadConsole.Serializer.Settings"/> property defined by this class.
            </summary>
            <typeparam name="T">The object type to serialize.</typeparam>
            <param name="instance">The object to serialize.</param>
            <returns>A json encoded string.</returns>
        </member>
        <member name="M:SadConsole.Serializer.Deserialize``1(System.String)">
            <summary>
            A shortcut for serialization that uses <see cref="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/> with the <see cref="P:SadConsole.Serializer.Settings"/> property defined by this class.
            </summary>
            <param name="json">The json string to create an object from.</param>
            <returns>An object created from the <paramref name="json"/> parameter.</returns>
        </member>
        <member name="M:SadConsole.Serializer.Save``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the <paramref name="instance"/> to the specified file.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="instance">The object to serialize.</param>
            <param name="file">The file to save the object to.</param>
            <param name="compress">When true, uses GZIP compression on the json string saved to the <paramref name="file"/></param>
            <param name="settings">Optional settings to use during serialization. If <see langword="null"/>, uses the <see cref="P:SadConsole.Serializer.Settings"/> property.</param>
        </member>
        <member name="M:SadConsole.Serializer.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> from the specified file.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="file">The file to load from.</param>
            <param name="isCompressed">When true, indicates that the json <paramref name="file"/> should be decompressed with GZIP compression.</param>
            <param name="settings">Optional settings to use during deserialization. If <see langword="null"/>, uses the <see cref="P:SadConsole.Serializer.Settings"/> property.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="T:SadConsole.Serializer.LogTraceWriter">
            <summary>
            A simple log writer that helps debug the JSON serialization.
            </summary>
        </member>
        <member name="F:SadConsole.Serializer.LogTraceWriter.Log">
            <summary>
            THe string containing the log.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.LogTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Captures a JSON log event.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">The message.</param>
            <param name="ex">The exception associated with the log event.</param>
        </member>
        <member name="P:SadConsole.Serializer.LogTraceWriter.LevelFilter">
            <summary>
            THe level filter for the log.
            </summary>
        </member>
        <member name="T:SadConsole.Settings">
            <summary>
            Various settings for SadConsole.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultConsoleUseKeyboard">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.IScreenObject.UseKeyboard"/> when the console is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultScreenObjectUseKeyboard">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.ScreenObject.UseKeyboard"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultScreenObjectUseMouse">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.ScreenObject.UseMouse"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ClearColor">
            <summary>
            The color to automatically clear the device with.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ResizeMode">
            <summary>
            The type of resizing options for the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.AllowWindowResize">
            <summary>
            Allow the user to resize the window. Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoDraw">
            <summary>
            When true, indicates that the game loop should call <see cref="M:SadConsole.IScreenObject.Render(System.TimeSpan)"/> on each object in <see cref="P:SadConsole.GameHost.Screen"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoFinalDraw">
            <summary>
            When true, indicates that any game framework should render a composed image, of all consoles, to the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoUpdate">
            <summary>
            When true, indicates that the game loop should call <see cref="M:SadConsole.IScreenObject.Update(System.TimeSpan)"/> on each object in <see cref="P:SadConsole.GameHost.Screen"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowMinimumSize">
            <summary>
            When not set to (0,0) this property specifies the minimum size of the game window in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.SerializationIsCompressed">
            <summary>
            When set to true, all loading and saving performed by SadConsole uses GZIP. <see cref="M:SadConsole.GameHost.LoadFont(System.String)"/> does not use this setting and always runs uncompressed.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.UseDefaultExtendedFont">
            <summary>
            When set to true, and a font is not specified with the <see cref="T:SadConsole.GameHost"/>, the IBM 8x16 extended SadConsole font will be used.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowTitle">
            <summary>
            The window title to display when the app is windowed.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.DebuggerPipeId">
            <summary>
            The identifier of the named pipe used to communicate with the in game debugger app.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.AutomaticAddColorsToMappings">
            <summary>
            Automatically adds all of the static color declarations of <see cref="T:SadRogue.Primitives.Color"/> to <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Input">
            <summary>
            Settings related to input.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.ProcessMouseOffscreen">
            <summary>
            Not currently used
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.DoMouse">
            <summary>
            Indicates that the <see cref="T:SadConsole.GameHost"/> should process mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.DoKeyboard">
            <summary>
            Indicates that the <see cref="T:SadConsole.GameHost"/> should process keyboard input.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.MouseClickTime">
            <summary>
            The maximum amount of time to trigger a mouse click.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Input.MouseDoubleClickTime">
            <summary>
            The maximum amount of time to trigger a mouse double click.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Rendering">
            <summary>
            Rendering options generally set by a game host.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderWidth">
            <summary>
            The width of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderHeight">
            <summary>
            The height of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderRect">
            <summary>
            Where on the screen the engine will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderScale">
            <summary>
            If the <see cref="P:SadConsole.Settings.Rendering.RenderRect"/> is stretched, this is the ratio difference between unstretched.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.WindowResizeOptions">
            <summary>
            Resize modes for the final SadConsole render pass.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Stretch">
            <summary>
            Stretches the output to fit the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Center">
            <summary>
            Centers output in the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Scale">
            <summary>
            Scales output to fit the window as best as possible while maintaining a good picture.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Fit">
            <summary>
            Fits output to the window using padding to maintain aspect ratio.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.None">
            <summary>
            Output always matches the window.
            </summary>
        </member>
        <member name="T:SadConsole.ShapeParameters">
            <summary>
            Defines the parameters for generating a shape with a border and fill glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.HasBorder">
            <summary>
            When true, to indicate the shape contains a border.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.HasFill">
            <summary>
            When true, indicates this shape is filled.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreFillForeground">
            <summary>
            When true, ignores the fill foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreFillBackground">
            <summary>
            When true, ignores the fill background color.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreFillGlyph">
            <summary>
            When true, ignores the fill glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreFillMirror">
            <summary>
            When true, ignores the fill mirror.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreBorderForeground">
            <summary>
            When true, ignores the border foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreBorderBackground">
            <summary>
            When true, ignores the border background color.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreBorderGlyph">
            <summary>
            When true, ignores the border glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.IgnoreBorderMirror">
            <summary>
            When true, ignores the border mirror.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.FillGlyph">
            <summary>
            The fill appearance.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.BoxBorderStyle">
            <summary>
            The connected lines used for the border.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.BoxBorderStyleGlyphs">
            <summary>
            The appearances used for each part of the connected line.
            </summary>
        </member>
        <member name="P:SadConsole.ShapeParameters.BorderGlyph">
            <summary>
            A single glyph used for drawing the border.
            </summary>
        </member>
        <member name="M:SadConsole.ShapeParameters.#ctor(System.Boolean,SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32[],SadConsole.ColoredGlyphBase[])">
            <summary>
            A set of parameters that defines how a shape should be drawn.
            </summary>
            <param name="hasBorder">When true, indicates the shape has a border.</param>
            <param name="borderGlyph">When not null, uses a single glyph to draw the border.</param>
            <param name="ignoreBorderForeground">When true, ignores the border foreground color.</param>
            <param name="ignoreBorderBackground">When true, ignores the border background color.</param>
            <param name="ignoreBorderGlyph">When true, ignores the border glyph.</param>
            <param name="ignoreBorderMirror">When true, ignores the border mirror.</param>
            <param name="hasFill">When true, indicates this shape is filled.</param>
            <param name="fillGlyph">When not null, this is the appearance of the fill.</param>
            <param name="ignoreFillForeground">When true, ignores the fill foreground color.</param>
            <param name="ignoreFillBackground">When true, ignores the fill background color.</param>
            <param name="ignoreFillGlyph">When true, ignores the fill glyph.</param>
            <param name="ignoreFillMirror">When true, ignores the fill mirror.</param>
            <param name="boxBorderStyle">When not null, the connected lines used for the border.</param>
            <param name="boxBorderStyleGlyphs">When not null, the appearances used for each part of the connected line.</param>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateBorder(SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a shape parameters object that describes a border.
            </summary>
            <param name="borderStyle">The appearance of the border.</param>
            <param name="ignoreForeground">When true, ignores the foreground of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreBackground">When true, ignores the background of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreGlyph">When true, ignores the glyph of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreMirror">When true, ignores the mirror of the <paramref name="borderStyle"/> value.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateFilled(SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a shape parameters object that describes a filled object with an optional border.
            </summary>
            <param name="borderStyle">When not null, creates a border with this appearance.</param>
            <param name="fillStyle">The fill appearance.</param>
            <param name="ignoreBorderForeground">When true, ignores the foreground of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreBorderBackground">When true, ignores the background of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreBorderGlyph">When true, ignores the glyph of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreBorderMirror">When true, ignores the mirror of the <paramref name="borderStyle"/> value.</param>
            <param name="ignoreFillForeground">When true, ignores the foreground of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillBackground">When true, ignores the background of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillGlyph">When true, ignores the glyph of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillMirror">When true, ignores the mirror of the <paramref name="fillStyle"/> value.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateStyledBox(System.Int32[],SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a shape parameters object that describes a border using a connected line glyph set.
            </summary>
            <param name="borderStyle">The connected line glyphs that make up the border.</param>
            <param name="borderColors">The appearance colors of the border.</param>
            <param name="ignoreBorderForeground">When true, ignores the foreground of the <paramref name="borderColors"/> value.</param>
            <param name="ignoreBorderBackground">When true, ignores the background of the <paramref name="borderColors"/> value.</param>
            <param name="ignoreBorderMirror">When true, ignores the mirror of the <paramref name="borderColors"/> value.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateStyledBoxFilled(System.Int32[],SadConsole.ColoredGlyphBase,SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a shape parameters object that describes a filled box using a connected line line glyph set for the border.
            </summary>
            <param name="borderStyle">The connected line glyphs that make up the border.</param>
            <param name="borderColors">The appearance colors of the border.</param>
            <param name="fillStyle">The appearance colors of the fill.</param>
            <param name="ignoreBorderForeground">When true, ignores the foreground of the <paramref name="borderColors"/> value.</param>
            <param name="ignoreBorderBackground">When true, ignores the background of the <paramref name="borderColors"/> value.</param>
            <param name="ignoreBorderMirror">When true, ignores the mirror of the <paramref name="borderColors"/> value.</param>
            <param name="ignoreFillForeground">When true, ignores the foreground of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillBackground">When true, ignores the background of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillGlyph">When true, ignores the glyph of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillMirror">When true, ignores the mirror of the <paramref name="fillStyle"/> value.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateStyledBoxExplicit(SadConsole.ColoredGlyphBase[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a shape parameters object that describes an unfilled box using a connected line line glyph set for the border.
            </summary>
            <param name="borderGlyphs">The appearances used for each part of a connected line, specifically the glyph.</param>
            <param name="ignoreBorderForeground">When true, ignores the foreground of the <paramref name="borderGlyphs"/> value.</param>
            <param name="ignoreBorderBackground">When true, ignores the background of the <paramref name="borderGlyphs"/> value.</param>
            <param name="ignoreBorderMirror">When true, ignores the mirror of the <paramref name="borderGlyphs"/> value.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateStyledBoxExplicitFilled(SadConsole.ColoredGlyphBase[],SadConsole.ColoredGlyphBase,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a shape parameters object that describes a filled box using a connected line line glyph set for the border.
            </summary>
            <param name="borderGlyphs">The appearances used for each part of a connected line, specifically the glyph.</param>
            <param name="fillStyle">The appearance colors of the fill.</param>
            <param name="ignoreBorderForeground">When true, ignores the foreground of the <paramref name="borderGlyphs"/> value.</param>
            <param name="ignoreBorderBackground">When true, ignores the background of the <paramref name="borderGlyphs"/> value.</param>
            <param name="ignoreBorderGlyph">When true, ignores the glyph of the <paramref name="borderGlyphs"/> value.</param>
            <param name="ignoreBorderMirror">When true, ignores the mirror of the <paramref name="borderGlyphs"/> value.</param>
            <param name="ignoreFillForeground">When true, ignores the foreground of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillBackground">When true, ignores the background of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillGlyph">When true, ignores the glyph of the <paramref name="fillStyle"/> value.</param>
            <param name="ignoreFillMirror">When true, ignores the mirror of the <paramref name="fillStyle"/> value.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateStyledBoxThin(SadRogue.Primitives.Color)">
            <summary>
            Creates a box using the <see cref="P:SadConsole.ICellSurface.ConnectedLineThin"/> connected line style.
            </summary>
            <param name="foreground">The foreground color of the box.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="M:SadConsole.ShapeParameters.CreateStyledBoxThick(SadRogue.Primitives.Color)">
            <summary>
            Creates a box using the <see cref="P:SadConsole.ICellSurface.ConnectedLineThick"/> connected line style.
            </summary>
            <param name="foreground">The foreground color of the box.</param>
            <returns>The shape parameters.</returns>
        </member>
        <member name="T:SadConsole.SplashScreens.Ansi1">
            <summary>
            A simple splashscreen that fades in a screen specifying "Powered by SadConsole".
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.Ansi1.#ctor(SadConsole.IFont,SadConsole.IFont.Sizes)">
            <summary>
            Creates the ansi splash screen using the specified font and size.
            </summary>
            <param name="font">The font to use.</param>
            <param name="fontSize">The font size to use.</param>
        </member>
        <member name="M:SadConsole.SplashScreens.Ansi1.#ctor(SadConsole.IFont.Sizes)">
            <summary>
            Creates the ansi splash screen using the <see cref="P:SadConsole.GameHost.EmbeddedFont"/> and the specified font size.
            </summary>
            <param name="fontSize">The size of font to use.</param>
        </member>
        <member name="M:SadConsole.SplashScreens.Ansi1.#ctor">
            <summary>
            Creates the ansi splash screen using the <see cref="P:SadConsole.GameHost.EmbeddedFont"/> and a font size of <see cref="F:SadConsole.IFont.Sizes.One"/>.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.Ansi1.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Ends the animation when a key is pressed.
            </summary>
            <param name="keyboard">The keyboard state.</param>
            <returns>The base implementation of the keyboard.</returns>
        </member>
        <member name="T:SadConsole.SplashScreens.PCBoot">
            <summary>
            A spashscreen that simulates an old computer boot up process.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.PCBoot.#ctor">
            <summary>
            Creates a new instance of this spashscreen.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.PCBoot.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Ends the animation when a key is pressed.
            </summary>
            <param name="keyboard">The keyboard state.</param>
            <returns>The base implementation of the keyboard.</returns>
        </member>
        <member name="T:SadConsole.SplashScreens.Simple">
            <summary>
            A simple splashscreen that fades in a screen specifying "Powered by SadConsole".
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.Simple.#ctor">
            <summary>
            A new instance of this class.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.Simple.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Ends the animation when a key is pressed.
            </summary>
            <param name="keyboard">The keyboard state.</param>
            <returns>The base implementation of the keyboard.</returns>
        </member>
        <member name="T:SadConsole.SplashScreens.SplashScreenManager">
            <summary>
            GameHost use only. Use the <see cref="M:SadConsole.SplashScreens.SplashScreenManager.CheckRun"/> method to show any splash screens after <see cref="M:SadConsole.GameHost.OnGameStarted"/> was called.
            </summary>
        </member>
        <member name="E:SadConsole.SplashScreens.SplashScreenManager.SplashScreenFinished">
            <summary>
            Raised when all splash screens have finished.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.SplashScreenManager.CheckRun">
            <summary>
            Checks if any splash screens have been added with <see cref="M:SadConsole.GameHost.SetSplashScreens(SadConsole.IScreenSurface[])"/>, if so, starts them.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.SplashScreenManager.#ctor">
            <summary>
            Creates a new instance of this type.
            </summary>
        </member>
        <member name="M:SadConsole.SplashScreens.SplashScreenManager.Update(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.StringParser.BBCode.Parser">
            <summary>
            A BBCode string parser.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.BBCode.Parser.Tags">
            <summary>
            A collection of tags used by the parser.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Parser.#ctor">
            <summary>
            Creates a new instanace of the class.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Parser.Parse(System.ReadOnlySpan{System.Char},System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing BBCode commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns>The finalized string.</returns>
        </member>
        <member name="T:SadConsole.StringParser.BBCode.BBCodeCommandBase">
            <summary>
            The base class for a BBCode command.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.BBCode.BBCodeCommandBase.Tag">
            <summary>
            The tag used to create this command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.BBCodeCommandBase.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Provides the information about the tag that triggered this command.
            </summary>
            <param name="tag">The BBCode tag condition that triggered the command.</param>
            <param name="value">Optional value provided by the BBCode.</param>
            <param name="parameters">Optional parameters provided by the BBCode.</param>
        </member>
        <member name="F:SadConsole.StringParser.BBCode.Strikethrough.Glyph">
            <summary>
            The glyph used for the strikethrough decorator.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Strikethrough.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="F:SadConsole.StringParser.BBCode.Underline.Glyph">
            <summary>
            The glyph used for the underline decorator.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Underline.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="F:SadConsole.StringParser.BBCode.Bold.GlyphOffset">
            <summary>
            The offset applied to the glyph to get the emboldened variant.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Bold.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="F:SadConsole.StringParser.BBCode.Italic.GlyphOffset">
            <summary>
            The offset applied to the glyph to get the italicized variant.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Italic.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Upper.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.StringParser.BBCode.Lower.SetBBCode(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.Default">
            <summary>
            The default string parser.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.Default.Variables">
            <summary>
            A dictionary of variable resolution methods.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.Default.CustomProcessor">
            <summary>
            Custom processor called before the build in command resolver.
            </summary>
            <remarks>
            Signature is ("command", "parameters", existing glyphs, text surface, associated editor, command stacks).
            </remarks>
        </member>
        <member name="M:SadConsole.StringParser.Default.Parse(System.ReadOnlySpan{System.Char},System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns>The finalized string.</returns>
        </member>
        <member name="T:SadConsole.StringParser.IParser">
            <summary>
            Describes a parser
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.IParser.Parse(System.ReadOnlySpan{System.Char},System.Int32,SadConsole.ICellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Generates a colored string from a string of characters.
            </summary>
            <param name="value">The characters to process.</param>
            <param name="surfaceIndex">The index on the backing surface, if it applies.</param>
            <param name="surface">The backing surface the parser is interacting with, if it applies.</param>
            <param name="initialBehaviors">A set of known behaviors to apply to the parser.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.StringParser.CommandTypes">
            <summary>
            Command type of a <see cref="T:SadConsole.StringParser.ParseCommandBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Foreground">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Foreground"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Background">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Background"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Glyph">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Glyph"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Mirror">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Mirror"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Effect">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Effect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Decorator">
            <summary>
            Command should be added to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Decorator"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.PureCommand">
            <summary>
            Command runs on creation and is not added to anything in <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Invalid">
            <summary>
            Command is invalid and should not be processed at all.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBase">
            <summary>
            Base class for a string processor behavior.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBase.CommandType">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Builds a glyph.
            </summary>
            <param name="glyphState">The current glyph being built.</param>
            <param name="glyphString">The current string of glyphs that has been processed until now.</param>
            <param name="surfaceIndex">Where on the surface this glyph will appear.</param>
            <param name="surface">The surface associated with the glyph.</param>
            <param name="stringIndex">Where in the original string this glyph is from.</param>
            <param name="processedString">The entire string being processed.</param>
            <param name="commandStack">The state of commands.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Removed">
            <summary>
            Called when the command is removed from its stack.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBlink">
            <summary>
            Blinks characters.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBlink.Speed">
            <summary>
            The speed of the blink.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBlink.#ctor(System.String,SadConsole.ColoredGlyphBase[],SadConsole.StringParser.ParseCommandStacks,SadConsole.ICellSurface)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="glyphString">The string that has been processed so far.</param>
            <param name="commandStack">The current commands for the string.</param>
            <param name="surface">The surface hosting the string.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBlink.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandClearEffect">
            <summary>
            Clears the cell effect for the glyph.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandClearEffect.#ctor(System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="commandStack">The current commands for the string.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandClearEffect.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandDecorator">
            <summary>
            Sets the mirror of a glyph.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandDecorator.Decorator">
            <summary>
            The decorator created by the command settings.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandDecorator.Glyph">
            <summary>
            The glyph of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandDecorator.Color">
            <summary>
            The color of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandDecorator.Mirror">
            <summary>
            The mirror to apply to the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandDecorator.Replace">
            <summary>
            When <see langword="true"/>, replaces the decorators on the glyph, otherwise it adds them.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandDecorator.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="replace">When <see langword="true"/>, replaces the decorators on the glyph, otherwise it adds them.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandDecorator.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSetGlyph">
            <summary>
            Prints a glyph.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandSetGlyph.Glyph">
            <summary>
            The glyph to set.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandSetGlyph.RandomGlyph">
            <summary>
            Uses a random glyph.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandSetGlyph.RandomGlyphMin">
            <summary>
            The minimum glyph to use with the random glyph.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandSetGlyph.RandomGlyphMax">
            <summary>
            The maximumglyph to use with the random glyph.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandSetGlyph.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandSetGlyph.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandGradient">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandGradient.GradientString">
            <summary>
            The string to apply to the characters.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandGradient.Length">
            <summary>
            The length to apply.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandGradient.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandGradient.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandMirror">
            <summary>
            Sets the mirror of a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandMirror.Mirror">
            <summary>
            The mirror mode.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandMirror.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandMirror.#ctor">
            <summary>
            Creates a new instance of this command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandMirror.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandRecolor">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.Default">
            <summary>
            Use the default foreground and background based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepRed">
            <summary>
            Keeps the red channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepGreen">
            <summary>
            Keeps the green channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepBlue">
            <summary>
            Keeps the blue channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandRecolor.KeepAlpha">
            <summary>
            Keeps the alpha channel of the existing color of the glyphs this command is applied to.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.R">
            <summary>
            The current red value
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.G">
            <summary>
            The current green value
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.B">
            <summary>
            The current blue value
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandRecolor.A">
            <summary>
            The current alpha value
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandRecolor.#ctor(System.String)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandRecolor.#ctor">
            <summary>
            Creates a new instance of this command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandRecolor.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandStacks">
            <summary>
            A list of behaviors applied as a string is processed.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Foreground">
            <summary>
            The commands that affect the foreground.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Background">
            <summary>
            The commands that affect the background.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Glyph">
            <summary>
            The commands that affect the glyph.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Mirror">
            <summary>
            The commands that affect the mirror setting.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Effect">
            <summary>
            The commands that affect the glyph effect.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.Decorator">
            <summary>
            The commands that affect the glyph decorators.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.All">
            <summary>
            All commands.
            </summary>
        </member>
        <member name="P:SadConsole.StringParser.ParseCommandStacks.CalculatedDecorators">
            <summary>
            Returns the active array that is calculated from the <see cref="P:SadConsole.StringParser.ParseCommandStacks.Decorator"/> stack.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.#ctor">
            <summary>
            Creates new stacks of commands.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.AddSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Adds a behavior to the <see cref="P:SadConsole.StringParser.ParseCommandStacks.All"/> collection and the collection 
            based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/> type.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.RemoveSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Removes a command from the appropriate command stack and from the <see cref="P:SadConsole.StringParser.ParseCommandStacks.All"/> stack.
            </summary>
            <param name="command">The command to remove</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandUndo">
            <summary>
            Pops a behavior off of a <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandUndo.#ctor(System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a new instance of this command.
            </summary>
            <param name="parameters">The string to parse for parameters.</param>
            <param name="stacks">The current commands for the string.</param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandUndo.Build(SadConsole.ColoredGlyphAndEffect@,SadConsole.ColoredGlyphAndEffect[],System.Int32,SadConsole.ICellSurface,System.Int32@,System.ReadOnlySpan{System.Char},SadConsole.StringParser.ParseCommandStacks)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.StringValidation">
            <summary>
            Validates a string
            </summary>
        </member>
        <member name="T:SadConsole.StringValidation.Result">
            <summary>
            The object produced when validating a string.
            </summary>
        </member>
        <member name="F:SadConsole.StringValidation.Result.IsValid">
            <summary>
            Indicates whether or not this result is valid.
            </summary>
        </member>
        <member name="F:SadConsole.StringValidation.Result.ErrorMessage">
            <summary>
            The error message when <see cref="F:SadConsole.StringValidation.Result.IsValid"/> is <see langword="false"/>. May be an empty string when there isn't a message.
            </summary>
        </member>
        <member name="M:SadConsole.StringValidation.Result.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new string validation result.
            </summary>
            <param name="isValid">A value to indicate that the result is valid or not.</param>
            <param name="errorMsg">A message associated with the result when <paramref name="isValid"/> is <see langword="false"/>.</param>
        </member>
        <member name="M:SadConsole.StringValidation.Result.Success">
            <summary>
            A successful result.
            </summary>
            <returns>A successful result.</returns>
        </member>
        <member name="T:SadConsole.StringValidation.Validator">
            <summary>
            Validates a string value.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>A result that indicates whether or not the string value has been validated.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.None(System.String)">
            <summary>
            Always validates to true.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>A positive validation result.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.Integer(System.String)">
            <summary>
            Returns a <see cref="T:SadConsole.StringValidation.Validator"/> delegate that validates whether or not a string can be parsed by the <see cref="M:System.Int64.TryParse(System.String,System.Int64@)"/>.
            </summary>
            <param name="errorMessage">A message to provide to the result if the validation fails.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.Decimal(System.String)">
            <summary>
            Returns a <see cref="T:SadConsole.StringValidation.Validator"/> delegate that validates whether or not a string can be parsed by the <see cref="M:System.Double.TryParse(System.String,System.Double@)"/>.
            </summary>
            <param name="errorMessage">A message to provide to the result if the validation fails.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.LengthRange(System.Int32,System.Int32,System.String)">
            <summary>
            Returns a <see cref="T:SadConsole.StringValidation.Validator"/> delegate that validates whether or not a length of a string falls within the specified range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="errorMessage">A message to provide to the result if the validation fails.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.All(SadConsole.StringValidation.Validator[])">
            <summary>
            Uses multiple <see cref="T:SadConsole.StringValidation.Validator"/> delegates to validate a string. All validators must pass.
            </summary>
            <param name="validators">Each <see cref="T:SadConsole.StringValidation.Validator"/> to use.</param>
            <returns>When all validators pass, a successful result; otherwise, the failed result.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.Letters(System.String)">
            <summary>
            Returns a <see cref="T:SadConsole.StringValidation.Validator"/> delegate that validates whether or not a string contains only letters.
            </summary>
            <param name="errorMessage">A message to provide to the result if the validation fails.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:SadConsole.StringValidation.LettersOnly">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match a character in the set [A-Za-z].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:SadConsole.UI.AdjustableColor">
            <summary>
            A color that can be adjusted by brightness and mapped to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.Name">
            <summary>
            The name of the color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.BaseColor">
            <summary>
            The color without brightness.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.ComputedColor">
            <summary>
            The color with brightness applied.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.IsCustomColor">
            <summary>
            <see langword="true"/> when this color is not defined by a <see cref="T:SadConsole.UI.Colors"/> object; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.UIColor">
            <summary>
            The <see cref="T:SadConsole.UI.Colors"/> mapped color when <see cref="P:SadConsole.UI.AdjustableColor.IsCustomColor"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.AdjustableColor.Brightness">
            <summary>
            A brightness to apply to the color.
            </summary>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.#ctor(SadRogue.Primitives.Color,System.String)">
            <summary>
            Creates a color that isn't mapped to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The color.</param>
            <param name="name">A friendly name of the color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.#ctor(SadRogue.Primitives.Color,System.String,SadConsole.UI.Colors)">
            <summary>
            Creates a color and tries to map it to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The color.</param>
            <param name="name">A friendly name of the color.</param>
            <param name="colors">The colors to try and map to.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.#ctor(SadConsole.UI.Colors.ColorNames,System.String,SadConsole.UI.Colors)">
            <summary>
            Creates a color that maps to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The predefined color.</param>
            <param name="name">A friendly name of the color.</param>
            <param name="colors">The colors used setting the <see cref="P:SadConsole.UI.AdjustableColor.BaseColor"/> value.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.SetUIColor(SadConsole.UI.Colors.ColorNames,SadConsole.UI.Colors,SadConsole.UI.Colors.Brightness)">
            <summary>
            Maps this adjustable color to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The predefined color.</param>
            <param name="colors">The colors used setting the <see cref="P:SadConsole.UI.AdjustableColor.BaseColor"/> value.</param>
            <param name="brightness">The brightness to apply to the color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.SetColor(SadRogue.Primitives.Color,SadConsole.UI.Colors,SadConsole.UI.Colors.Brightness)">
            <summary>
            Tries to map this adjustable color to a <see cref="T:SadConsole.UI.Colors"/> color.
            </summary>
            <param name="color">The color.</param>
            <param name="colors">The colors to try and map to.</param>
            <param name="brightness">The brightness to apply to the color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.SetColor(SadRogue.Primitives.Color)">
            <summary>
            Configures this adjustable color to the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.RefreshUIColor(SadConsole.UI.Colors)">
            <summary>
            Refreshes <see cref="P:SadConsole.UI.AdjustableColor.BaseColor"/> using <see cref="P:SadConsole.UI.AdjustableColor.UIColor"/> and the provided <see cref="T:SadConsole.UI.Colors" /> object.
            </summary>
            <param name="colors">The colors to pull a color value from.</param>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A new adjustable color object.</returns>
        </member>
        <member name="M:SadConsole.UI.AdjustableColor.op_Implicit(SadConsole.UI.AdjustableColor)~SadRogue.Primitives.Color">
            <summary>
            Casts this object to a <see cref="T:SadRogue.Primitives.Color"/>.
            </summary>
            <param name="color">The adjustable color.</param>
        </member>
        <member name="T:SadConsole.UI.Colors">
            <summary>
            Default colors used by control themes.
            </summary>
            <summary>
            Default colors used by control themes.
            </summary>
            <summary>
            Default colors used by control themes.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Default">
            <summary>
            The default colors used by controls and your code.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.IsLightTheme">
            <summary>
            Status flag to indicate that the primary backgrounds of the controls are considered light rather than dark.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Name">
            <summary>
            The name of this color scheme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.White">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Gray">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.GrayDark">
            <summary>
            The dark gray color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Green">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Purple">
            <summary>
            The purple color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Yellow">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Orange">
            <summary>
            The orange color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Cyan">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Brown">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.RedDark">
            <summary>
            The dark red color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.GreenDark">
            <summary>
            The dark green color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.BlueDark">
            <summary>
            The dark blue color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.PurpleDark">
            <summary>
            The dark purple color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.YellowDark">
            <summary>
            The dark yellow color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.OrangeDark">
            <summary>
            The dark orange color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.CyanDark">
            <summary>
            The dark cyan color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.BrownDark">
            <summary>
            The dark brown color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Gold">
            <summary>
            The gold color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.GoldDark">
            <summary>
            The dark gold color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Silver">
            <summary>
            The silver color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.SilverDark">
            <summary>
            The dark silver color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Bronze">
            <summary>
            The bronze color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.BronzeDark">
            <summary>
            The dark bronze color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ModalBackground">
            <summary>
            The color used to darken the background when <see cref="o:UI.Window.Show"/> is called and <see cref="P:SadConsole.UI.Window.IsModal"/> is <see langword="true"/>. Defaults to (20, 20, 20, 200).
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Title">
            <summary>
            Color used for titles.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Lines">
            <summary>
            Color used in drawing lines.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundNormal">
            <summary>
            Color of a control's foreground in normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundDisabled">
            <summary>
            Color of a control's foreground in disabled state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundMouseOver">
            <summary>
            Color of a control's foreground in mouse-over state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundMouseDown">
            <summary>
            Color of a control's foreground in mouse-button-down state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundSelected">
            <summary>
            Color of a control's foreground in selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlForegroundFocused">
            <summary>
            Color of a control's foreground in focused state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundNormal">
            <summary>
            Color of a control's background in normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundDisabled">
            <summary>
            Color of a control's background in disabled state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundMouseOver">
            <summary>
            Color of a control's background in normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundMouseDown">
            <summary>
            Color of a control's background in mouse-button-down state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundSelected">
            <summary>
            Color of a control's background in selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlBackgroundFocused">
            <summary>
            Color of a control's background in focused state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlHostForeground">
            <summary>
            Color of the control host's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.ControlHostBackground">
            <summary>
            Color of the control host's background.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlNormal">
            <summary>
            The appearance of a control when in the normal state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlDisabled">
            <summary>
            The appearance of a control when in the disabled state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlOver">
            <summary>
            The appearance of a control when in the mouse-over state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlSelected">
            <summary>
            The appearance of a control when in the selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlMouseDown">
            <summary>
            The appearance of a control when in the mouse-down state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Colors.Appearance_ControlFocused">
            <summary>
            The appearance of a control when in the focused state.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.#ctor">
            <summary>
            Creates a color object based on the <see cref="M:SadConsole.UI.Colors.CreateAnsi"/> scheme.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.#ctor(System.Int32)">
            <summary>
            Internal constructor to avoid creating any predefined colors.
            </summary>
            <param name="_">Discarded parameter</param>
        </member>
        <member name="M:SadConsole.UI.Colors.RebuildAppearances">
            <summary>
            Sets all Appearance* properties based on the existing colors and settings.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.GetOffColor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Compares two colors and if they match, returns a color that is lighter or darker based on if <see cref="P:SadConsole.UI.Colors.IsLightTheme"/>.
            </summary>
            <param name="inColor">The base color.</param>
            <param name="compareColor">The color to compare with.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:SadConsole.UI.Colors.NormalizeBlack(SadRogue.Primitives.Color)">
            <summary>
            Normalizes a dark color to at least R:25 G:25 B:25 A:255.
            </summary>
            <param name="inColor">The color to check.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:SadConsole.UI.Colors.CopyTo(SadConsole.UI.Colors)">
            <summary>
            Copies the colors to another color object.
            </summary>
            <param name="colors">The color object to copy to.</param>
        </member>
        <member name="M:SadConsole.UI.Colors.FromColorName(SadConsole.UI.Colors.ColorNames)">
            <summary>
            Gets a color by enumeration.
            </summary>
            <param name="color">The color to get.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadConsole.UI.Colors.SetColorByName(SadConsole.UI.Colors.ColorNames,SadRogue.Primitives.Color)">
            <summary>
            Sets a named color to a specified value.
            </summary>
            <param name="name">The name of the color.</param>
            <param name="color">The color value.</param>
        </member>
        <member name="M:SadConsole.UI.Colors.TryToColorName(SadRogue.Primitives.Color,SadConsole.UI.Colors.ColorNames@)">
            <summary>
            Tries to get the color name of the specified color.
            </summary>
            <param name="color">The color to match.</param>
            <param name="colorName">Set to the color enumeration value when the <paramref name="color"/> parameter matches a defined color.</param>
            <returns><see langword="true"/> if the specified color matched a defined color name; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Colors.AddToColorMappings">
            <summary>
            Adds each color here to the <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/> dictionary. Uses the format of "theme.property-name".
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>A new Colors object.</returns>
        </member>
        <member name="T:SadConsole.UI.Colors.ColorNames">
            <summary>
            An enumeration of each color name defined by the library colors object.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Colors.Brightness">
            <summary>
            A brightness value that can be applied to a color.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Colors.CreateSadConsoleBlue">
            <summary>
            Creates a new colors object with the default blue colors theme of SadConsole.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Colors.CreateAnsi">
            <summary>
            Creates a new colors object with a standard black-based theme.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SadConsole.UI.ControlHost">
            <summary>
            Adds the ability for a host to contain and display controls from <see cref="N:SadConsole.UI.Controls"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="F:SadConsole.UI.ControlHost.ControlsList">
            <summary>
            The collection of controls.
            </summary>
        </member>
        <member name="F:SadConsole.UI.ControlHost.NamedControls">
            <summary>
            The controls added which contain a <see cref="P:SadConsole.UI.Controls.ControlBase.Name"/> value.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.Item(System.Int32)">
            <summary>
            Gets a control by index.
            </summary>
            <param name="index">The index of the control.</param>
            <returns>A control.</returns>
        </member>
        <member name="P:SadConsole.UI.ControlHost.ParentConsole">
            <summary>
            The parent object hosting the controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.ThemeColors">
            <summary>
            Gets or sets the colors to use with drawing the console and controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.IsDirty">
            <summary>
            Indicates that the control host needs to be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.CapturedControl">
            <summary>
            Gets the control currently capturing mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.FocusedControl">
            <summary>
            Gets or sets the control that has keyboard focus.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.ClearOnAdded">
            <summary>
            When <see langword="true"/>, the component will clear the console it's attached to with the theme color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.DisableCursorOnAdded">
            <summary>
            When <see langword="true"/>, the component will disable the cursor of the console it's attached to.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.CanTabToNextConsole">
            <summary>
            When true, allows the tab command to move to the next console (when there is a parent) instead of cycling back to the first control on this console.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.NextTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.UI.ControlHost.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.PreviousTabConsole">
            <summary>
            Sets reference to the console to tab to when the <see cref="P:SadConsole.UI.ControlHost.CanTabToNextConsole"/> property is true. Set this to null to allow the engine to determine the next console.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.DisableControlFocusing">
            <summary>
            When set to true, child controls are not alerted to focused and non-focused states.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.Count">
            <summary>
            The total number of controls in this component.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.IsReadOnly">
            <summary>
            Always returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlHost.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.ControlHost.HasNamedControl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.ControlHost.HasNamedControl(System.String,SadConsole.UI.Controls.ControlBase@)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.ControlHost.GetNamedControl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TabNextControl">
            <summary>
            Gives the focus to the next control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TabPreviousControl">
            <summary>
            Gives focus to the previous control in the tab order.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TryTabPreviousConsole">
            <summary>
            Tries to tab to the console that comes before this one in the <see cref="P:SadConsole.IScreenObject.Parent"/> collection of <see cref="P:SadConsole.IScreenObject.Children"/>. Sets focus to the target console if found.
            </summary>
            <returns><see langword="true"/> if the tab was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.TryTabNextConsole">
            <summary>
            Tries to tab to the console that comes after this one in the <see cref="P:SadConsole.IScreenObject.Parent"/> collection of <see cref="P:SadConsole.IScreenObject.Children"/>. Sets focus to the target console if found.
            </summary>
            <returns><see langword="true"/> if the tab was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.GetThemeColors">
            <summary>
            Returns the colors assigned to this console or the library default.
            </summary>
            <returns>The found colors.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ToArray">
            <summary>
            Gets an array containing all of the controls this host contains.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.FocusedControlChanging(SadConsole.UI.Controls.ControlBase,SadConsole.UI.Controls.ControlBase)">
            <summary>
            When overridden, allows you to prevent a control from taking focus from another control.
            </summary>
            <param name="newControl">The control requesting focus.</param>
            <param name="oldControl">The control that has focus.</param>
            <returns><see langword="true"/> when the focus change is allowed; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.FocusedControlChanged(SadConsole.UI.Controls.ControlBase,SadConsole.UI.Controls.ControlBase)">
            <summary>
            This method actually changes the variable that tracks which control is focused. It then sets the <see cref="P:SadConsole.UI.Controls.ControlBase.IsFocused"/> property
            to the appropriate value for both the previously focused control and the newly focused control.
            </summary>
            <param name="newControl">The control that should be focused.</param>
            <param name="oldControl">The control that currently has focus.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.CanFocusControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Determins if a control is enabled and <see cref="P:SadConsole.UI.Controls.ControlBase.CanFocus"/> is <see langword="true"/>.
            </summary>
            <param name="control">The control to check.</param>
            <returns><see langword="true"/> when the control can be focused; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ReOrderControls">
            <summary>
            Reorders the control collection based on the tab index of each control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Surface_MouseExit(System.Object,SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.ControlHost.CaptureControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Captures a control for exclusive mouse focus. Sets the ExclusiveMouse property to true.
            </summary>
            <param name="control">The control to capture</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ReleaseControl">
            <summary>
            Releases the control from exclusive mouse focus. Sets the ExclusiveMouse property to false and sets the CapturedControl property to null.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.ForceRedrawAllControls">
            <summary>
            Forces each control to dirty so that the next frame will redraw each control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator of the controls collection.
            </summary>
            <returns>The enumerator of the controls collection.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.IndexOf(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Gets the index of the specified control.
            </summary>
            <param name="control">The control.</param>
            <returns>The index of the control in the backing collection.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Insert(System.Int32,SadConsole.UI.Controls.ControlBase)">
            <summary>
            Inserts an item at the specified index and sets the <see cref="P:SadConsole.UI.Controls.ControlBase.TabIndex"/> to the specified index.
            </summary>
            <remarks>Index within the backing collection is always based on <see cref="P:SadConsole.UI.Controls.ControlBase.TabIndex"/> ranking. There may be conflicts so you're not guaranteed that the control will be available at the specified index.</remarks>
            <param name="index">Index to insert at.</param>
            <param name="control">The control to insert.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.RemoveAt(System.Int32)">
            <summary>
            Removes a control by index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Add(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Adds an existing control to this console.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Clear">
            <summary>
            Removes all controls from this console.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Contains(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Checks if the specified control exists in this console.
            </summary>
            <param name="control">The control to check.</param>
            <returns>True when the control exists in this console; otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.CopyTo(SadConsole.UI.Controls.ControlBase[],System.Int32)">
            <summary>
            Copies the controls to a new array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The starting index of where to copy the controls in the destination array.</param>
        </member>
        <member name="M:SadConsole.UI.ControlHost.Remove(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Removes a control from this console.
            </summary>
            <param name="control">The control to remove.</param>
            <returns><see langword="true"/> if item was successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if item is not found.</returns>
        </member>
        <member name="M:SadConsole.UI.ControlHost.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.ControlsConsole">
            <summary>
            A basic console that can contain controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ControlsConsole.Controls">
            <summary>
            The controls host holding all the controls.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the console in cells.</param>
            <param name="height">The visible height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a console with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the console in cells.</param>
            <param name="height">The height of the console in cells.</param>
            <param name="bufferWidth">The total width of the console in cells.</param>
            <param name="bufferHeight">The total height of the console in cells.</param>
            <param name="initialCells">The cells to seed the console with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new console using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.UI.ControlsConsole.ToString">
            <summary>
            Returns the value "Console (Controls)".
            </summary>
            <returns>The string "Console (Controls)".</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.Button">
            <summary>
            Simple button control with a height of 1.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Button.ShowEnds">
            <summary>
            When true, renders the "end" glyphs on the button.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Button.LeftEndGlyph">
            <summary>
            The theme state used with the left end of the button.Defaults to '&lt;'.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Button.RightEndGlyph">
            <summary>
            The theme state used with the right end of the button. Defaults to '>'.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Button.EndsThemeState">
            <summary>
            The theme state used with the left end of the button.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Button.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Button.#ctor(System.String)">
            <summary>
            Creates an auto sizing button with the specified text.
            </summary>
            <param name="text">The text to display on the button.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Button.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Button.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Button.CreateControlSurface">
            <summary>
            Resizes the control surface based on <see cref="P:SadConsole.UI.Controls.ButtonBase.AutoSize"/> or the <see cref="P:SadConsole.UI.Controls.ControlBase.Width"/> and <see cref="P:SadConsole.UI.Controls.ControlBase.Height"/> properties.
            </summary>
            <returns>The control's surface.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.Button3d">
            <summary>
            A button control that is drawn with a shadow.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Button3d.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Button3d.CreateControlSurface">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Button3d.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Button3d.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.ButtonBase">
            <summary>
            Base class for creating a button type control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ButtonBase.Click">
            <summary>
            Raised when the button is clicked.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ButtonBase._textAlignment">
            <summary>
            The alignment of the <see cref="F:SadConsole.UI.Controls.ButtonBase._text"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ButtonBase.Text">
            <summary>
            The text displayed on the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ButtonBase.AutoSize">
            <summary>
            When <see langword="true"/>, automatically resizes the surface to fit the <see cref="P:SadConsole.UI.Controls.ButtonBase.Text"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ButtonBase.TextAlignment">
            <summary>
            The alignment of the text, left, center, or right.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new button control.
            </summary>
            <param name="width">Width of the button.</param>
            <param name="height">Height of the button.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.#ctor">
            <summary>
            Creates a new button control with <see cref="P:SadConsole.UI.Controls.ButtonBase.AutoSize"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnClick">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.ButtonBase.Click"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.InvokeClick(System.Boolean)">
            <summary>
            Simulates a mouse click on the button. Optionally, focuses the button prior to simulating the click.
            </summary>
            <param name="focus">When <see langword="true"/>, focuses the button before clicking.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Detects if the SPACE or ENTER keys are pressed and calls the <see cref="E:SadConsole.UI.Controls.ButtonBase.Click"/> method.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBase.OnMouseExit(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Controls.ButtonBox">
            <summary>
            A button control that is drawn using lines around it.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ButtonBox.UseExtended">
            <summary>
            When <see langword="true"/>, indicates that the lines of the theme should use the extended SadConsole font characters if available.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBox.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ButtonBox.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.CheckBox">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new checkbox control with the specified width and height.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.#ctor(System.String)">
            <summary>
            Creates an auto sizing checkbox control with the specified text.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.OnClick">
            <summary>
            Perfroms a click on the base button and also toggles the <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.LeftBracketGlyph">
            <summary>
            The glyph for the left-side bracket of the icon.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.RightBracketGlyph">
            <summary>
            The glyph for the right-side bracket of the icon.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.CheckedIconGlyph">
            <summary>
            The glyph of the icon when checked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.UncheckedIconGlyph">
            <summary>
            The glyph of the icon when unchecked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.CheckedIconColor">
            <summary>
            An optional color of the <see cref="P:SadConsole.UI.Controls.CheckBox.CheckedIconGlyph"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.UncheckedIconColor">
            <summary>
            An optional color of the <see cref="P:SadConsole.UI.Controls.CheckBox.UncheckedIconGlyph"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.BracketsThemeState">
            <summary>
            The theme state used with the brackets.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CheckBox.IconThemeState">
            <summary>
            The theme state used with the icon of the 
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.CheckBox.CreateControlSurface">
            <summary>
            Resizes the control surface based on <see cref="P:SadConsole.UI.Controls.ButtonBase.AutoSize"/> or the <see cref="P:SadConsole.UI.Controls.ControlBase.Width"/> and <see cref="P:SadConsole.UI.Controls.ControlBase.Height"/> properties.
            </summary>
            <returns>The control's surface.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.ComboBox">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ComboBox.DropdownContainer">
            <summary>
            Surface that contains the listbox
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ComboBox.ListBox">
            <summary>
            Listbox used to control the items
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ComboBox.SelectedItemChanged">
            <summary>
            An event that triggers when the <see cref="P:SadConsole.UI.Controls.ComboBox.SelectedItem"/> property changes.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.#ctor(System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Creates a new instance of the combobox control.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="dropdownWidth">The width of the dropdown container.</param>
            <param name="dropdownHeight">The height of the dropdown container.</param>
            <param name="items">The items to seed the dropdown with.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.ResizeDropDown(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Resizes the dropdown container to the given width/height
            </summary>
            <param name="width">Width of the dropdown</param>
            <param name="height">Height of the dropdown</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.SetItems(System.Object[])">
            <summary>
            Sets the items in the dropdown listbox.
            </summary>
            <param name="items">The items to set.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.GetItems">
            <summary>
            Gets an array of items from the dropdown listbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.RepositionOffScreenContainer">
            <summary>
            Checks if the dropdown container is off-screen, and pushes it back in.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.OnIsSelected">
            <summary>
            When <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> is <see langword="true"/>, displays the popup container. When <see langword="false"/>, hides the popup container.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.PopupInnerAligned">
            <summary>
            When <see langword="true"/>, uses the <see cref="P:SadConsole.UI.Controls.ComboBox.PopupHorizontal"/> value from the interior of the control. When <see langword="false"/>, it's used from the outside of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.PopupHorizontal">
            <summary>
            Sets the horizontal orientation of the of the dropdown popup.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.PopupVertical">
            <summary>
            Sets the vertical orientation of the of the dropdown popup.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.CollapsedButtonGlyph">
            <summary>
            The glyph to use on the control when it's collapsed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ComboBox.ExpandedButtonGlyph">
            <summary>
            The glyph to use on the control when it's expanded.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ComboBox.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.CompositeControl">
            <summary>
            Base class for controls that host and render other controls.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.CompositeControl.Controls">
            <summary>
            The controls this composite control is hosting. Use <see cref="M:SadConsole.UI.Controls.CompositeControl.AddControl(SadConsole.UI.Controls.ControlBase)"/> and <see cref="M:SadConsole.UI.Controls.CompositeControl.RemoveControl(SadConsole.UI.Controls.ControlBase)"/> to manage the collection.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.CompositeControl.NamedControls">
            <summary>
            The controls added which contain a <see cref="P:SadConsole.UI.Controls.ControlBase.Name"/> value.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.CompositeControl.Count">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.UI.Controls.CompositeControl.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.UI.Controls.CompositeControl.SadConsole#UI#Controls#IContainer#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new control with the specified width and height.
            </summary>
            <param name="width">Width of the control in cells.</param>
            <param name="height">Height of the control in cells.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.CreateChildControls">
            <summary>
            Create each control and add it to <see cref="F:SadConsole.UI.Controls.CompositeControl.Controls"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.IsDirtyEventHandler(System.Boolean)">
            <summary>
            A handler to forward state to <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Processes the mouse on each control hosted by this control.
            </summary>
            <param name="state">The mouse state based on the parent screen object.</param>
            <returns><see langword="true"/> when a control processes the mouse; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.AddControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Adds a child control to this control.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.RemoveControl(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Removes a child control from this control.
            </summary>
            <param name="control">The control to remove.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.UpdateAndRedraw(System.TimeSpan)">
            <summary>
            Updates each control hosted by this control.
            </summary>
            <param name="time">The game frame time delta.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.SadConsole#UI#Controls#IContainer#HasNamedControl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.SadConsole#UI#Controls#IContainer#HasNamedControl(System.String,SadConsole.UI.Controls.ControlBase@)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.CompositeControl.SadConsole#UI#Controls#IContainer#GetNamedControl(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.ControlBase">
            <summary>
            Base class for all controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ThemeState">
            <summary>
            The theme of the control based on its state.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_IsMouseOver">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseEnter(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the mouse is over the bounds defined by <see cref="P:SadConsole.UI.Controls.ControlBase.MouseArea"/> .
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_EnteredWithButtonDown">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseEnter(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the mouse entered the control's bounds with the mouse button down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_IsMouseLeftDown">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the left mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlBase.MouseState_IsMouseRightDown">
            <summary>
            A cached value determined by <see cref="M:SadConsole.UI.Controls.ControlBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)"/>. <see langword="true"/> when the right mouse button is down.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.IsDirtyChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.Focused">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ControlBase.IsFocused"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.Unfocused">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ControlBase.IsFocused"/> is set to <see langword="false"/>.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.PositionChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ControlBase.Position"/> property changes value.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseEnter">
            <summary>
            Raised when the mouse enters this control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseExit">
            <summary>
            Raised when the mouse exits this control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseMove">
            <summary>
            Raised when the mouse is moved over this control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ControlBase.MouseButtonClicked">
            <summary>
            Raised when a mouse button is clicked while the mouse is over this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.UseKeyboard">
            <summary>
            <see langword="true"/> to allow this control to respond to keyboard interactions when focused.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.UseMouse">
            <summary>
            <see langword="true"/> to allow this control to respond to mouse interactions.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.CanFocus">
            <summary>
            <see langword="true"/> to indicate this control can be focused, generally by clicking on the control or tabbing with the keyboard. Otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.CanResize">
            <summary>
            When <see langword="true"/>, indicates that this control can be resized with the <see cref="M:SadConsole.UI.Controls.ControlBase.Resize(System.Int32,System.Int32)"/> method; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.AlternateFont">
            <summary>
            An alternate font used to render this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Surface">
            <summary>
            The cell data to render the control. Controlled by a theme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.MouseArea">
            <summary>
            The relative region the of the control used for mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsMouseButtonStateClean">
            <summary>
            When <see langword="true"/>, indicates the mouse button state has only been set with this control and not another; othwerise <see langword="false"/>.
            </summary>
            <remarks>
            This property is only set when the mouse enters the control with the buttons pressed. Once the buttons are let go, the mouse is considered clean for this control.
            </remarks>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Position">
            <summary>
            The relative position of this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.AbsolutePosition">
            <summary>
            Gets the position of this control based on the control's <see cref="P:SadConsole.UI.Controls.ControlBase.Position"/> and the position of the <see cref="P:SadConsole.UI.Controls.ControlBase.Parent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsVisible">
            <summary>
            Indicates whether or not this control is visible.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Tag">
            <summary>
            A user-definable data object.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.TabStop">
            <summary>
            Indicates whether or not this control can be tabbed to.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.TabIndex">
            <summary>
            Sets the tab index of this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsDirty">
            <summary>
            Indicates whether or not this control is dirty and should be redrawn.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Name">
            <summary>
            Represents a name to identify a control by.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.FocusOnMouseClick">
            <summary>
            Gets or sets whether or not this control will become focused when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Width">
            <summary>
            The width of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Height">
            <summary>
            The height of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsFocused">
            <summary>
            Gets or sets whether or not this control is focused.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.IsEnabled">
            <summary>
            Gets or sets whether or not this control is enabled.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Bounds">
            <summary>
            The area of the host this control covers.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.Parent">
            <summary>
            Gets or sets the parent container of this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.State">
            <summary>
            The state of the control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnUnfocused">
            <summary>
            Called when the control loses focus.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnFocused">
            <summary>
            Called when the control is focused.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnIsDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> property changes value.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the keyboard is used on this control.
            </summary>
            <param name="state">The state of the keyboard.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Checks if the mouse is the control and calls the appropriate mouse methods.
            </summary>
            <param name="state">Mouse information.</param>
            <returns>True when the control is enabled, set to use the mouse and the mouse is over it, otherwise false.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.LostMouse(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Called to trigger the state of losing mouse focus.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnParentChanged">
            <summary>
            Called when the parent property is changed.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnPositionChanged">
            <summary>
            Called when the control changes position.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.PlaceRelativeTo(SadConsole.UI.Controls.ControlBase,SadRogue.Primitives.Direction.Types,System.Int32)">
            <summary>
            Places this control relative to another, taking into account the bounds of the control.
            </summary>
            <param name="control">The other control to place this one relative to.</param>
            <param name="direction">The direction this control should be placed.</param>
            <param name="padding">Additional space between the controls after placement.</param>
            <remarks>If this control hasn't been added to the parent of <paramref name="control"/>, it will be added.</remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.DetermineState">
            <summary>
            Sets the appropriate theme for the control based on the current state of the control.
            </summary>
            <remarks>Called by the control as the mouse state changes, like when the mouse is clicked on top of the control or leaves the area of the control. This method is implemented by each derived control.</remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnStateChanged(SadConsole.UI.Controls.ControlStates,SadConsole.UI.Controls.ControlStates)">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ControlBase.State"/> changes. Sets the <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> to true.
            </summary>
            <param name="oldState">The original state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnSurfaceChanged(SadConsole.ICellSurface,SadConsole.ICellSurface)">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ControlBase.Surface"/> property is set.
            </summary>
            <param name="oldSurface">The previous surface instance.</param>
            <param name="newSurface">The new surface instance.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.FindThemeFont">
            <summary>
            Returns the <see cref="P:SadConsole.UI.Controls.ControlBase.AlternateFont"/>. If null, returns the host's console font or the default engine font.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.FindThemeColors">
            <summary>
            Returns the colors assigned to this control, the parent, or the library default.
            </summary>
            <returns>The found colors.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.SetThemeColors(SadConsole.UI.Colors)">
            <summary>
            Sets the theme colors used by this control. When <see langword="null"/>, indicates this control should read the theme colors from the parent.
            </summary>
            <param name="value">The colors to use with this control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.HasThemeColors">
            <summary>
            When <see langword="true"/>, indicates the control has custom theme colors assigned to it; othwerise <see langword="false"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the control if the <see cref="P:SadConsole.UI.Controls.ControlBase.CanResize"/> property is <see langword="true"/>.
            </summary>
            <param name="width">The desired width of the control.</param>
            <param name="height">The desired height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnResized">
            <summary>
            Called when <see cref="M:SadConsole.UI.Controls.ControlBase.Resize(System.Int32,System.Int32)"/> was called.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.CreateControlSurface">
            <summary>
            Generates the surface to be used by this control. This method is called internally to assign the <see cref="P:SadConsole.UI.Controls.ControlBase.Surface"/> property a value.
            </summary>
            <returns>A surface that should be assigned to the <see cref="P:SadConsole.UI.Controls.ControlBase.Surface"/> property.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <summary>
            Updates the <see cref="P:SadConsole.UI.Controls.ControlBase.ThemeState"/> by calling <see cref="M:SadConsole.UI.ThemeStates.RefreshTheme(SadConsole.UI.Colors)"/> with the provided colors. Override this method to adjust how colors are used by the <see cref="P:SadConsole.UI.Controls.ControlBase.ThemeState"/>.
            </summary>
            <param name="colors">The colors to apply to the theme state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnMouseEnter(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the mouse first enters the control. Raises the MouseEnter event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnMouseExit(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the mouse exits the area of the control. Raises the MouseExit event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called as the mouse moves around the control area. Raises the MouseMove event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the left mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.OnRightMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Called when the right mouse button is clicked. Raises the MouseButtonClicked event and calls the <see cref="M:SadConsole.UI.Controls.ControlBase.DetermineState"/> method.
            </summary>
            <param name="state">The current mouse data.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.UpdateAndRedraw(System.TimeSpan)">
            <summary>
            Redraws the control if applicable.
            </summary>
            <param name="time">The duration of thecurrent frame.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ControlBase.ControlMouseState">
            <summary>
            Mouse state based on a specific control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.Control">
            <summary>
            The control this mouse state is associated with.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.MousePosition">
            <summary>
            The relative position of the mouse to the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.OriginalMouseState">
            <summary>
            The original mouse state used to generate the event.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.IsMouseOver">
            <summary>
            When <see langword="true"/>, indicates the mouse is over the <see cref="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.Control"/>; othwerise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ControlMouseState.#ctor(SadConsole.UI.Controls.ControlBase,SadRogue.Primitives.Point,SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Creates an instance of the mouse control state class.
            </summary>
            <param name="control">The control.</param>
            <param name="mousePosition">The position of the mouse relative to the control.</param>
            <param name="originalMouseState">The original mouse state sent to the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ControlBase.ControlMouseState.#ctor(SadConsole.UI.Controls.ControlBase,SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Creates an instance of the mouse control state class and infers the <see cref="P:SadConsole.UI.Controls.ControlBase.ControlMouseState.MousePosition"/> from the control and state.
            </summary>
            <param name="control">The control.</param>
            <param name="originalMouseState">The original mouse state sent to the control.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.ControlStates">
            <summary>
            Indicates the state of a control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Normal">
            <summary>
            Normal state. 
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Disabled">
            <summary>
            The control is disabled.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Focused">
            <summary>
            The control has focus.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Clicked">
            <summary>
            The control is selected
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.MouseOver">
            <summary>
            The mouse is over the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.MouseLeftButtonDown">
            <summary>
            The left mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.MouseRightButtonDown">
            <summary>
            The Right mouse button is down.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ControlStates.Selected">
            <summary>
            The control is selected
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.DrawingArea">
            <summary>
            A simple surface for drawing text that can be moved and sized like a control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.DrawingArea.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="P:SadConsole.UI.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.DrawingArea.Appearance">
            <summary>
            The current appearance based on the control state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.DrawingArea.OnDraw">
            <summary>
            Called when the surface is redrawn.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.DrawingArea.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.DrawingArea.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.IContainer">
            <summary>
            A simple container for controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.IContainer.AbsolutePosition">
            <summary>
            Gets the position of the container based on any parents position.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.IContainer.Host">
            <summary>
            The host owning this container.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.IContainer.Item(System.String)">
            <summary>
            Gets a control by its <see cref="P:SadConsole.UI.Controls.ControlBase.Name"/> property.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.IContainer.HasNamedControl(System.String)">
            <summary>
            Checks whether or not the container has a control registered with the given name. 
            </summary>
            <param name="name">The name to check.</param>
            <returns><see langword="true"/> when the control is found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.IContainer.HasNamedControl(System.String,SadConsole.UI.Controls.ControlBase@)">
            <summary>
            Checks whether or not the container has a control registered with the given name. If found, the instance is assigned to the <paramref name="control"/> parameter.
            </summary>
            <param name="name">The name to check.</param>
            <param name="control">The control instance found.</param>
            <returns><see langword="true"/> when the control is found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.IContainer.GetNamedControl(System.String)">
            <summary>
            Gets a control by its <see cref="P:SadConsole.UI.Controls.ControlBase.Name"/> property.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>The control.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.Label">
            <summary>
            A simple surface for drawing text that can be moved and sized like a control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.ShowUnderline">
            <summary>
            When <see langword="true"/>, shows an underline on the text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.ShowStrikethrough">
            <summary>
            When <see langword="true"/>, shows a strikethrough on the text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.TextColor">
            <summary>
            Optional text color for the label. Otherwise the theme controls the color.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.Alignment">
            <summary>
            Sets the horizontal alignment of the label. Defaults to <see cref="F:SadConsole.HorizontalAlignment.Left"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.DisplayText">
            <summary>
            The text to display on the label. The label size is set in the constructor and cannot be changed.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.#ctor(System.String)">
            <summary>
            A control to display simple one-line text.
            </summary>
            <param name="displayText">The text to display. Sets the width based on the length.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.#ctor(System.Int32)">
            <summary>
            A control to display simple one-line text.
            </summary>
            <param name="length">The initial length of the label without any text.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the label but forces a height of 1.
            </summary>
            <param name="width">The width of the label.</param>
            <param name="height">Not used.</param>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="P:SadConsole.UI.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.DecoratorUnderline">
            <summary>
            The decorator to use when the <see cref="P:SadConsole.UI.Controls.Label.ShowUnderline"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Label.DecoratorStrikethrough">
            <summary>
            The decorator to use when the <see cref="P:SadConsole.UI.Controls.Label.ShowStrikethrough"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.GetStrikethrough(SadConsole.IFont,SadRogue.Primitives.Color)">
            <summary>
            Gets the strikethrough glyph defined by a font. If not found, returns glyph 196.
            </summary>
            <param name="font">The font.</param>
            <param name="color">The color to shade the decorator.</param>
            <returns>The cell decorator.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.Label.GetUnderline(SadConsole.IFont,SadRogue.Primitives.Color)">
            <summary>
            Gets the underline glyph defined by a font. If not found, returns glyph 95.
            </summary>
            <param name="font">The font.</param>
            <param name="color">The color to shade the decorator.</param>
            <returns>The cell decorator.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.ListBox">
            <summary>
            A scrollable list control.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.ListBox.SelectedItemEventArgs">
            <summary>
            The event args used when the selected item changes.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ListBox.SelectedItemEventArgs.Item">
            <summary>
            The item selected.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.SelectedItemEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of this type with the specified item.
            </summary>
            <param name="item">The selected item from the list.</param>
        </member>
        <member name="E:SadConsole.UI.Controls.ListBox.SelectedItemChanged">
            <summary>
            An event that triggers when the <see cref="P:SadConsole.UI.Controls.ListBox.SelectedItem"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ListBox.SelectedItemReselected">
            <summary>
            An event that triggers when the <see cref="P:SadConsole.UI.Controls.ListBox.SelectedItem"/> property is reselected by the mouse.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ListBox.SelectedItemExecuted">
            <summary>
            An event that triggers when an item is double clicked or the Enter key is pressed while the listbox has focus.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.IsScrollBarVisible">
            <summary>
            Internal use only; used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.ScrollBar">
            <summary>
            The scroll bar control used with this list box.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.ItemIndexMouseOver">
            <summary>
            Used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.VisibleItemsTotal">
            <summary>
            The total items visible in the listbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.VisibleItemsMax">
            <summary>
            The maximum amount of items that can be shown in the listbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.CompareByReference">
            <summary>
            When the <see cref="P:SadConsole.UI.Controls.ListBox.SelectedItem"/> changes, and this property is true, objects will be compared by reference. If false, they will be compared by value.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.SingleClickItemExecute">
            <summary>
            When set to <see langword="true"/>, the <see cref="E:SadConsole.UI.Controls.ListBox.SelectedItemExecuted"/> event will fire when an item is single-clicked instead of double-clicked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.Items">
            <summary>
            The items in the listbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the listbox control with the default theme for the items.
            </summary>
            <param name="width">The width of the listbox.</param>
            <param name="height">The height of the listbox.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.#ctor(System.Int32,System.Int32,SadConsole.UI.Controls.ListBoxItemTheme)">
            <summary>
            Creates a new instance of the listbox control with the specified item theme.
            </summary>
            <param name="width">The width of the listbox.</param>
            <param name="height">The height of the listbox.</param>
            <param name="itemTheme">The theme to use with rendering the listbox items.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnSelectedItemChanged">
            <summary>
            Invokes the <see cref="E:SadConsole.UI.Controls.ListBox.SelectedItemChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnItemAction">
            <summary>
            Invokes the <see cref="E:SadConsole.UI.Controls.ListBox.SelectedItemExecuted"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnResized">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.SetupScrollBar(SadConsole.Orientation,System.Int32,SadRogue.Primitives.Point)">
            <summary>
            Configures the associated <see cref="P:SadConsole.UI.Controls.ListBox.ScrollBar"/>.
            </summary>
            <param name="orientation">The orientation of the scrollbar.</param>
            <param name="sizeValue">The size of the scrollbar.</param>
            <param name="position">The position of the scrollbar.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.ScrollToSelectedItem">
            <summary>
            Scrolls the list to the item currently selected.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.GetItemAndIndexUnderMouse(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Returns the item under the mouse, and its array position.
            </summary>
            <param name="state">The mouse state.</param>
            <returns>A tuple containing the item and the item's array position.</returns> 
            <exception cref="T:System.Exception">Thrown when the theme for the listbox isn't based on ListBoxTheme.</exception>
        </member>
        <member name="F:SadConsole.UI.Controls.ListBox._reconfigureScrollBar">
            <summary>
            Internal flag to indicate the scroll bar needs to be reconfigured.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.BorderTheme">
            <summary>
            The drawing theme for the border when <see cref="P:SadConsole.UI.Controls.ListBox.DrawBorder"/> is true.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.BorderLineStyle">
            <summary>
            The line style for the border when <see cref="P:SadConsole.UI.Controls.ListBox.DrawBorder"/> is true.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.DrawBorder">
            <summary>
            If false the border will not be drawn.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.ItemTheme">
            <summary>
            The appearance of the items displayed by the listbox control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBox.ItemsArea">
            <summary>
            The area on the control where items are drawn.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.SetupScrollBar">
            <summary>
            Sets up the scroll bar for the listbox.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.ShowHideScrollBar">
            <summary>
            Shows the scroll bar when there are too many items to display; otherwise, hides it.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBox.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.ListBoxItemTheme">
            <summary>
            A generic theme for a <see cref="T:SadConsole.UI.Controls.ListBox"/> item.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBoxItemTheme.UseColoredStringBackground">
            <summary>
            Gets or sets a value to allow printing the background of a colored string. When <see langword="false"/>, the control state background is used.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBoxItemTheme.RefreshTheme(SadConsole.UI.Colors)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBoxItemTheme.Draw(SadConsole.UI.Controls.ControlBase,SadRogue.Primitives.Rectangle,System.Object,SadConsole.UI.Controls.ControlStates)">
            <summary>
            Draws the <paramref name="item"/> in the specified <paramref name="area"/> of the listbox.
            </summary>
            <param name="control">The control containing a surface to draw on.</param>
            <param name="area">The area to draw the item.</param>
            <param name="item">The item object.</param>
            <param name="itemState">The state of the item.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBoxItemTheme.Clone">
            <summary>
            Creates a copy of this theme.
            </summary>
            <returns>A new theme object.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.ListBoxItemColorTheme">
            <summary>
            A theme for a <see cref="T:SadConsole.UI.Controls.ListBox"/> that displays a <see cref="T:SadRogue.Primitives.Color"/> object.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ListBoxItemColorTheme.UseSingleCharacterForBox">
            <summary>
            When <see langword="false"/>, colored boxes used when drawing the color for (Color, string) tuple will use two characters; otherwise <see langword="true"/> and only one character is used.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ListBoxItemColorTheme.Draw(SadConsole.UI.Controls.ControlBase,SadRogue.Primitives.Rectangle,System.Object,SadConsole.UI.Controls.ControlStates)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Controls.ListBoxItemColorTheme.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.UI.Controls.NumberBox">
            <summary>
            InputBox control that allows text input.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.NumberBox._allowDecimalPoint">
            <summary>
            Indicates that the input box (when numeric) will accept decimal points.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.AllowDecimal">
            <summary>
            Gets or sets whether or not this input box should restrict numeric input should allow a decimal point.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.NumberMaximum">
            <summary>
            The maximum number that can be set for this text box.
            </summary>
            <remarks>
            Set both <see cref="P:SadConsole.UI.Controls.NumberBox.NumberMaximum"/> and <see cref="P:SadConsole.UI.Controls.NumberBox.NumberMinimum"/> to 0 to disable number bounds checking.
            </remarks>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.NumberMinimum">
            <summary>
            The minimum number that can be set for this text box.
            </summary>
            <remarks>
            Set both <see cref="P:SadConsole.UI.Controls.NumberBox.NumberMaximum"/> and <see cref="P:SadConsole.UI.Controls.NumberBox.NumberMinimum"/> to 0 to disable number bounds checking.
            </remarks>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.DefaultValue">
            <summary>
            The default value to use when the current value is invalid and <see cref="P:SadConsole.UI.Controls.NumberBox.AllowDecimal"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.DefaultDecimalValue">
            <summary>
            The default value to use when the current value is invalid and <see cref="P:SadConsole.UI.Controls.NumberBox.AllowDecimal"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.ShowUpDownButtons">
            <summary>
            When true, displays up and down buttons at the end of the box.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.UpButtonStep">
            <summary>
            Sets the up button's value step.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.DownButtonStep">
            <summary>
            Sets the down button's value step.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.UpButtonStepDecimal">
            <summary>
            Sets the up button's value step when <see cref="P:SadConsole.UI.Controls.NumberBox.AllowDecimal"/> is on.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.DownButtonStepDecimal">
            <summary>
            Sets the down button's value step when <see cref="P:SadConsole.UI.Controls.NumberBox.AllowDecimal"/> is on.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.IsEditingNumberInvalid">
            <summary>
            When <see langword="true"/>, indicates that the number is either out of bounds of the <see cref="P:SadConsole.UI.Controls.NumberBox.NumberMinimum"/> and <see cref="P:SadConsole.UI.Controls.NumberBox.NumberMaximum"/> range, or it can't be property parsed. Otherwise, <see langword="false"/>
            </summary>
            <remarks>
            Used by the theme system.
            </remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the input box.
            </summary>
            <param name="width">The width of the input box.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.IncreaseNumber(System.Int64)">
            <summary>
            Increases the number stored in the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property by the specified amount.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.IncreaseNumber(System.Double)">
            <summary>
            Increases the number stored in the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property by the specified amount.
            </summary>
            <param name="amount">The amount.</param>
            <exception cref="T:System.Exception">Thrown when this method is used and the <see cref="P:SadConsole.UI.Controls.NumberBox.AllowDecimal"/> property is set to false.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.DecreaseNumber(System.Int64)">
            <summary>
            Decreases the number stored in the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property by the specified amount.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.DecreaseNumber(System.Double)">
            <summary>
            Decreases the number stored in the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property by the specified amount.
            </summary>
            <param name="amount">The amount.</param>
            <exception cref="T:System.Exception">Thrown when this method is used and the <see cref="P:SadConsole.UI.Controls.NumberBox.AllowDecimal"/> property is set to false.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.OnFocused">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.OnUnfocused">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.TextAsLong">
            <summary>
            Returns the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property as parsed by <see cref="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)"/> with the current culture.
            </summary>
            <returns>The parsed text value.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.TextAsDouble">
            <summary>
            Returns the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property as parsed by <see cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/> with the current culture.
            </summary>
            <returns>The parsed text value.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.OnResized">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.GetCultureDecimalSeperator">
            <summary>
            Gets the current culture's decimal separator.
            </summary>
            <returns>The current culture.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.GetCulture">
            <summary>
            Returns the current culture.
            </summary>
            <returns>The current culture.</returns>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.State_IsMouseOverUpButton">
            <summary>
            Used by the mouse logic.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.State_IsMouseOverDownButton">
            <summary>
            Used by the mouse logic.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.NumberBoxInvalidNumberForeground">
            <summary>
            The color to use with a <see cref="T:SadConsole.UI.Controls.NumberBox"/> control when <see cref="P:SadConsole.UI.Controls.NumberBox.IsEditingNumberInvalid"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.UpButtonGlyph">
            <summary>
            The glyph for the up button.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.NumberBox.DownButtonGlyph">
            <summary>
            The glyph for the down button.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.NumberBox.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.Panel">
            <summary>
            A control container that processes the mouse on each child. <see cref="P:SadConsole.UI.Controls.ControlBase.TabStop"/> defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.Item(System.Int32)">
            <summary>
            Gets or sets a control in the collection of controls.
            </summary>
            <param name="index">The index of the control.</param>
            <returns>The control at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index doesn't exist in the collection.</exception>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Clear">
            <summary>
            Removes all controls.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Add(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Remove(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.RemoveAt(System.Int32)">
            <summary>
            Removes a control at the specified index.
            </summary>
            <param name="index">The index of the control to remove.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.IndexOf(SadConsole.UI.Controls.ControlBase)">
            <summary>
            Returns the index of the specified control.
            </summary>
            <param name="control">The control to search for.</param>
            <returns>The index of the control.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Insert(System.Int32,SadConsole.UI.Controls.ControlBase)">
            <summary>
            Inserts the control at the specified index.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="control">The control to insert.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.Contains(SadConsole.UI.Controls.ControlBase)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.CopyTo(SadConsole.UI.Controls.ControlBase[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.OnMouseExit(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.OnIsDirtyChanged">
            <summary>
            When <see cref="P:SadConsole.UI.Controls.ControlBase.IsDirty"/> is set to <see langword="true"/>, changes the child controls to also be dirty.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.HasNamedControl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.HasNamedControl(System.String,SadConsole.UI.Controls.ControlBase@)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.GetNamedControl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the controls in this panel.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates over the controls in this panel.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.UseNormalStateOnly">
            <summary>
            When true, only uses <see cref="P:SadConsole.UI.ThemeStates.Normal"/> for drawing.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.SkipDrawing">
            <summary>
            When true, ignores all states and doesn't draw anything.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.DrawBorder">
            <summary>
            When <see langword="true"/>, indicates that the theme should draw along the inner bounds of the panel.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.UseExtendedBorderGlyphs">
            <summary>
            When <see langword="true"/>, indicates that the lines of the theme should use the extended SadConsole font characters if available.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.UseInsetBorder">
            <summary>
            When <see langword="true"/>, indicates that the border colors should make it appear like the border is inset.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.Panel.Appearance">
            <summary>
            The current Appearance based on the control state.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.Panel.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.ProgressBar">
            <summary>
            A control that fills an area (vertical or horizontal) according to a value.
            </summary>
            <summary>
            The theme of a radio button 
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ProgressBar.ProgressChanged">
            <summary>
            Called when the <see cref="P:SadConsole.UI.Controls.ProgressBar.Progress"/> property value changes.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.progressValue">
            <summary>
            The progress bar fill value. Between 0f and 1f.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.controlSize">
            <summary>
            The size of the bar.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.fillSize">
            <summary>
            For theme use only. The size of the bar currently filled based on the <see cref="P:SadConsole.UI.Controls.ProgressBar.Progress"/> property.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.isHorizontal">
            <summary>
            Flag to indicate this bar was created horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.horizontalAlignment">
            <summary>
            The alignment if the bar is horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ProgressBar.verticalAlignment">
            <summary>
            The alignment if the bar is vertical.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayText">
            <summary>
            An optional text to display on the bar. If set to <c>"%"</c>, displays the percentage of the progress.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayTextAlignment">
            <summary>
            Alignment to print the <see cref="P:SadConsole.UI.Controls.ProgressBar.DisplayText"/>. <see cref="F:SadConsole.HorizontalAlignment.Stretch"/> is invalid for the property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.HorizontalAlignment">
            <summary>
            The horizontal orientation used when <see cref="P:SadConsole.UI.Controls.ProgressBar.IsHorizontal"/> is set to true.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:SadConsole.HorizontalAlignment.Center"/> or <see cref="F:SadConsole.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.VerticalAlignment">
            <summary>
            The vertical orientation used when <see cref="P:SadConsole.UI.Controls.ProgressBar.IsHorizontal"/> is set to false.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the value is set to either <see cref="F:SadConsole.VerticalAlignment.Center"/> or <see cref="F:SadConsole.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.IsHorizontal">
            <summary>
            When true, the progress bar uses the <see cref="P:SadConsole.UI.Controls.ProgressBar.HorizontalAlignment"/> property to determine the starting fill direction. When false, uses the <see cref="P:SadConsole.UI.Controls.ProgressBar.VerticalAlignment"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.Progress">
            <summary>
            Gets or sets the value of the scrollbar between the minimum and maximum values.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.#ctor(System.Int32,System.Int32,SadConsole.HorizontalAlignment)">
            <summary>
            Creates a new horizontal progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="horizontalAlignment">Sets the control to be horizontal, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="horizontalAlignment"/> is set to either <see cref="F:SadConsole.HorizontalAlignment.Center"/> or <see cref="F:SadConsole.HorizontalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.#ctor(System.Int32,System.Int32,SadConsole.VerticalAlignment)">
            <summary>
            Creates a new vertical progress bar.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="verticalAlignment">Sets the control to be vertical, starting from the specified side. Center/Stretch is invalid.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="verticalAlignment"/> is set to either <see cref="F:SadConsole.VerticalAlignment.Center"/> or <see cref="F:SadConsole.VerticalAlignment.Stretch"/>.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.ThemeStateBar">
            <summary>
            The theme of the progressed part of the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayTextStates">
            <summary>
            The theme of the text displayed on the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.BackgroundGlyph">
            <summary>
            The glyph to use when drawing the unfilled part of the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.BarGlyph">
            <summary>
            The glyph to use when drawing the filled part of the bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.DisplayTextColor">
            <summary>
            The color to print the <see cref="P:SadConsole.UI.Controls.ProgressBar.DisplayText"/> string.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.BarColor">
            <summary>
            The color to print the filled part of the progress bar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ProgressBar.PrintDisplayAsDecorator">
            <summary>
            When <see langword="true"/>, prints the <see cref="P:SadConsole.UI.Controls.Label.DisplayText"/> on the control in decorators instead of replacing the portation of the bar that overlaps the text.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ProgressBar.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.RadioButton">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.GroupName">
            <summary>
            The group of the radio button. All radio buttons with the same group name will work together to keep one radio button selected at a time.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new radio button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.#ctor(System.String)">
            <summary>
            Creates an auto sizing radio button control with the specified text.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.OnClick">
            <summary>
            Performs a click on the base button and also toggles the <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.OnIsSelected">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.ToggleButtonBase.IsSelectedChanged"/> event and when <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> is <see langword="true"/>, deselects any other <see cref="T:SadConsole.UI.Controls.RadioButton"/> with the same <see cref="P:SadConsole.UI.Controls.RadioButton.GroupName"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.LeftBracketGlyph">
            <summary>
            The glyph for the left-side bracket of the icon.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.RightBracketGlyph">
            <summary>
            The glyph for the right-side bracket of the icon.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.CheckedIconGlyph">
            <summary>
            The glyph of the icon when checked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.UncheckedIconGlyph">
            <summary>
            The glyph of the icon when unchecked.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.CheckedIconColor">
            <summary>
            An optional color of the <see cref="P:SadConsole.UI.Controls.RadioButton.CheckedIconGlyph"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.UncheckedIconColor">
            <summary>
            An optional color of the <see cref="P:SadConsole.UI.Controls.RadioButton.UncheckedIconGlyph"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.BracketsThemeState">
            <summary>
            The theme state used with the brackets.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.RadioButton.IconThemeState">
            <summary>
            The theme state used with the icon of the 
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.RadioButton.CreateControlSurface">
            <summary>
            Resizes the control surface based on <see cref="P:SadConsole.UI.Controls.ButtonBase.AutoSize"/> or the <see cref="P:SadConsole.UI.Controls.ControlBase.Width"/> and <see cref="P:SadConsole.UI.Controls.ControlBase.Height"/> properties.
            </summary>
            <returns>The control's surface.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.ScrollBar">
            <summary>
            Represents a scrollbar control.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ScrollBar.ValueChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> property changes.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Orientation">
            <summary>
            Indicates if the slider is horizontal or vertical.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.IsGripped">
            <summary>
            When true, indicates that the mouse is gripping the slider to scroll.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.MaximumValue">
            <summary>
            Gets or sets the maximum value for the scrollbar.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.ArrowStep">
            <summary>
            Gets or sets the amount of values to add or subtract to the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> when the up or down arrows are used.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.MouseWheelStep">
            <summary>
            Gets or sets the amount of values to add or subtract to the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> when the up or down arrows are used.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Value">
            <summary>
            Gets or sets the value of the slider between the minimum and maximum values.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.ArrowsMoveGrip">
            <summary>
            When true, the arrow buttons simply move the grip instead of using the <see cref="P:SadConsole.UI.Controls.ScrollBar.ArrowStep"/> value to adjust the value.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.MouseWheelMovesGrip">
            <summary>
            When true, the mouse wheelsimply moves the grip instead of using the <see cref="P:SadConsole.UI.Controls.ScrollBar.MouseWheelStep"/> value to adjust the value.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.#ctor(SadConsole.Orientation,System.Int32)">
            <summary>
            Creates a new Slider control
            </summary>
            <param name="orientation">Sets the control to either horizontal or vertical.</param>
            <param name="size">The height or width of the control, based on the <paramref name="orientation"/>, with a thickness of 1.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Size of the control must be 2 or more</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.#ctor(SadConsole.Orientation,System.Int32,System.Int32)">
            <summary>
            Creates a new Slider control with the specified width and height.
            </summary>
            <param name="orientation">Sets the control to either horizontal or vertical.</param>
            <param name="width">The width the control.</param>
            <param name="height">The height of the control.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">With a horizontal Slider, width must be 2 or more. With a vertical Slider, height must be 2 or more.</exception>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.OnValueChanged">
            <summary>
            Invokes the <see cref="E:SadConsole.UI.Controls.ScrollBar.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.CalculateGripSize">
            <summary>
            Sets the bar and grip sizes of the control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.SetGripToValue">
            <summary>
            Moves the grip position based on the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.OnResized">
            <summary>
            Resizes the control and recalculates the grip size.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.SetValue(System.Int32,System.Boolean)">
            <summary>
            Sets the value of the control without using the <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/> property. Optionally calls <see cref="M:SadConsole.UI.Controls.ScrollBar.SetGripToValue"/>.
            </summary>
            <param name="value">The value to set.</param>
            <param name="setGrip">Moves the grip when true.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.IncreaseValue(System.Int32)">
            <summary>
            Increases the value by the specified amount.
            </summary>
            <param name="value">The value to add to <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/>.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.DecreaseValue(System.Int32)">
            <summary>
            Decreases the value by the specified amount.
            </summary>
            <param name="value">The value to subract from <see cref="P:SadConsole.UI.Controls.ScrollBar.Value"/>.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.IncreaseGripByOne">
            <summary>
            Increases the grip position by one and sets the value.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.DecreaseGripByOne">
            <summary>
            Decreases the grip position by one and sets the value.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.ProcessMouseWheel(SadConsole.Input.MouseScreenObjectState)">
            <summary>
            Processes the mouse wheel values regardless of if the mouse is over the scrollbar or not.
            </summary>
            <param name="state">The mouse state.</param>
            <returns>True if the mouse wheel was processed.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.Style">
            <summary>
            The style applied to drawing the control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.ScrollBar.ThemeStyle">
            <summary>
            The drawing code for the scrollbar
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.StartButtonVerticalGlyph">
            <summary>
            The glyph for the start button when the control is vertical.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.EndButtonVerticalGlyph">
            <summary>
            The glyph for the end button when the control is vertical.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.StartButtonHorizontalGlyph">
            <summary>
            The glyph for the start button when the control is horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.EndButtonHorizontalGlyph">
            <summary>
            The glyph for the end button when the control is horizontal.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.BarGlyph">
            <summary>
            The glyph for the scroll bar bar where the slider is not located.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.GripGlyph">
            <summary>
            The glyph for the scroll bar icon.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.BarSize">
            <summary>
            The size of the bar area. Calculated automatically by the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.GripSize">
            <summary>
            The size of the grip. Calculated automatically by the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.GripStart">
            <summary>
            The cell the grip starts at. Calculated automatically by the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ScrollBar.ThemeStyle.GripEnd">
            <summary>
            The cell the grip ends at. Calculated automatically by the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.IsMouseOverUpButton">
            <summary>
            Indicates that the mouse is above the up arrow button. Calculated automatically by the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.IsMouseOverDownButton">
            <summary>
            Indicates that the mouse is above the down arrow button. Calculated automatically by the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.IsMouseOverGripper">
            <summary>
            Indicates that the mouse is above the gripper. Calculated automatically by the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.ScrollBar.ThemeStyle.IsMouseOverBar">
            <summary>
            Indicates that the mouse is not above the empty part of the bar. Calculated automatically by the control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ScrollBar.ThemeStyle.UpdateAndRedraw(SadConsole.UI.Controls.ScrollBar,System.TimeSpan)">
            <summary>
            Redraws the control.
            </summary>
            <param name="control">The control instance.</param>
            <param name="time">Time of the update frame.</param>
        </member>
        <member name="T:SadConsole.UI.Controls.SelectionButton">
            <summary>
            Provides a button-like control that changes focus to a designated previous or next selection button when the arrow keys are pushed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SelectionButton.PreviousSelection">
            <summary>
            The selection button to focus when the UP key is pressed or the SelectPrevious() method is called.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SelectionButton.NextSelection">
            <summary>
            The selection button to focus when the DOWN key is pressed or the SelectNext() method is called.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Selection Button with a specific width and height.
            </summary>
            <param name="width">The width of the selection button.</param>
            <param name="height">The height of the selection button.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.SetNextSelection(SadConsole.UI.Controls.SelectionButton@,System.Boolean)">
            <summary>
            Sets the next selection button and optionally sets the previous of the referenced selection to this button.
            </summary>
            <param name="nextSelection">The selection button to be used as next.</param>
            <param name="setPreviousOnNext">Sets the PreviousSelection property on the <paramref name="nextSelection"/> instance to current selection button. Defaults to true.</param>
            <returns>The button that was passed to the <paramref name="nextSelection"/> parameter.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Focuses the previous or next selection button depending on if the UP or DOWN arrow keys were pressed.
            </summary>
            <param name="info">The keyboard state.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.SelectPrevious">
            <summary>
            Selects the previous selection button.
            </summary>
            <returns>Returns the previous selection button.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.SelectionButton.SelectNext">
            <summary>
            Selects the next selection button.
            </summary>
            <returns>Returns the next selection button.</returns>
        </member>
        <member name="T:SadConsole.UI.Controls.SurfaceViewer">
            <summary>
            Draws a <see cref="T:SadConsole.ICellSurface"/> within an area. Optionally supports scroll bars.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes">
            <summary>
            Determines how the control draws the scroll bars.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes.Always">
            <summary>
            Always draw the scroll bars on the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes.Never">
            <summary>
            Never show the scroll bars on the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.ScrollBarModes.AsNeeded">
            <summary>
            Display the scroll bars if needed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SurfaceViewer.ScrollBarMode">
            <summary>
            Sets the visual behavior of the scroll bars for the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.SurfaceViewer.SurfaceSerialized">
            <summary>
            Ensures the base class <see cref="P:SadConsole.UI.Controls.ControlBase.Surface"/> property is serialized when this control is serialized.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.HorizontalScroller">
            <summary>
            The horizontal scroll bar. This shouldn't be changed.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.SurfaceViewer.VerticalScroller">
            <summary>
            The vertical scroll bar. This shouldn't be changed.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.#ctor(System.Int32,System.Int32,SadConsole.ICellSurface)">
            <summary>
            Creates a new drawing surface control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="surface">The surface to view.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.ResetSurface">
            <summary>
            Resets the control's surface to a 1x1 surface transparent surface.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.OnSurfaceChanged(SadConsole.ICellSurface,SadConsole.ICellSurface)">
            <summary>
            Handles and dehandles the <see cref="E:SadConsole.ICellSurface.IsDirtyChanged"/> event for the backing surface.
            </summary>
            <param name="oldSurface">The previous surface instance.</param>
            <param name="newSurface">The new surface instance.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.SurfaceViewer.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.TabControl">
            <summary>
            A control with tabs along the edge of the control. Each tab sets the content of the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.InvalidActiveTabIndex">
            <summary>
            The index used when there isn't an active tab.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TabControl.ActiveTabItemChanged">
            <summary>
            Raised when the active tab changes.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.CachedMousePosition">
            <summary>
            The mouse position recorded from the last time the mouse was over the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.TabItems">
            <summary>
            The list of tab items displayed by the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.Tabs">
            <summary>
            Gets a list of tabs in this control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.ActiveTabIndex">
            <summary>
            The index of the active tab. If <see cref="F:SadConsole.UI.Controls.TabControl.InvalidActiveTabIndex"/> is returned, there is no active tab.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.CurrentTab">
            <summary>
            Retursn the current tab.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.TabOrientation">
            <summary>
            Sets the position of the tab strip to the top or bottom of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.ConnectedLineStyle">
            <summary>
            An array of glyphs indexed by <see cref="T:SadConsole.ICellSurface.ConnectedLineIndex"/>. Defaults to <see cref="P:SadConsole.ICellSurface.ConnectedLineThin"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabControl.Item(System.Int32)">
            <summary>
            Gets or sets the tab item at the specified index.
            </summary>
            <param name="index">The index of the tab item to get or set.</param>
            <returns>The tab item content.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.#ctor(System.Collections.Generic.IEnumerable{SadConsole.UI.Controls.TabItem},System.Int32,System.Int32)">
            <summary>
            Creates a new tab control with the specified tab items.
            </summary>
            <param name="tabItems">Tabs that are present on the tabcontrol</param>
            <param name="width">Width of the content area</param>
            <param name="height">Heigh of the content area</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.#ctor(System.Collections.Generic.IEnumerable{SadConsole.UI.Controls.TabItem},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new tab control with the specified tab items.
            </summary>
            <param name="tabItems">Tabs that are present on the tabcontrol</param>
            <param name="activeTabIndex">What tab to be active on initialization</param>
            <param name="width">Width of the content area</param>
            <param name="height">Heigh of the content area</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.AddTab(SadConsole.UI.Controls.TabItem)">
            <summary>
            Adds a tab to the control.
            </summary>
            <param name="tab">TabItem with header and associated console for tab content</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.AddTab(System.String,SadConsole.UI.Controls.Panel)">
            <summary>
            Creates and adds a tab to the control.
            </summary>
            <param name="header">The header of the new tab.</param>
            <param name="content">Associated content for the new tab.</param>
            <returns>The new tab item.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.RemoveTab(SadConsole.UI.Controls.TabItem)">
            <summary>
            Removes a tab from the control.
            </summary>
            <param name="tab">TabItem that should be removed</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.RemoveTab(System.Int32)">
            <summary>
            Removes a tab by index.
            </summary>
            <param name="index">The index of the tab to remove.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.SetActiveTab(System.Int32)">
            <summary>
            Sets the tab specified by the <paramref name="index"/> as active.
            </summary>
            <param name="index">Index of the tab.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.OnActiveTabItem(System.Int32,System.Int32)">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.TabControl.ActiveTabItemChanged"/> event.
            </summary>
            <param name="previousActiveIndex">The tab index of the previous item.</param>
            <param name="activeIndex">The index of the active tab.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.GetTabIndex(SadConsole.UI.Controls.TabItem)">
            <summary>
            Gets the index of a tab
            </summary>
            <param name="tab">Tab you need the index of</param>
            <returns>0 based index of the tab</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.ContainsTab(SadConsole.UI.Controls.TabItem)">
            <summary>
            Determines whether a tab is contained in this control.
            </summary>
            <param name="tab">The tab to check.</param>
            <returns>Returns <see langword="true"/> when the tab is in the control; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.SelectNextTab">
            <summary>
            Sets the next tab as active. Stops at the last tab.
            </summary>
            <returns>Returns <see langword="true"/> when the active tab changes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.SelectPreviousTab">
            <summary>
            Sets the previous tab as active. Stops at the first tab.
            </summary>
            <returns>Returns <see langword="true"/> when the active tab changes; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.OnMouseIn(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.OnResized">
            <summary>
            Resizes the tab item.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.ContentRegion">
            <summary>
            The region of the control where a tab item's content should be displayed.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.TabsRegion">
            <summary>
            The region of the control where a tab headers should be displayed.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.ThemeDetermineContentRegion">
            <summary>
            Sets the <see cref="F:SadConsole.UI.Controls.TabControl.ContentRegion"/> rectangle to how much space the tab control should give to tab item content.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.TabControl.Orientation">
            <summary>
            Horizontal alignment modes
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.Orientation.Top">
            <summary>
            Tabs should be placed at the top of the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.Orientation.Bottom">
            <summary>
            Tabs should be placed at the bottom of the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.Orientation.Left">
            <summary>
            Tabs should be placed to the left of the control.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TabControl.Orientation.Right">
            <summary>
            Tabs should be placed to the right of the control.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TabControl.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.TabItem">
            <summary>
            Contains the header and content of a tab for the <see cref="T:SadConsole.UI.Controls.TabControl"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.Header">
            <summary>
            Display text of the header. Also functions as the access key
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.ThemeHeaderStates">
            <summary>
            Temporary variable holding the theme state of the tab item header.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.ThemeHeaderArea">
            <summary>
            Temporary variable holding where on the tab control the header is drawn.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.ThemeHeaderMouseArea">
            <summary>
            Temporary variable holding where on the tab control the mouse is tracked for this header.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.Content">
            <summary>
            The content of this tab item.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.TabSize">
            <summary>
            The size in cells to allocate for displaying the header. <code>-1</code> indicates that the tab should be automatically sized to fit the size of the <see cref="P:SadConsole.UI.Controls.TabItem.Header"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.AutomaticPadding">
            <summary>
            Padding to add around the <see cref="P:SadConsole.UI.Controls.TabItem.Header"/> text when <see cref="P:SadConsole.UI.Controls.TabItem.TabSize"/> is unset (-1).
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TabItem.TextAlignment">
            <summary>
            If <see cref="P:SadConsole.UI.Controls.TabItem.TabSize"/> is any value other than <code>-1</code>, the <see cref="P:SadConsole.UI.Controls.TabItem.Header"/> is aligned according to this property.
            </summary>
            <value></value>
        </member>
        <member name="M:SadConsole.UI.Controls.TabItem.#ctor(System.String,SadConsole.UI.Controls.Panel)">
            <summary>
            Creates a new tab item with the specified header as a colored string, and sets the content for the tab.
            </summary>
            <param name="header">The header to display on this tab item.</param>
            <param name="content">The panel content to display for this tab.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="header"/> value is an empty string.</exception>
        </member>
        <member name="T:SadConsole.UI.Controls.TextBox">
            <summary>
            InputBox control that allows text input.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._cachedBuilder">
            <summary>
            String builder used while processing text in the <see cref="M:SadConsole.UI.Controls.TextBox.ProcessKeyboard(SadConsole.Input.Keyboard)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.Mask">
            <summary>
            Mask input with a certain character.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.LeftDrawOffset">
            <summary>
            When editing the text box, this allows the text to scroll to the right so you can see what you are typing.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._caretPos">
            <summary>
            The location of the caret.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Controls.TextBox._text">
            <summary>
            The text value of the input box.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.TextChanged">
            <summary>
            Raised when the text has changed and the preview has accepted it.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.TextChangedPreview">
            <summary>
            Raised before the text has changed and allows the change to be cancelled.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.KeyPressed">
            <summary>
            Raised when a key is pressed on the textbox.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.TextBox.TextValidated">
            <summary>
            Raised when the <see cref="P:SadConsole.UI.Controls.TextBox.Validator"/> validates the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.DisableMouse">
            <summary>
            Disables mouse input.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.DisableKeyboard">
            <summary>
            Disables the keyboard which turns off keyboard input and hides the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.MaxLength">
            <summary>
            How big the text can be. Setting this to 0 will make it unlimited.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.Validator">
            <summary>
            When set, validates the <see cref="P:SadConsole.UI.Controls.TextBox.Text"/> property after <see cref="E:SadConsole.UI.Controls.TextBox.TextChangedPreview"/> has allowed the result.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.CaretPosition">
            <summary>
            Gets or sets the position of the caret in the current text.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.Text">
            <summary>
            Gets or sets the text of the input box.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the input box.
            </summary>
            <param name="width">The width of the input box.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.Resize(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.ValidateCursorPosition(System.String)">
            <summary>
            Correctly positions the cursor within the text.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.CheckKeyPressCancel(SadConsole.Input.AsciiKey)">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.TextBox.KeyPressed"/> event and returns <see langword="true"/> if the keypress was cancelled.
            </summary>
            <param name="key">The key to use with the event.</param>
            <returns><see langword="true"/> to indicate that the keypress should be considered cancelled.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called when the control should process keyboard information.
            </summary>
            <param name="info">The keyboard information.</param>
            <returns>True if the keyboard was handled by this control.</returns>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.OnUnfocused">
            <summary>
            Called when the control loses focus.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.OnFocused">
            <summary>
            Called when the control is focused.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.OnLeftMouseClicked(SadConsole.UI.Controls.ControlBase.ControlMouseState)">
            <summary>
            Focuses the control and enters typing mode.
            </summary>
            <param name="state">The mouse state.</param>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.CaretEffect">
            <summary>
            The style to use for the carrot.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.UseDifferentTextAreaWidth">
            <summary>
            Enables displaying the text area at a different width than the width of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.TextBox.TextAreaWidth">
            <summary>
            The width to display the text area at when <see cref="P:SadConsole.UI.Controls.TextBox.UseDifferentTextAreaWidth"/> is true.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.TextBox.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.Controls.ToggleButtonBase">
            <summary>
            Base class for toggle button controls, such as <see cref="T:SadConsole.UI.Controls.CheckBox"/> and <see cref="T:SadConsole.UI.Controls.RadioButton"/>.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Controls.ToggleButtonBase.IsSelectedChanged">
            <summary>
            Raised when the selected state of the radio button is changed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected">
            <summary>
            Gets or sets the selected state of the radio button.
            </summary>
            <remarks>Radio buttons within the same group will set their IsSelected property to the opposite of this radio button when you set this property.</remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleButtonBase.OnIsSelected">
            <summary>
            Raises the <see cref="E:SadConsole.UI.Controls.ToggleButtonBase.IsSelectedChanged"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleButtonBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of the button control with the specified width and height.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control (default is 1).</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleButtonBase.#ctor">
            <summary>
            Creates an automatically sized button.
            </summary>
        </member>
        <member name="T:SadConsole.UI.Controls.ToggleSwitch">
            <summary>
            Represents a button that can be toggled on/off within a group of other buttons.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleSwitch.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new checkbox control with the specified width and height.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleSwitch.OnClick">
            <summary>
            Perfroms a click on the base button and also toggles the <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleSwitch.OnGlyph">
            <summary>
            The on glyph of the switch.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleSwitch.BackgroundGlyph">
            <summary>
            The background glyph of the switch.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleSwitch.OnGlyphColor">
            <summary>
            The color of the <see cref="P:SadConsole.UI.Controls.ToggleSwitch.OnGlyph"/> when the control is <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> is true.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleSwitch.OffGlyphColor">
            <summary>
            The color of the <see cref="P:SadConsole.UI.Controls.ToggleSwitch.OnGlyph"/> when the control is <see cref="P:SadConsole.UI.Controls.ToggleButtonBase.IsSelected"/> is false.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleSwitch.SwitchThemeState">
            <summary>
            The theme state used for the switch.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Controls.ToggleSwitch.SwitchOrientation">
            <summary>
            The orientation of the toggle switch relative to the text.
            </summary>
            <remarks>
            Valid values are <see cref="F:SadConsole.HorizontalAlignment.Left"/> and <see cref="F:SadConsole.HorizontalAlignment.Right"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleSwitch.RefreshThemeStateColors(SadConsole.UI.Colors)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Controls.ToggleSwitch.UpdateAndRedraw(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.UI.KeyPressEventArgs">
            <summary>
            Event arguments to indicate that a key is being pressed on a control that allows keyboard key cancelling.
            </summary>
        </member>
        <member name="F:SadConsole.UI.KeyPressEventArgs.Key">
            <summary>
            The key being pressed by the textbox.
            </summary>
        </member>
        <member name="P:SadConsole.UI.KeyPressEventArgs.IsCancelled">
            <summary>
            When set to <see langword="true"/>, causes the textbox to cancel the key press.
            </summary>
        </member>
        <member name="M:SadConsole.UI.KeyPressEventArgs.#ctor(SadConsole.Input.AsciiKey)">
            <summary>
            Creates a new event args object.
            </summary>
            <param name="key">The key being pressed.</param>
        </member>
        <member name="T:SadConsole.UI.NamedColor">
            <summary>
            A color associated with a name.
            </summary>
            <param name="Name">The name of the color.</param>
            <param name="Color">The color.</param>
        </member>
        <member name="M:SadConsole.UI.NamedColor.#ctor(System.String,SadRogue.Primitives.Color)">
            <summary>
            A color associated with a name.
            </summary>
            <param name="Name">The name of the color.</param>
            <param name="Color">The color.</param>
        </member>
        <member name="P:SadConsole.UI.NamedColor.Name">
            <summary>The name of the color.</summary>
        </member>
        <member name="P:SadConsole.UI.NamedColor.Color">
            <summary>The color.</summary>
        </member>
        <member name="T:SadConsole.UI.NamedColorCollection">
            <summary>
            A collection of named colors
            </summary>
        </member>
        <member name="P:SadConsole.UI.NamedColorCollection.Colors">
            <summary>
            The backing dictionary of colors.
            </summary>
        </member>
        <member name="M:SadConsole.UI.NamedColorCollection.Add(SadConsole.UI.NamedColor)">
            <summary>
            Adds a color to the collection.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SadConsole.UI.NamedColorCollection.#ctor">
            <summary>
            Creates a new instance with the default colors of White and Black.
            </summary>
        </member>
        <member name="M:SadConsole.UI.NamedColorCollection.LoadDefaults">
            <summary>
            Clears the collection of colors and adds White and Black colors.
            </summary>
        </member>
        <member name="M:SadConsole.UI.NamedColorCollection.Load(System.String)">
            <summary>
            Loads a <see cref="P:SadConsole.UI.NamedColorCollection.Colors"/> dictionary from a file, and returns a new instance of the <see cref="T:SadConsole.UI.NamedColorCollection"/> class with those colors.
            </summary>
            <param name="file">The file.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the file isn't found.</exception>
        </member>
        <member name="M:SadConsole.UI.NamedColorCollection.Save(System.String)">
            <summary>
            Saves the <see cref="P:SadConsole.UI.NamedColorCollection.Colors"/> dictionary to a file.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="T:SadConsole.UI.ThemeStates">
            <summary>
            Has the basic appearances of each control state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ThemeStates.Normal">
            <summary>
            The normal appearance of the control.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ThemeStates.Disabled">
            <summary>
            The appearance of the control when it is disabled.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ThemeStates.Focused">
            <summary>
            The appearance of the control when it is focused.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ThemeStates.Selected">
            <summary>
            The appearance of the control when it is in a selected state.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ThemeStates.MouseOver">
            <summary>
            The appearance of the control when the mouse is over it.
            </summary>
        </member>
        <member name="P:SadConsole.UI.ThemeStates.MouseDown">
            <summary>
            THe appearance of the control when a mouse button is held down.
            </summary>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.SetForeground(SadRogue.Primitives.Color)">
            <summary>
            Sets the same foreground color to all theme states.
            </summary>
            <param name="color">The foreground color.</param>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.SetBackground(SadRogue.Primitives.Color)">
            <summary>
            Sets the same background color to all theme states.
            </summary>
            <param name="color">The background color.</param>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.SetGlyph(System.Int32)">
            <summary>
            Sets the same glyph to all theme states.
            </summary>
            <param name="glyph">The glyph.</param>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.SetMirror(SadConsole.Mirror)">
            <summary>
            Sets the same mirror setting to all theme states.
            </summary>
            <param name="mirror">The mirror setting.</param>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.GetStateAppearance(SadConsole.UI.Controls.ControlStates)">
            <summary>
            Gets an appearance defined by this theme from the <paramref name="state" /> parameter.
            </summary>
            <param name="state">The state to check.</param>
            <returns>A cell appearance.</returns>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.GetStateAppearanceNoMouse(SadConsole.UI.Controls.ControlStates)">
            <summary>
            Gets an appearance defined by this theme from the <paramref name="state" /> parameter. Treats mouse related states as normal.
            </summary>
            <param name="state">The state to check.</param>
            <returns>A cell appearance.</returns>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.Clone">
            <summary>
            Performs a deep copy of this theme.
            </summary>
            <returns>A new instance of the theme.</returns>
        </member>
        <member name="M:SadConsole.UI.ThemeStates.RefreshTheme(SadConsole.UI.Colors)">
            <summary>
            Reloads the theme values based on the colors provided.
            </summary>
            <param name="colors">The colors to create the theme with.</param>
        </member>
        <member name="T:SadConsole.UI.Window">
            <summary>
            Represents a windowed controls console.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Window.Closed">
            <summary>
            Raised when the window is closed.
            </summary>
        </member>
        <member name="E:SadConsole.UI.Window.Shown">
            <summary>
            Raised when the window is shown.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.Controls">
            <summary>
            The controls host holding all the controls.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAreaY">
            <summary>
            The Y coordinate of the title drawing area. This can be set to any value > 0 and &lt; the height.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAreaX">
            <summary>
            The X coordinate of the title drawing area. This is automatically set by the theme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAreaLength">
            <summary>
            The width of the title drawing area. This is automatically set by the theme.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.BorderLineStyle">
            <summary>
            The line style for the border.
            </summary>
        </member>
        <member name="F:SadConsole.UI.Window.PreviousMouseLeftButtonDown">
            <summary>
            The mouse state of the previous update frame.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.CellAtDragPosition">
            <summary>
            The position of the cell that the window drag started at.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.PreviousMouseExclusiveDrag">
            <summary>
            Temporary value to hold the state of <see cref="P:SadConsole.IScreenObject.IsExclusiveMouse"/> prior to dragging.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.AddedToParent">
            <summary>
            When <see langword="true"/>, indicates that the window has been added to a parent; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.IsDragging">
            <summary>
            When <see langword="true"/>, indicates that the window is being dragged; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.TitleAlignment">
            <summary>
            Gets or sets the alignment of the window title.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.IsModal">
            <summary>
            Gets the whether or not the window is being shown as modal. 
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.CanDrag">
            <summary>
            Gets or sets whether or not this window can be moved with the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.CloseOnEscKey">
            <summary>
            Gets or sets whether or not this window can be closed when the escape key is pressed.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.DialogResult">
            <summary>
            Gets or set the dialog result status of the window.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.IsModalDefault">
            <summary>
            Indicates that when this window is shown by the <see cref="M:SadConsole.UI.Window.Show"/> method or by setting the <see cref="P:SadConsole.IScreenObject.IsVisible"/> property to true, the window will be shown as modal.
            </summary>
        </member>
        <member name="P:SadConsole.UI.Window.Title">
            <summary>
            Gets or sets the title displayed on the window.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new window.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new window with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the window in cells.</param>
            <param name="height">The visible height of the window in cells.</param>
            <param name="bufferWidth">The total width of the window in cells.</param>
            <param name="bufferHeight">The total height of the window in cells.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyphBase[])">
            <summary>
            Creates a window with the specified width and height, with <see cref="F:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="F:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the window in cells.</param>
            <param name="height">The height of the window in cells.</param>
            <param name="bufferWidth">The total width of the window in cells.</param>
            <param name="bufferHeight">The total height of the window in cells.</param>
            <param name="initialCells">The cells to seed the window with. If <see langword="null"/>, creates the cells for you.</param>
        </member>
        <member name="M:SadConsole.UI.Window.#ctor(SadConsole.ICellSurface,SadConsole.IFont,System.Nullable{SadRogue.Primitives.Point})">
            <summary>
            Creates a new window using the existing surface.
            </summary>
            <param name="surface">The surface.</param>
            <param name="font">The font to use with the surface.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:SadConsole.UI.Window.ProcessMouse(SadConsole.Input.MouseScreenObjectState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.UI.Window.DrawBorder">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.UI.Window.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Processes the keyboard looking for the ESC key press to close the window, if required. Otherwise the base ControlsConsole will process the keyboard.
            </summary>
            <param name="info">Keyboard state.</param>
        </member>
        <member name="M:SadConsole.UI.Window.OnVisibleChanged">
            <summary>
            Depending on if the window is visible, calls <see cref="M:SadConsole.UI.Window.Show(System.Boolean)"/> or <see cref="M:SadConsole.UI.Window.Hide"/>.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.OnShown">
            <summary>
            User-definable code called when the window is shown.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.OnHidden">
            <summary>
            User-definable code called when the window is hidden.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.Show">
            <summary>
            Displays this window using the modal value of the <see cref="P:SadConsole.UI.Window.IsModalDefault"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.Show(System.Boolean)">
            <summary>
            Displays this window.
            </summary>
            <param name="modal">When true, the window will be displayed as modal; otherwise false.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.Center">
            <summary>
            Centers the window within the bounds of <see cref="P:SadConsole.Settings.Rendering.RenderWidth"/> and <see cref="P:SadConsole.Settings.Rendering.RenderHeight"/>
            </summary>
        </member>
        <member name="M:SadConsole.UI.Window.ToString">
            <summary>
            Returns the value "Window".
            </summary>
            <returns>The string "Window".</returns>
        </member>
        <member name="M:SadConsole.UI.Window.Ask(System.String,System.String,System.String,System.Action{System.Boolean,System.String},SadConsole.StringValidation.Validator,System.String,SadConsole.UI.Colors)">
            <summary>
            Displays a window with an input box and an optional validator with a text prompt.
            </summary>
            <param name="message">The message to print in the window.</param>
            <param name="acceptPrompt">The text of the accept button.</param>
            <param name="cancelPrompt">The text of the cancel button.</param>
            <param name="closedCallback">A delegate called when the window is closed.</param>
            <param name="validator">An optional validator to validate the input text.</param>
            <param name="defaultValue">An optional default value of the input text box.</param>
            <param name="colors">An optional set of colors to apply to the window.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Ask(SadConsole.ColoredString,System.String,System.String,System.Action{System.Boolean,System.String},SadConsole.StringValidation.Validator,System.String,SadConsole.UI.Colors)">
            <summary>
            Displays a window with an input box and an optional validator, using a <see cref="T:SadConsole.ColoredString"/> as the prompt text.
            </summary>
            <param name="message">The message to print in the window.</param>
            <param name="acceptPrompt">The text of the accept button.</param>
            <param name="cancelPrompt">The text of the cancel button.</param>
            <param name="closedCallback">A delegate called when the window is closed.</param>
            <param name="validator">An optional validator to validate the input text.</param>
            <param name="defaultValue">An optional default value of the input text box.</param>
            <param name="colors">An optional set of colors to apply to the window.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Prompt(System.String,System.String,System.String,System.Action{System.Boolean},SadConsole.UI.Colors)">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display.</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="closedCallback">Callback with the yes (true) or no (false) result.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Prompt(SadConsole.ColoredString,System.String,System.String,System.Action{System.Boolean},SadConsole.UI.Colors)">
            <summary>
            Shows a window prompt with two buttons for the user to click.
            </summary>
            <param name="message">The text to display. (background color is ignored)</param>
            <param name="yesPrompt">The yes button's text.</param>
            <param name="noPrompt">The no button's text.</param>
            <param name="closedCallback">Callback with the yes (true) or no (false) result.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Message(System.String,System.String,System.Action,SadConsole.UI.Colors)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message.</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>.</param>
        </member>
        <member name="M:SadConsole.UI.Window.Message(SadConsole.ColoredString,System.String,System.Action,SadConsole.UI.Colors)">
            <summary>
            Displays a dialog to the user with a specific message.
            </summary>
            <param name="message">The message. (background color is ignored)</param>
            <param name="closeButtonText">The text of the dialog's close button.</param>
            <param name="closedCallback">A callback indicating the message was dismissed.</param>
            <param name="colors">The colors to apply for the message box and buttons. If <see langword="null"/>.</param>
        </member>
        <member name="T:SadConsole.ValueChangedCancelableEventArgs`1">
            <summary>
            Event arguments for an event fired when an object's properties are changed. The change can be cancelled.
            </summary>
        </member>
        <member name="P:SadConsole.ValueChangedCancelableEventArgs`1.IsCancelled">
            <summary>
            Setting this property to <see langword="true"/> indicates that the change should be cancelled.
            </summary>
        </member>
        <member name="M:SadConsole.ValueChangedCancelableEventArgs`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of this object with the specified old and new value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:SadRogue.Primitives.ColorExtensions2">
            <summary>
            Various extension methods to <see cref="T:SadRogue.Primitives.Color"/> class.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorExtensions2.ColorMappings">
            <summary>
            Custom color mappings for the <see cref="M:SadRogue.Primitives.ColorExtensions2.FromName(System.String)"/> and <see cref="M:SadRogue.Primitives.ColorExtensions2.FromParser(SadRogue.Primitives.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"/> methods. Key names should be lowercase.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.LerpSteps(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates an array of colors that includes the <paramref name="color"/> and <paramref name="endingColor"/> and <paramref name="steps"/> of colors between them.
            </summary>
            <param name="color">The starting color which will be at index 0 in the array.</param>
            <param name="endingColor">The ending color which will be at index `steps - 1` in the array.</param>
            <param name="steps">The gradient steps in the array which uses <see cref="M:SadRogue.Primitives.Color.Lerp(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Single)"/>.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetHSL(SadRogue.Primitives.Color,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color values based on HSL instead of RGB.
            </summary>
            <param name="color">The color to change.</param>
            <param name="h">The hue amount.</param>
            <param name="s">The saturation amount.</param>
            <param name="l">The luminance amount.</param>
            <remarks>Taken from http://www.easyrgb.com/index.php?X=MATH&amp;H=19#text19 </remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetRandomColor(SadRogue.Primitives.Color,System.Random)">
            <summary>
            Gets a random color.
            </summary>
            <param name="color">The color object to start with. Will be overridden.</param>
            <param name="random">A random object to get numbers from.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetDark(SadRogue.Primitives.Color)">
            <summary>
            Gets a darker version of the color. R,G,B channels are * 0.25f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetDarker(SadRogue.Primitives.Color)">
            <summary>
            Gets a darker version of the color. R,G,B channels are * 0.50f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetDarkest(SadRogue.Primitives.Color)">
            <summary>
            Gets a darker version of the color. R,G,B channels are * 0.75f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBright(SadRogue.Primitives.Color)">
            <summary>
            Gets a brighter version of the color. R,G,B channels are * 1.25f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBrighter(SadRogue.Primitives.Color)">
            <summary>
            Gets a brighter version of the color. R,G,B channels are * 1.50f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBrightest(SadRogue.Primitives.Color)">
            <summary>
            Gets a brighter version of the color. R,G,B channels are * 1.75f.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A darker color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.RedOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Red value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the red channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GreenOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Green value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the green channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.BlueOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Blue value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the blue channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.AlphaOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Alpha value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the alpha channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearRed(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the red channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearGreen(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the green channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearBlue(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the blue channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ClearAlpha(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the alpha channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillRed(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the red channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillGreen(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the green channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillBlue(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the blue channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FillAlpha(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the alpha channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetRed(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the red channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the red channel.</param>
            <returns>A color with the red channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetGreen(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the green channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the green channel.</param>
            <returns>A color with the green channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetBlue(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the blue channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the blue channel.</param>
            <returns>A color with the blue channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.SetAlpha(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the alpha channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the alpha channel.</param>
            <returns>A color with the alpha channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetLuma(SadRogue.Primitives.Color)">
            <summary>
            Gets the luma of an existing color.
            </summary>
            <param name="color">The color to calculate the luma from.</param>
            <returns>A value based on this code: (color.R + color.R + color.B + color.G + color.G + color.G) / 6f</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetBrightness(SadRogue.Primitives.Color)">
            <summary>
            Gets the brightness of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The brightness value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetSaturation(SadRogue.Primitives.Color)">
            <summary>
            Gets the saturation of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The saturation value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.GetHue(SadRogue.Primitives.Color)">
            <summary>
            Gets the hue of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The hue value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ToParser(SadRogue.Primitives.Color)">
            <summary>
            Converts a color to the format used by <see cref="T:SadConsole.StringParser.ParseCommandRecolor"/> command.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string in this format R,G,B,A so for <see cref="F:SadRogue.Primitives.Color.Green"/> you would get <code>0,128,0,255</code>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FromParser(SadRogue.Primitives.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a color in the format of <see cref="T:SadConsole.StringParser.ParseCommandRecolor"/>.
            </summary>
            <param name="color">The color to use as a base.</param>
            <param name="value">The string parser color command.</param>
            <param name="keepR">Indicates that command wanted to keep the Red color channel.</param>
            <param name="keepG">Indicates that command wanted to keep the Green color channel.</param>
            <param name="keepB">Indicates that command wanted to keep the Blue color channel.</param>
            <param name="keepA">Indicates that command wanted to keep the Alpha color channel.</param>
            <param name="useDefault">Indicates that command wanted to use the default values passed.</param>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FromName(System.String)">
            <summary>
            Searches <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/> for a defined color.
            </summary>
            <param name="name">The name of a color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.FromName(System.String,SadRogue.Primitives.Color)">
            <summary>
            Searches <see cref="F:SadRogue.Primitives.ColorExtensions2.ColorMappings"/> for a defined color. If color is not defined, the color specified by <paramref name="defaultColor"/> is returned.
            </summary>
            <param name="name">The name of a color.</param>
            <param name="defaultColor">Fallback color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions2.ToColoredString(SadRogue.Primitives.Gradient,System.String)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object using the current gradient.
            </summary>
            <param name="gradient">The gradient to work with.</param>
            <param name="text">The text to use for the colored string.</param>
            <returns>A new colored string object.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LettersOnly_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LettersOnly method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LettersOnly_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LettersOnly_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LettersOnly_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LettersOnly_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LettersOnly_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LettersOnly_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LettersOnly_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
